{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GoTrackIt","text":"<p>Welcome to GoTrackIt.</p>"},{"location":"aa/","title":"Welcome to GoTrackIt !","text":"<p>GoTrackIt \u662f\u4e00\u4e2a\u57fa\u4e8e\u9690\u9a6c\u5c14\u53ef\u592b\u6a21\u578b\u5b9e\u73b0\u7684\u5730\u56fe\u5339\u914d\u5305\uff0c\u901a\u8fc7\u6982\u7387\u56fe\u5efa\u6a21\u7684\u65b9\u5f0f\u5c06\u8f66\u8f86\u7684GPS\u8f68\u8ff9\u6570\u636e\u5339\u914d\u5230\u9053\u8def\u8def\u7f51\uff0c\u83b7\u53d6\u8f66\u8f86\u7684\u6807\u51c6\u5316\u65f6\u7a7a\u8f68\u8ff9\uff0c \u53ef\u4ee5\u6709\u6548\u652f\u6491\u51fa\u884c\u5bfc\u822a\u3001\u4ea4\u901a\u76d1\u6d4b\u3001\u4ea4\u901a\u6cbb\u7406\u3001\u78b3\u6392\u6838\u7b97\u3001\u4ea4\u901a\u5efa\u6a21\u7b49\u65b9\u5411.</p>"},{"location":"aa/#commands123","title":"Commands123","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li> <p><code>mkdocs -h</code> - Print help message and exit.</p> </li> <li> <p>123</p> </li> <li>12244</li> <li>334555</li> </ul>"},{"location":"aa/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages\uff0cimages and other files.\n</code></pre>"},{"location":"format/","title":"\u4e00\u7ea7\u6807\u9898","text":""},{"location":"format/#_2","title":"\u4e8c\u7ea7\u6807\u9898","text":""},{"location":"format/#_3","title":"\u4e09\u7ea7\u6807\u9898","text":""},{"location":"format/#_4","title":"\u56db\u7ea7\u6807\u9898","text":""},{"location":"format/#_5","title":"\u4e94\u7ea7\u6807\u9898","text":""},{"location":"format/#_6","title":"\u516d\u7ea7\u6807\u9898","text":"<p>\u8fd9\u662f\u4e00\u6bb5\u5f15\u7528</p> <p>\u8fd9\u662f\u4e00\u6bb5\u5f15\u7528</p> <p>\u6709\u5e8f\u5217\u8868\uff1a</p> <ol> <li>\u6709\u5e8f\u5217\u88681</li> <li>\u6709\u5e8f\u5217\u88682</li> </ol> <p>\u65e0\u5e8f\u5217\u8868\uff1a</p> <ul> <li>\u5217\u88681</li> <li>\u5217\u88682</li> <li>\u5217\u88683</li> <li>\u5217\u88684</li> </ul> <p>\u4efb\u52a1\u5217\u8868</p> <ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul> <p>\u4ee3\u7801\u5757 <pre><code>int main() {\n    return 0;\n}\n</code></pre></p> <pre><code>def test():\n    return None\n</code></pre> <p>\u6570\u5b66\u516c\u5f0f\u9075\u5faaLatex:</p> <p> \u8868\u683c</p> \u8868\u5934 \u8868\u5934 \u8868\u5934 \u884c1\uff0c\u52171 \u884c1\uff0c\u52172 \u884c1\uff0c\u52173 \u884c2\uff0c\u52171 \u884c2\uff0c\u52172 \u884c2\uff0c\u52173 \u884c3\uff0c\u52171 \u884c3\uff0c\u52172 \u884c3\uff0c\u52173 <p>\u5206\u9694\u7b26\u4e0a\u9762</p> <p>\u5206\u9694\u7b26\u4e0b\u9762</p> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Phasellus posuere in sem ut cursus</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p></p>"},{"location":"format/#123","title":"123","text":"<p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <p>Lorem ipsum dolor sit amet, (2) consectetur adipiscing elit.</p> <ol> <li> <p> I'm an annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be expressed in Markdown.</p> </li> <li> <p><code>source code</code></p> </li> </ol> <p>Subscribe to our newsletter</p> <p>Subscribe to our newsletter</p> bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>"},{"location":"format/#_7","title":"\u65e0\u5e8f\u5217\u8868","text":"Unordered listOrdered list <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol> <ul> <li> HTML for content and structure</li> <li> JavaScript for interactivity</li> <li> CSS for text running out of boxes</li> <li> Internet Explorer ... huh?</li> </ul> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla.  Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>\u5982\u56fe</p> Image caption <ul> <li> <p>Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur   accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh   lacinia sed. Aenean in finibus diam.</p> <ul> <li>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis.</li> <li>Nam vulputate tincidunt fringilla.</li> <li>Nullam dignissim ultrices urna non auctor.</li> </ul> </li> </ul> <code>Lorem ipsum dolor sit amet</code> <p>Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis.</p> <code>Cras arcu libero</code> <p>Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante.</p> <p>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor.</p> <p>\u5177\u4f53\u8bf7\u770b\uff1a\u8df3\u8f6c\u5230\u76ee\u6807\u4f4d\u7f6e</p> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\] \\[ \\cos x=\\sqrt 2 \\] <p>The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\), because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\).</p>"},{"location":"license/","title":"license","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"license/#_1","title":"\u4ec0\u4e48","text":""},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/","title":"\u5feb\u901f\u5f00\u59cb","text":""},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_2","title":"\u6570\u636e\u4e0b\u8f7d","text":"<ul> <li> QuickStart-Match-1-GitHub\u4e0b\u8f7d\u94fe\u63a5</li> <li> QuickStart-Match-1-\u767e\u5ea6\u7f51\u76d8\u4e0b\u8f7d\u94fe\u63a5</li> </ul>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#1-","title":"\u6848\u4f8b1 - \u975e\u7a00\u758f\u5b9a\u4f4d\u6570\u636e","text":""},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_3","title":"\u8f68\u8ff9\u6570\u636e\u6e05\u6d17","text":"<pre><code># \u8bfb\u53d6GPS\u6837\u4f8b\u6570\u636e\nimport pandas as pd\nfrom gotrackit.gps.Trajectory import TrajectoryPoints\n\ngps_df = pd.read_csv(r'./data/input/QuickStart-Match-1/example_gps.csv')\n\n# \u5229\u7528gps\u6570\u636e\u6784\u5efaTrajectoryPoints, \u5e76\u4e14\u5bf9\u6570\u636e\u8fdb\u884c\u6e05\u6d17\n# \u662f\u5426\u9700\u8981\u8fdb\u884c\u8be5\u6b65\u64cd\u4f5c\u89c6\u5b9e\u9645\u60c5\u51b5\u800c\u5b9a\ntp = TrajectoryPoints(gps_points_df=gps_df, plain_crs='EPSG:32649')\ntp.lower_frequency(lower_n=2).kf_smooth(o_deviation=0.3)  # \u7531\u4e8e\u6837\u4f8b\u6570\u636e\u5b9a\u4f4d\u9891\u7387\u9ad8\u4e14\u6709\u4e00\u5b9a\u7684\u8bef\u5dee\uff0c\u56e0\u6b64\u5148\u505a\u95f4\u9694\u91c7\u6837\u7136\u540e\u6267\u884c\u6ee4\u6ce2\u5e73\u6ed1\ngps_df = tp.trajectory_data(_type='df')\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#net","title":"\u6784\u9020Net\u5bf9\u8c61","text":"<pre><code>import geopandas as gpd\nfrom gotrackit.map.Net import Net\n\n# \u8bfb\u53d6\u8def\u7f51\u6570\u636e\u5e76\u4e14\u6784\u5efaNet\u7c7b\u3001\u521d\u59cb\u5316\nlink = gpd.read_file(r'./data/input/net/xian/modifiedConn_link.shp')\nnode = gpd.read_file(r'./data/input/net/xian/modifiedConn_node.shp')\nmy_net = Net(link_gdf=link, node_gdf=node, not_conn_cost=1200)\nmy_net.init_net()  # net\u521d\u59cb\u5316\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#mapmatch","title":"\u8bbe\u7f6eMapMatch\u53c2\u6570","text":"<pre><code>from gotrackit.MapMatch import MapMatch\n# \u6784\u5efa\u5339\u914d\u7c7b\n# \u6307\u5b9a\u8981\u8f93\u51faHTML\u53ef\u89c6\u5316\u6587\u4ef6\n# \u6307\u5b9a\u9879\u76ee\u7684\u6807\u5fd7\u5b57\u7b26flag_name='general_sample', \u8fd9\u4e2a\u7528\u6237\u53ef\u4ee5\u81ea\u5b9a\u4e49\n# gps\u6570\u636e\u65f6\u95f4\u5217\u7684\u503c\u90fd\u662f\u5f62\u59822022-05-12 16:27:46\uff0c\u56e0\u6b64\u6307\u5b9a\u65f6\u95f4\u5217\u683c\u5f0f\u4e3a '%Y-%m-%d %H:%M:%S'\n# \u5173\u4e8egps_buffer\u7684\u786e\u5b9a\uff0c\u9700\u8981\u5c06\u8def\u7f51\u548cgps\u6570\u636e\u4e00\u540c\u4f7f\u7528gis\u8f6f\u4ef6\u53ef\u89c6\u5316\uff0c\u5927\u6982\u786e\u5b9aGPS\u6570\u636e\u548c\u5019\u9009\u8def\u6bb5\u7684\u8ddd\u79bb\nmpm = MapMatch(net=my_net, gps_buffer=120, flag_name='general_sample', time_format='%Y-%m-%d %H:%M:%S',\n               use_heading_inf=True, omitted_l=6.0, export_html=True, del_dwell=False,\n               out_fldr=r'./data/output/match_visualization/QuickStart-Match-1', dense_gps=False,\n               gps_radius=20.0)\n\n# \u6267\u884c\u5339\u914d\n# \u7b2c\u4e00\u4e2a\u8fd4\u56de\u7ed3\u679c\u662f\u5339\u914d\u7ed3\u679c\u8868\n# \u7b2c\u4e8c\u4e2a\u662f\u53d1\u751f\u8b66\u544a\u7684agent\u7684\u76f8\u5173\u4fe1\u606f({agent_id1: pd.DataFrame(), agent_id2: pd.DataFrame()...})\n# \u7b2c\u4e09\u4e2a\u662f\u5339\u914d\u51fa\u9519\u7684agent\u7684id\u5217\u8868(GPS\u70b9\u7ecf\u8fc7\u9884\u5904\u7406(\u6216\u8005\u539f\u59cb\u6570\u636e)\u540e\u70b9\u6570\u91cf\u4e0d\u8db32\u4e2a)\nmatch_res, warn_info, error_info = mpm.execute(gps_df=gps_df)\nmatch_res.to_csv(fr'./data/output/match_visualization/QuickStart-Match-1/general_match_res.csv',\n                 encoding='utf_8_sig', index=False)\n</code></pre> <p>\u5173\u4e8e\u5982\u4f55\u786e\u5b9agps_buffer\uff0c\u8fd9\u4e2a\u548cGPS\u7684\u5b9a\u4f4d\u8bef\u5dee\u5927\u5c0f\u6709\u5173\u7cfb\uff0c\u5982\u4e0b\u56fe\uff0c\u6211\u4eec\u5c06GPS\u6570\u636e\u4e0e\u8def\u7f51\u4e00\u540c\u5728QGIS\u4e2d\u8fdb\u884c\u53ef\u89c6\u5316</p> \u5b9a\u4f4d\u6570\u636e\u4e0e\u8def\u7f51 <p>\u53ef\u4ee5\u770b\u5230GPS\u70b9\u5b9a\u4f4d\u9891\u7387\u4e0d\u7b97\u4f4e\uff0c\u4e14\u5b9a\u4f4d\u70b9\u504f\u79bb\u9053\u8def\u4e0d\u7b97\u8fdc\uff0c\u5927\u6982\u572885\u7c73\u5de6\u53f3\uff0c\u4e3a\u4e86\u786e\u4fdd\u6240\u6709\u7684GPS\u70b9\u90fd\u80fd\u5173\u8054\u5230\u5019\u9009\u8def\u6bb5\uff0c\u6211\u4eec\u53d6gps_buffer=120\u7c73\u8f83\u4e3a\u5408\u9002</p> \u5b9a\u4f4d\u6570\u636e\u4e0e\u8def\u7f51"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#2-","title":"\u6848\u4f8b2 - \u7a00\u758f\u5b9a\u4f4d\u6570\u636e","text":""},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_4","title":"\u6570\u636e\u5904\u7406\u4e0e\u8def\u5f84\u5339\u914d","text":"<pre><code>import pandas as pd\nimport geopandas as gpd\nfrom gotrackit.map.Net import Net\nfrom gotrackit.MapMatch import MapMatch\nfrom gotrackit.gps.Trajectory import TrajectoryPoints\n\nif __name__ == '__main__':\n    # \u8bfb\u53d6GPS\u6837\u4f8b\u6570\u636e\n    gps_df = pd.read_csv(r'./data/input/QuickStart-Match-1/example_sparse_gps.csv')\n\n    # \u5229\u7528gps\u6570\u636e\u6784\u5efaTrajectoryPoints, \u662f\u5426\u9700\u8981\u8fdb\u884c\u8be5\u6b65\u64cd\u4f5c\u89c6\u5b9e\u9645\u60c5\u51b5\u800c\u5b9a\n    tp = TrajectoryPoints(gps_points_df=gps_df, plain_crs='EPSG:32649')\n    tp.dense(dense_interval=120)  # \u7531\u4e8e\u6837\u4f8b\u6570\u636e\u662f\u7a00\u758f\u5b9a\u4f4d\u6570\u636e\uff0c\u6211\u4eec\u5728\u5339\u914d\u524d\u8fdb\u884c\u589e\u5bc6\u5904\u7406\n    gps_df = tp.trajectory_data(_type='df')\n    tp.export_html(out_fldr=r'./data/output/match_visualization/QuickStart-Match-1')  # \u8f93\u51fa\u589e\u5bc6\u524d\u540e\u7684\u8f68\u8ff9\u5bf9\u6bd4\n\n    # \u8bfb\u53d6\u8def\u7f51\u6570\u636e\u5e76\u4e14\u6784\u5efaNet\u7c7b\u3001\u521d\u59cb\u5316\n    link = gpd.read_file(r'./data/input/net/xian/modifiedConn_link.shp')\n    node = gpd.read_file(r'./data/input/net/xian/modifiedConn_node.shp')\n    my_net = Net(link_gdf=link, node_gdf=node, not_conn_cost=1200)\n    my_net.init_net()  # net\u521d\u59cb\u5316\n\n    # \u7531\u4e8e\u8f68\u8ff9\u70b9\u4e2d\u5927\u90e8\u5206\u70b9\u662f\u589e\u5bc6\u540e\u7684\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06gps_buffer\u8c03\u5927\u624d\u80fd\u786e\u4fdd\u8f68\u8ff9\u70b9\u5173\u8054\u5230\u8def\u6bb5\n    # \u7531\u4e8e\u6211\u4eec\u5df2\u7ecf\u63d0\u524d\u5c06GPS\u6570\u636e\u8fdb\u884c\u589e\u5bc6\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u4f7f\u7528MapMatch\u4e2d\u7684\u589e\u5bc6 - dense_gps=False\n    mpm = MapMatch(net=my_net, gps_buffer=700, top_k=20, flag_name='sparse_sample',\n                   export_html=True, time_format='%Y-%m-%d %H:%M:%S', use_heading_inf=True,\n                   out_fldr=r'./data/output/match_visualization/QuickStart-Match-1', dense_gps=False,\n                   gps_radius=15.0)\n\n    # \u6267\u884c\u5339\u914d\n    # \u7b2c\u4e00\u4e2a\u8fd4\u56de\u7ed3\u679c\u662f\u5339\u914d\u7ed3\u679c\u8868\n    # \u7b2c\u4e8c\u4e2a\u662f\u53d1\u751f\u8b66\u544a\u7684agent\u7684\u76f8\u5173\u4fe1\u606f({agent_id1: pd.DataFrame(), agent_id2: pd.DataFrame()...})\n    # \u7b2c\u4e09\u4e2a\u662f\u5339\u914d\u51fa\u9519\u7684agent\u7684id\u5217\u8868(GPS\u70b9\u7ecf\u8fc7\u9884\u5904\u7406(\u6216\u8005\u539f\u59cb\u6570\u636e)\u540e\u70b9\u6570\u91cf\u4e0d\u8db32\u4e2a)\n    match_res, warn_info, error_info = mpm.execute(gps_df=gps_df)\n    match_res.to_csv(fr'./data/output/match_visualization/QuickStart-Match-1/sparse_match_res.csv',\n                     encoding='utf_8_sig', index=False)\n</code></pre> <p>\u5982\u4e0b\u56fe\uff0c\u6211\u4eec\u53ef\u770b\u5230\uff0cGPS\u70b9\u8fdb\u884c\u589e\u5bc6\u540e\uff0c\u589e\u5bc6\u70b9\u8ddd\u79bb\u5019\u9009\u8def\u6bb5\u5f88\u8fdc\uff0c\u5927\u6982\u6709350\u7c73\u5de6\u53f3\uff08\u84dd\u8272\u70b9\u4e3a\u6e90\u6570\u636e\u70b9\uff0c\u7ea2\u8272\u70b9\u4e3a\u589e\u5bc6\u540e\u7684\u70b9\uff09</p> \u5b9a\u4f4d\u6570\u636e\u589e\u5bc6 <p>\u4e3a\u4e86\u4fdd\u8bc1\u6240\u6709\u7684\u589e\u5bc6\u70b9\u90fd\u80fd\u5173\u8054\u5230\u5019\u9009\u8def\u6bb5\uff0c\u6211\u4eec\u8003\u8651\u8f83\u591a\u7684\u5bcc\u4f59\uff0c\u53d6\u503cgps_buffer=700\uff0ctop_k=20\uff0c\u5373\u9009\u53d6\u6bcf\u4e2aGPS\u70b9\u9644\u8fd1700\u7c73\u8303\u56f4\u5185\u7684\u6700\u8fd120\u4e2a\u8def\u6bb5\u4f5c\u4e3a\u5019\u9009\u8def\u6bb5</p> \u5927\u6982\u6d4b\u91cf\u8ddd\u79bb <p>Note</p> <p>\u5176\u4ed6\u53c2\u6570\u601d\u8def-\u7b56\u75652\uff1a\u5e94\u5bf9\u7a00\u758f\u5b9a\u4f4d\u6570\u636e\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u9009\u62e9\u4e0d\u589e\u5bc6\u7684\u7b56\u7565\uff0c\u6bd4\u5982\u63d0\u4f9b\u8f83\u5927\u7684gps_buffer\u548ccut_off\u53c2\u6570: \u672c\u4f8b\u4e2duse_sub_net=True\uff0cgps_buffer\u53d6\u503c1000\uff0ccut_off\u53d6\u503c1500\uff0c\u4e0d\u542f\u7528\u8f68\u8ff9\u589e\u5bc6\uff0c\u4f9d\u65e7\u53ef\u4ee5\u5339\u914d\u6210\u529f</p> <p>Note</p> <p>\u5176\u4ed6\u53c2\u6570\u601d\u8def-\u7b56\u75653\uff1a\u5e94\u5bf9\u7a00\u758f\u5b9a\u4f4d\u6570\u636e\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u9009\u62e9\u4e0d\u589e\u5bc6\u3001\u4e0d\u4f7f\u7528\u5b50\u7f51\u7edc\uff0c\u4f46\u662f\u8981\u63d0\u4f9b\u8f83\u5927\u7684cut_off\u53c2\u6570\uff1a\u672c\u4f8b\u4e2duse_sub_net=False\uff0cgps_buffer\u53d6\u503c150\uff0ccut_off\u53d6\u503c1500\uff0c\u4e0d\u542f\u7528\u8f68\u8ff9\u589e\u5bc6\uff0c\u4f9d\u65e7\u53ef\u4ee5\u5339\u914d\u6210\u529f</p>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_5","title":"\u8f68\u8ff9\u53ef\u89c6\u5316","text":"<p>\u6253\u5f00tp.export_html\u51fd\u6570\u8f93\u51fa\u7684\u6587\u4ef6\uff0c\u6309\u7167\u5982\u4e0b\u56fe\u6240\u793a\u53ef\u4ee5\u67e5\u770b\u5904\u7406\u524d\u540e\u7684\u8f68\u8ff9\u70b9(\u84dd\u8272\uff1a\u6e90\u6570\u636e\uff1b\u9ec4\u8272\uff1a\u5904\u7406\u540e\u7684\u6570\u636e)</p> \u5b9a\u4f4d\u6570\u636e\u4e0e\u8def\u7f51"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_6","title":"\u5339\u914d\u7ed3\u679c\u53ef\u89c6\u5316","text":"\u4f7f\u7528\u65f6\u95f4\u8f74 HTML\u63a7\u4ef6\u793a\u610f"},{"location":"CommunityDiscussion/%E7%94%A8%E6%88%B7%E4%BA%A4%E6%B5%81/","title":"\u7528\u6237\u4ea4\u6d41","text":"<p>\u5f53\u524d\u4e24\u4e2a\u7528\u6237\u7fa4\u4eba\u6570\u5747\u5df2\u8d85\u8fc7200\u4eba\uff0c\u8bf7\u6dfb\u52a0GoTrackIt\u5c0f\u52a9\u624b\u5165\u7fa4\uff1a</p> GoTrackIt\u5c0f\u52a9\u624b"},{"location":"CommunityDiscussion/%E8%B4%A1%E7%8C%AE%E5%90%8D%E5%8D%95/","title":"\ud83d\udc68\u200d\ud83c\udf93 \u8d21\u732e\u540d\u5355","text":"<p>\u5728GoTrackIt\u7684\u8fed\u4ee3\u53d1\u5c55\u8fc7\u7a0b\u4e2d\uff0c\u4ed6\u4eec\u5bf9GoTrackIt\u63d0\u51fa\u4e86\u5f88\u591a\u5b9d\u8d35\u7684\u610f\u89c1\uff0c\u5e26\u6765\u4e86\u5927\u91cf\u5b9e\u7528\u7684\u8bbe\u8ba1\u601d\u8def\uff0c\u52a9\u529bGotTrackIt\u6210\u4e3a\u66f4\u52a0\u666e\u53ca\u7684\u5f00\u6e90\u9879\u76ee\uff01</p> <ul> <li>\u9648\u5148\u9f99\uff0c314059@qq.com\uff0c\u5e7f\u5dde\u5e02\u4ea4\u901a\u89c4\u5212\u7814\u7a76\u9662\u6709\u9650\u516c\u53f8-\u6a21\u578b\u5de5\u7a0b\u5e08</li> <li>\u90d1\u8d35\u5175\uff0c1441411885@qq.com\uff0c\u5e7f\u5dde\u5e02\u4ea4\u901a\u89c4\u5212\u7814\u7a76\u9662\u6709\u9650\u516c\u53f8-GIS\u5de5\u7a0b\u5e08</li> <li>\u4e07\u5fd7\u6768\uff0c1115897470@qq.com\uff0c\u56db\u5ddd\u7701\u4ea4\u901a\u8fd0\u8f93\u53d1\u5c55\u6218\u7565\u548c\u89c4\u5212\u79d1\u5b66\u7814\u7a76\u9662-\u4ea4\u901a\u5927\u6570\u636e\u5de5\u7a0b\u5e08</li> <li>\u90ed\u51ef\uff0crsroyceguo@gmail.com\uff0c\u72ec\u7acb\u5f00\u53d1\u8005</li> <li>\u8d39\u6021\u7444\uff0c2022224127@chd.edu.cn\uff0c\u957f\u5b89\u5927\u5b66\u4fe1\u606f\u5de5\u7a0b\u5b66\u9662-\u7855\u58eb\u7814\u7a76\u751f</li> <li>\u53c2\u8003\u4e86\u77e5\u4e4e\u7f51\u53cb @\u7a7a\u4e4b\u7bb1\u5927\u6218\u6625\u65e5\u5f71 \u5173\u4e8e\u6ee4\u6ce2\u7684\u4ee3\u7801</li> <li>\u53c2\u8003\u4e86CSDN\u7f51\u53cb @\u778c\u7761\u7684\u4ee3\u7801\u4ed3\u5e93 \u5173\u4e8e\u8d1d\u585e\u5c14\u66f2\u7ebf\u7684\u4ee3\u7801</li> <li>\u53c2\u8003\u4e86\u67d0\u4f4d\u5927\u795e\u7f51\u53cb\u5173\u4e8e\u5750\u6807\u8f6c\u6362\u7684\u6587\u7ae0\uff0c\u8fd9\u4e2a\u7f51\u4e0a\u8d44\u6599\u592a\u591a\uff0c\u4e0d\u6e05\u695a\u662f\u8c01\u7684\u539f\u521b\uff0c\u5982\u6709\u4eba\u77e5\u9053\u53ef\u4ee5\u544a\u77e5\u4f5c\u8005\uff0c\u6211\u4eec\u4f1a\u5c06\u4ed6\u5217\u4e3a\u8d21\u732e\u8005</li> <li>\u53c2\u8003\u4e86Paul Newson\u3001John Krumm\u7684\u8bba\u6587\uff1aHidden Markov Map Matching Through Noise and Sparseness</li> <li>\u53c2\u8003\u4e86\u6b66\u6c49\u5927\u5b66YangCan\u7684\u8bba\u6587\uff1aFast map matching, an algorithm integrating hidden Markov model with precomputation</li> </ul>"},{"location":"Func%26API/GpsPreProcess/","title":"GpsPreProcess","text":"<p>\u8f68\u8ff9\u9884\u5904\u7406\u7c7b</p> <p>\u63d0\u4f9b\u4e86\u8f68\u8ff9\u9884\u5904\u7406\u7684\u76f8\u5173\u65b9\u6cd5(\u884c\u7a0b\u5212\u5206\u3001\u63d0\u53d6\u5e26\u9014\u5f84\u70b9\u7684OD)</p> <p>Parameters:</p> Name Type Description Default <code>gps_df</code> <code>DataFrame</code> <p>\u5b9a\u4f4d\u6570\u636e</p> <code>None</code> <code>use_multi_core</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u591a\u6838</p> <code>False</code> <code>used_core_num</code> <code>int</code> <p>\u4f7f\u7528\u7684\u6838\u6570</p> <code>2</code> Source code in <code>src/gotrackit/gps/GpsTrip.py</code> <pre><code>def __init__(self, gps_df: pd.DataFrame = None, use_multi_core: bool = False, used_core_num: int = 2):\n    \"\"\"\u8f68\u8ff9\u9884\u5904\u7406\u7c7b\n\n    \u63d0\u4f9b\u4e86\u8f68\u8ff9\u9884\u5904\u7406\u7684\u76f8\u5173\u65b9\u6cd5(\u884c\u7a0b\u5212\u5206\u3001\u63d0\u53d6\u5e26\u9014\u5f84\u70b9\u7684OD)\n\n    Args:\n        gps_df: \u5b9a\u4f4d\u6570\u636e\n        use_multi_core: \u662f\u5426\u542f\u7528\u591a\u6838\n        used_core_num: \u4f7f\u7528\u7684\u6838\u6570\n    \"\"\"\n    self.gps_df = gps_df\n    self.use_multi_core = use_multi_core\n    self.used_core_num = used_core_num\n</code></pre> <p> </p> <p>\u884c\u7a0b\u5212\u5206</p> <p>\u5bf9\u8f68\u8ff9\u6570\u636e\u8fdb\u884c\u884c\u7a0b\u5212\u5206</p> <p>Parameters:</p> Name Type Description Default <code>time_format</code> <code>str</code> <p>\u65f6\u95f4\u5217\u683c\u5f0f\u6a21\u677f</p> <code>'%Y-%m-%d %H:%M:%S'</code> <code>time_unit</code> <code>str</code> <p>\u65f6\u95f4\u5217\u5355\u4f4d</p> <code>'s'</code> <code>plain_crs</code> <code>str</code> <p>\u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb</p> <code>'EPSG:32650'</code> <code>group_gap_threshold</code> <code>float</code> <p>\u65f6\u95f4\u9608\u503c\uff0c\u4e3b\u884c\u7a0b\u5212\u5206\u53c2\u6570\uff0c\u5355\u4f4d\u79d2\uff0c\u5982\u679c\u524d\u540eGPS\u70b9\u7684\u5b9a\u4f4d\u65f6\u95f4\u8d85\u8fc7\u8be5\u9608\u503c\uff0c\u5219\u5728\u8be5\u70b9\u5207\u5206\u4e3b\u884c\u7a0b</p> <code>1800.0</code> <code>n</code> <code>int</code> <p>\u5b50\u884c\u7a0b\u5207\u5206\u53c2\u6570\uff0c\u5982\u679c\u8d85\u8fc7\u8fde\u7eedn\u4e2agps\u70b9\u7684\u8ddd\u79bb\u5c0f\u4e8emin_distance_threshold \u4e14 \u6301\u7eed\u65f6\u95f4\u8d85\u8fc7dwell_accu_time\uff0c\u90a3\u4e48\u8be5\u5904\u88ab\u8bc6\u522b\u4e3a\u505c\u7559\u70b9\uff0c\u4ece\u8be5\u5904\u5207\u5206\u5b50\u884c\u7a0b</p> <code>5</code> <code>min_distance_threshold</code> <code>float</code> <p>\u5b50\u884c\u7a0b\u5207\u5206\u8ddd\u79bb\u9608\u503c\uff0c\u5355\u4f4d\u7c73\uff0c\u5982\u679c\u4f60\u53ea\u60f3\u5212\u5206\u4e3b\u884c\u7a0b\uff0c\u5219\u6307\u5b9amin_distance_threshold\u4e3a\u8d1f\u6570\u5373\u53ef</p> <code>10.0</code> <code>dwell_accu_time</code> <code>float</code> <p>\u5b50\u884c\u7a0b\u5207\u5206\u65f6\u95f4\u9608\u503c\uff0c\u79d2</p> <code>60.0</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>\u5212\u5206\u597d\u884c\u7a0b\u7684\u8f68\u8ff9\u6570\u636e</p> Source code in <code>src/gotrackit/gps/GpsTrip.py</code> <pre><code>def trip_segmentations(self, time_format: str = '%Y-%m-%d %H:%M:%S',\n                       time_unit: str = 's',\n                       plain_crs: str = 'EPSG:32650', group_gap_threshold: float = 1800.0, n: int = 5,\n                       min_distance_threshold: float = 10.0,\n                       dwell_accu_time: float = 60.0) -&gt; pd.DataFrame:\n    \"\"\"\u884c\u7a0b\u5212\u5206\n\n    \u5bf9\u8f68\u8ff9\u6570\u636e\u8fdb\u884c\u884c\u7a0b\u5212\u5206\n\n    Args:\n        time_format: \u65f6\u95f4\u5217\u683c\u5f0f\u6a21\u677f\n        time_unit: \u65f6\u95f4\u5217\u5355\u4f4d\n        plain_crs: \u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb\n        group_gap_threshold: \u65f6\u95f4\u9608\u503c\uff0c\u4e3b\u884c\u7a0b\u5212\u5206\u53c2\u6570\uff0c\u5355\u4f4d\u79d2\uff0c\u5982\u679c\u524d\u540eGPS\u70b9\u7684\u5b9a\u4f4d\u65f6\u95f4\u8d85\u8fc7\u8be5\u9608\u503c\uff0c\u5219\u5728\u8be5\u70b9\u5207\u5206\u4e3b\u884c\u7a0b\n        n: \u5b50\u884c\u7a0b\u5207\u5206\u53c2\u6570\uff0c\u5982\u679c\u8d85\u8fc7\u8fde\u7eedn\u4e2agps\u70b9\u7684\u8ddd\u79bb\u5c0f\u4e8emin_distance_threshold \u4e14 \u6301\u7eed\u65f6\u95f4\u8d85\u8fc7dwell_accu_time\uff0c\u90a3\u4e48\u8be5\u5904\u88ab\u8bc6\u522b\u4e3a\u505c\u7559\u70b9\uff0c\u4ece\u8be5\u5904\u5207\u5206\u5b50\u884c\u7a0b\n        min_distance_threshold: \u5b50\u884c\u7a0b\u5207\u5206\u8ddd\u79bb\u9608\u503c\uff0c\u5355\u4f4d\u7c73\uff0c\u5982\u679c\u4f60\u53ea\u60f3\u5212\u5206\u4e3b\u884c\u7a0b\uff0c\u5219\u6307\u5b9amin_distance_threshold\u4e3a\u8d1f\u6570\u5373\u53ef\n        dwell_accu_time: \u5b50\u884c\u7a0b\u5207\u5206\u65f6\u95f4\u9608\u503c\uff0c\u79d2\n\n    Returns:\n        \u5212\u5206\u597d\u884c\u7a0b\u7684\u8f68\u8ff9\u6570\u636e\n    \"\"\"\n    if self.use_multi_core:\n        trip_df = pd.DataFrame()\n        result_list = []\n        pool, core_num, agent_group = self.create_pool()\n        for i in range(0, core_num):\n            _gps_df = self.gps_df[self.gps_df[gps_field.AGENT_ID_FIELD].isin(agent_group[i])].copy()\n            result = pool.apply_async(self._trip_segmentation,\n                                      args=(_gps_df, time_format, time_unit, plain_crs, group_gap_threshold, n,\n                                            min_distance_threshold, dwell_accu_time))\n            result_list.append(result)\n        pool.close()\n        pool.join()\n        max_agent_id = 0\n        for res in result_list:\n            _trip_df = res.get()\n            _trip_df[agent_field] = _trip_df[agent_field] + max_agent_id\n            trip_df = pd.concat([trip_df, _trip_df])\n            max_agent_id = trip_df[agent_field].max()\n        trip_df.reset_index(inplace=True, drop=True)\n    else:\n        trip_df = self._trip_segmentation(gps_df=self.gps_df, time_format=time_format,\n                                          time_unit=time_unit, plain_crs=plain_crs,\n                                          group_gap_threshold=group_gap_threshold, n=n,\n                                          min_distance_threshold=min_distance_threshold,\n                                          dwell_accu_time=dwell_accu_time)\n    trip_df = pd.DataFrame(trip_df)\n    try:\n        del trip_df[geometry_field]\n    except:\n        pass\n    return trip_df\n</code></pre> <p> </p> <p>\u63d0\u53d6\u5e26\u9014\u5f84\u70b9\u7684OD</p> <p>\u4ece\u5df2\u7ecf\u5212\u5206\u597d\u884c\u7a0b\u7684\u8f68\u8ff9\u6570\u636e(\u4e14\u8981\u6c42\u8f68\u8ff9\u6570\u636e\u5df2\u7ecf\u6309\u7167agent_id\u3001time\u8fdb\u884c\u5347\u5e8f\u6392\u5217)\u4e2d\u63d0\u53d6\u5e26\u9014\u5f84\u70b9\u7684OD</p> <p>Parameters:</p> Name Type Description Default <code>way_points_num</code> <code>int</code> <p>\u9014\u5f84\u70b9\u6570\u76ee</p> <code>5</code> <p>Returns:</p> Type Description <code>tuple[DataFrame, GeoDataFrame]</code> <p>od\u6570\u636e\u8868(DataFrame), od\u6570\u636e\u8868(GeoDataFrame)</p> Source code in <code>src/gotrackit/gps/GpsTrip.py</code> <pre><code>def sampling_waypoints_od(self, way_points_num: int = 5) -&gt; tuple[pd.DataFrame, gpd.GeoDataFrame]:\n    \"\"\"\u63d0\u53d6\u5e26\u9014\u5f84\u70b9\u7684OD\n\n    \u4ece\u5df2\u7ecf\u5212\u5206\u597d\u884c\u7a0b\u7684\u8f68\u8ff9\u6570\u636e(\u4e14\u8981\u6c42\u8f68\u8ff9\u6570\u636e\u5df2\u7ecf\u6309\u7167agent_id\u3001time\u8fdb\u884c\u5347\u5e8f\u6392\u5217)\u4e2d\u63d0\u53d6\u5e26\u9014\u5f84\u70b9\u7684OD\n\n    Args:\n        way_points_num: \u9014\u5f84\u70b9\u6570\u76ee\n\n    Returns:\n        od\u6570\u636e\u8868(DataFrame), od\u6570\u636e\u8868(GeoDataFrame)\n    \"\"\"\n    if self.use_multi_core:\n        od_df, od_line = pd.DataFrame(), gpd.GeoDataFrame()\n        result_list = []\n        pool, core_num, agent_group = self.create_pool()\n        for i in range(0, core_num):\n            _gps_df = self.gps_df[self.gps_df[gps_field.AGENT_ID_FIELD].isin(agent_group[i])].copy()\n            result = pool.apply_async(self._sampling_waypoints_od,\n                                      args=(_gps_df, way_points_num))\n            result_list.append(result)\n        pool.close()\n        pool.join()\n        for res in result_list:\n            _od_df, _od_line = res.get()\n            od_df = pd.concat([od_df, _od_df])\n            od_line = pd.concat([od_line, _od_line])\n        od_df.reset_index(inplace=True, drop=True)\n        od_line.reset_index(inplace=True, drop=True)\n    else:\n        od_df, od_line = self._sampling_waypoints_od(gps_df=self.gps_df, way_points_num=way_points_num)\n    return od_df, od_line\n</code></pre>"},{"location":"Func%26API/KeplerVis/","title":"KeplerVis","text":"<p>\u53ef\u89c6\u5316\u7c7b \u5f00\u666e\u52d2\u53ef\u89c6\u5316\u7c7b\uff0c\u63d0\u4f9b\u4e86\u51e0\u4f55\u5bf9\u8c61\u548c\u8def\u5f84\u7684\u53ef\u89c6\u5316\u65b9\u6cd5</p> <p>Parameters:</p> Name Type Description Default <code>zoom</code> <code>int</code> <p>\u7f29\u653e\u5c42\u7ea7, \u9ed8\u8ba415</p> <code>15</code> <code>cen_loc</code> <code>list[float, float] or tuple[float, float]</code> <p>\u5730\u56fe\u4e2d\u5fc3\u70b9\u7ecf\u7eac\u5ea6\u5750\u6807(WGS-84\u5750\u6807\u7cfb)</p> <code>None</code> <code>show_roads</code> <code>bool</code> <p>\u662f\u5426\u5728\u5e95\u56fe\u4e0a\u663e\u793a\u8def\u7f51\u56fe\u5c42</p> <code>True</code> <code>map_style</code> <code>str</code> <p>\u5730\u56fe\u98ce\u683c, \u53ef\u9009dark, light, muted, muted_night, satellite</p> <code>'dark'</code> Source code in <code>src/gotrackit/visualization.py</code> <pre><code>def __init__(self, zoom: int = 15,\n             cen_loc: list[float, float] or tuple[float, float] = None, show_roads: bool = True,\n             map_style: str = 'dark'):\n    \"\"\"\u53ef\u89c6\u5316\u7c7b\n    \u5f00\u666e\u52d2\u53ef\u89c6\u5316\u7c7b\uff0c\u63d0\u4f9b\u4e86\u51e0\u4f55\u5bf9\u8c61\u548c\u8def\u5f84\u7684\u53ef\u89c6\u5316\u65b9\u6cd5\n\n    Args:\n        zoom: \u7f29\u653e\u5c42\u7ea7, \u9ed8\u8ba415\n        cen_loc: \u5730\u56fe\u4e2d\u5fc3\u70b9\u7ecf\u7eac\u5ea6\u5750\u6807(WGS-84\u5750\u6807\u7cfb)\n        show_roads: \u662f\u5426\u5728\u5e95\u56fe\u4e0a\u663e\u793a\u8def\u7f51\u56fe\u5c42\n        map_style: \u5730\u56fe\u98ce\u683c, \u53ef\u9009dark, light, muted, muted_night, satellite\n\n    \"\"\"\n    self.user_config = kepler_config.get_glb_map_config()\n    if cen_loc is not None:\n        self.user_config[\"config\"][\"mapState\"][\"longitude\"] = cen_loc[0]\n        self.user_config[\"config\"][\"mapState\"][\"latitude\"] = cen_loc[1]\n    self.user_config[\"config\"][\"mapState\"][\"zoom\"] = int(zoom)\n    self.user_config[\"config\"][\"mapStyle\"][\"styleType\"] = map_style\n    if show_roads:\n        self.user_config[\"config\"][\"mapStyle\"][\"visibleLayerGroups\"]['road'] = True\n    self.data_dict = dict()\n    self.geo_count = 1\n    self.point_count = 1\n    self.trip_count = 1\n</code></pre> <p> </p> <p>\u6dfb\u52a0\u70b9\u5c42 \u53ef\u4e3a\u5e95\u56fe\u52a0\u4e0a\u4e00\u4e2a\u70b9\u5c42</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>\u70b9\u5c42\u56fe\u5c42\u6570\u636e</p> required <code>lng_field</code> <code>str</code> <p>\u7ecf\u5ea6\u5b57\u6bb5</p> <code>'lng'</code> <code>lat_field</code> <code>str</code> <p>\u7eac\u5ea6\u5b57\u6bb5</p> <code>'lat'</code> <code>altitude_field</code> <code>str</code> <p>\u9ad8\u5ea6\u5b57\u6bb5</p> <code>None</code> <code>layer_id</code> <code>str</code> <p>\u56fe\u5c42ID</p> <code>None</code> <code>color</code> <code>list or str</code> <p>\u70b9\u989c\u8272, RGB\u6570\u503c, \u5982[125, 241, 33]</p> <code>None</code> <code>radius</code> <code>float</code> <p>\u70b9\u7684\u534a\u5f84\u5927\u5c0f</p> <code>3</code> <code>set_avg_zoom</code> <code>bool</code> <p>\u662f\u5426\u81ea\u52a8\u5b9a\u4f4d\u4e2d\u5fc3\u70b9</p> <code>True</code> <code>time_field</code> <code>str</code> <p>\u65f6\u95f4\u5217\u5b57\u6bb5\u540d\u79f0</p> <code>None</code> <code>time_format</code> <code>str</code> <p>\u65f6\u95f4\u5217\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6a21\u677f</p> <code>'%Y-%m-%d %H:%M:%S'</code> <code>time_unit</code> <code>str</code> <p>\u65f6\u95f4\u5217\u7684\u65f6\u95f4\u5355\u4f4d</p> <code>'s'</code> <code>speed</code> <code>float</code> <p>\u52a8\u753b\u64ad\u653e\u901f\u5ea6</p> <code>0.3</code> <code>tooltip_fields</code> <code>list[str]</code> <p>\u53c2\u6570\u672a\u542f\u7528</p> <code>None</code> <code>color_field</code> <code>str</code> <p>\u53c2\u6570\u672a\u542f\u7528</p> <code>None</code> <code>color_list</code> <code>list</code> <p>\u53c2\u6570\u672a\u542f\u7528</p> <code>None</code> <p>Returns:</p> Source code in <code>src/gotrackit/visualization.py</code> <pre><code>def add_point_layer(self, data: pd.DataFrame, lng_field: str = 'lng', lat_field: str = 'lat',\n                    altitude_field: str = None, layer_id: str = None, color: list or str = None, radius: float = 3,\n                    set_avg_zoom: bool = True, time_field: str = None, time_format: str = '%Y-%m-%d %H:%M:%S',\n                    time_unit: str = 's', speed: float = 0.3, tooltip_fields: list[str] = None,\n                    color_field: str = None, color_list: list = None) -&gt; None:\n    \"\"\"\u6dfb\u52a0\u70b9\u5c42\n    \u53ef\u4e3a\u5e95\u56fe\u52a0\u4e0a\u4e00\u4e2a\u70b9\u5c42\n\n    Args:\n        data: \u70b9\u5c42\u56fe\u5c42\u6570\u636e\n        lng_field: \u7ecf\u5ea6\u5b57\u6bb5\n        lat_field: \u7eac\u5ea6\u5b57\u6bb5\n        altitude_field: \u9ad8\u5ea6\u5b57\u6bb5\n        layer_id: \u56fe\u5c42ID\n        color: \u70b9\u989c\u8272, RGB\u6570\u503c, \u5982[125, 241, 33]\n        radius: \u70b9\u7684\u534a\u5f84\u5927\u5c0f\n        set_avg_zoom: \u662f\u5426\u81ea\u52a8\u5b9a\u4f4d\u4e2d\u5fc3\u70b9\n        time_field: \u65f6\u95f4\u5217\u5b57\u6bb5\u540d\u79f0\n        time_format: \u65f6\u95f4\u5217\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6a21\u677f\n        time_unit: \u65f6\u95f4\u5217\u7684\u65f6\u95f4\u5355\u4f4d\n        speed: \u52a8\u753b\u64ad\u653e\u901f\u5ea6\n        tooltip_fields: \u53c2\u6570\u672a\u542f\u7528\n        color_field: \u53c2\u6570\u672a\u542f\u7528\n        color_list: \u53c2\u6570\u672a\u542f\u7528\n\n    Returns:\n    \"\"\"\n    layer_config = self.get_base_layer()\n    layer_id = layer_id if layer_id is not None else rf'point-{self.point_count}'\n    layer_config['id'] = layer_id\n    layer_config[\"type\"] = 'point'\n    layer_config['config']['dataId'] = layer_id\n    layer_config['config']['label'] = layer_id\n    layer_config[\"config\"][\"columns\"] = {\"lat\": lat_field, \"lng\": lng_field}\n    if altitude_field is not None:\n        layer_config[\"config\"][\"columns\"][\"altitude\"] = altitude_field\n    layer_config['config']['color'] = self.get_rgb_by_name(color, default_rgb=[65, 72, 88])\n    layer_config[\"config\"][\"visConfig\"][\"radius\"] = radius\n    if color_field is not None:\n        layer_config['visualChannels']['colorField'] = {'name': color_field,\n                                                        'type': 'string'}\n        layer_config['config']['visConfig']['colorRange'] = {'name': 'Custom Palette', 'type': 'custom',\n                                                             'category': 'Custom', 'colors': color_list,\n                                                             'reversed': False}\n\n    self.user_config[\"config\"][\"visState\"][\"layers\"].append(layer_config)\n\n    if time_field is not None and time_field in data.columns:\n        self.user_config['config']['visState']['filters'].append(\n            self.__format_time_filter(data=data, time_field=time_field,\n                                      time_format=time_format, time_unit=time_unit,\n                                      layer_id=layer_id, speed=speed))\n    if set_avg_zoom:\n        cen_x, cen_y = get_avg_loc(df=data, x_field=lng_field, y_field=lat_field)\n        self.user_config[\"config\"][\"mapState\"][\"longitude\"] = cen_x\n        self.user_config[\"config\"][\"mapState\"][\"latitude\"] = cen_y\n    self.data_dict[layer_id] = data\n    if tooltip_fields is not None:\n        self.user_config[\"config\"][\"visState\"][\"interactionConfig\"][\"tooltip\"][\"fieldsToShow\"][\n            layer_id] = self.tooltip_config(field_list=tooltip_fields)\n    self.point_count += 1\n</code></pre> <p> </p> <p>\u6dfb\u52a0\u51e0\u4f55\u56fe\u5c42 \u53ef\u4e3a\u5e95\u56fe\u52a0\u4e0a\u4e00\u4e2a\u51e0\u4f55\u56fe\u5c42(\u5373\u542b\u6709geometry\u51e0\u4f55\u5217)</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>GeoDataFrame</code> <p>\u51e0\u4f55\u56fe\u5c42\u6570\u636e</p> required <code>layer_id</code> <code>str</code> <p>\u56fe\u5c42ID</p> <code>None</code> <code>color</code> <code>list or str</code> <p>\u586b\u5145\u989c\u8272(RGB\u8272\u503c), \u9ed8\u8ba4[65, 72, 88]</p> <code>None</code> <code>stroke_color</code> <code>list or str</code> <p>\u8fb9\u7f18\u586b\u5145\u989c\u8272(RGB\u8272\u503c), \u9ed8\u8ba4[65, 72, 88]</p> <code>None</code> <code>width</code> <code>float</code> <p>\u662f\u5426\u81ea\u52a8\u5b9a\u4f4d\u4e2d\u5fc3\u70b9</p> <code>0.3</code> <code>time_field</code> <code>str</code> <p>\u65f6\u95f4\u5217\u5b57\u6bb5\u540d\u79f0</p> <code>None</code> <code>time_format</code> <code>str</code> <p>\u65f6\u95f4\u5217\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6a21\u677f</p> <code>'%Y-%m-%d %H:%M:%S'</code> <code>time_unit</code> <code>str</code> <p>\u65f6\u95f4\u5217\u7684\u65f6\u95f4\u5355\u4f4d</p> <code>'s'</code> <code>speed</code> <code>float</code> <p>\u52a8\u753b\u64ad\u653e\u901f\u5ea6</p> <code>0.3</code> <code>set_avg_zoom</code> <code>bool</code> <p>\u662f\u5426\u81ea\u52a8\u5b9a\u4f4d\u4e2d\u5fc3\u70b9</p> <code>True</code> <code>tooltip_fields</code> <code>list[str]</code> <p>\u53c2\u6570\u672a\u542f\u7528</p> <code>None</code> <code>color_field</code> <code>str</code> <p>\u53c2\u6570\u672a\u542f\u7528</p> <code>None</code> <code>color_list</code> <code>list</code> <p>\u53c2\u6570\u672a\u542f\u7528</p> <code>None</code> <p>Returns:</p> Source code in <code>src/gotrackit/visualization.py</code> <pre><code>def add_geo_layer(self, data: gpd.GeoDataFrame, layer_id: str = None, color: list or str = None,\n                  stroke_color: list or str = None,\n                  width: float = 0.3, time_field: str = None,\n                  time_format: str = '%Y-%m-%d %H:%M:%S', time_unit: str = 's',\n                  speed: float = 0.3, set_avg_zoom: bool = True, tooltip_fields: list[str] = None,\n                  color_field: str = None, color_list: list = None):\n    \"\"\"\u6dfb\u52a0\u51e0\u4f55\u56fe\u5c42\n    \u53ef\u4e3a\u5e95\u56fe\u52a0\u4e0a\u4e00\u4e2a\u51e0\u4f55\u56fe\u5c42(\u5373\u542b\u6709geometry\u51e0\u4f55\u5217)\n\n    Args:\n        data: \u51e0\u4f55\u56fe\u5c42\u6570\u636e\n        layer_id: \u56fe\u5c42ID\n        color: \u586b\u5145\u989c\u8272(RGB\u8272\u503c), \u9ed8\u8ba4[65, 72, 88]\n        stroke_color: \u8fb9\u7f18\u586b\u5145\u989c\u8272(RGB\u8272\u503c), \u9ed8\u8ba4[65, 72, 88]\n        width: \u662f\u5426\u81ea\u52a8\u5b9a\u4f4d\u4e2d\u5fc3\u70b9\n        time_field: \u65f6\u95f4\u5217\u5b57\u6bb5\u540d\u79f0\n        time_format: \u65f6\u95f4\u5217\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6a21\u677f\n        time_unit: \u65f6\u95f4\u5217\u7684\u65f6\u95f4\u5355\u4f4d\n        speed: \u52a8\u753b\u64ad\u653e\u901f\u5ea6\n        set_avg_zoom: \u662f\u5426\u81ea\u52a8\u5b9a\u4f4d\u4e2d\u5fc3\u70b9\n        tooltip_fields: \u53c2\u6570\u672a\u542f\u7528\n        color_field: \u53c2\u6570\u672a\u542f\u7528\n        color_list: \u53c2\u6570\u672a\u542f\u7528\n\n    Returns:\n    \"\"\"\n    layer_config = self.get_base_layer()\n    layer_id = layer_id if layer_id is not None else rf'geo-{self.geo_count}'\n    layer_config['id'] = layer_id\n    layer_config['type'] = 'geojson'\n    layer_config['config']['dataId'] = layer_id\n    layer_config['config']['label'] = layer_id\n    layer_config[\"config\"][\"columns\"] = {\"geojson\": 'geometry'}\n    layer_config['config']['color'] = self.get_rgb_by_name(color, default_rgb=[100, 100, 100])\n    layer_config['config'][\"visConfig\"]['strokeColor'] = self.get_rgb_by_name(color, default_rgb=[100, 100, 100])\n    layer_config['config'][\"visConfig\"]['strokeColor'] = stroke_color\n    layer_config['config'][\"visConfig\"]['thickness'] = width\n    if color_field is not None:\n        layer_config['visualChannels']['colorField'] = {'name': color_field,\n                                                        'type': 'string'}\n        layer_config['config']['visConfig']['colorRange'] = {'name': 'Custom Palette', 'type': 'custom',\n                                                             'category': 'Custom', 'colors': color_list,\n                                                             'reversed': False}\n\n    self.user_config[\"config\"][\"visState\"][\"layers\"].append(layer_config)\n    if time_field is not None and time_field in data.columns:\n        self.user_config['config']['visState']['filters'].append(\n            self.__format_time_filter(data=data, time_field=time_field,\n                                      time_format=time_format, time_unit=time_unit,\n                                      layer_id=layer_id, speed=speed))\n    if set_avg_zoom:\n        geo = data['geometry'].iloc[int(len(data) / 2)]\n        _ = geo.buffer(0.0001).centroid\n        self.user_config[\"config\"][\"mapState\"][\"longitude\"] = _.x\n        self.user_config[\"config\"][\"mapState\"][\"latitude\"] = _.y\n    self.data_dict[layer_id] = data\n    if tooltip_fields is not None:\n        self.user_config[\"config\"][\"visState\"][\"interactionConfig\"][\"tooltip\"][\"fieldsToShow\"][\n            layer_id] = self.tooltip_config(field_list=tooltip_fields)\n    self.geo_count += 1\n</code></pre> <p> </p> <p>\u6dfb\u52a0\u8def\u5f84\u52a8\u753b\u56fe\u5c42 \u53ef\u4e3a\u5e95\u56fe\u52a0\u4e0a\u4e00\u4e2a\u8def\u5f84\u52a8\u753b\u56fe\u5c42(\u5e26\u65f6\u95f4\u5b57\u6bb5\u7684\u8f68\u8ff9\u6570\u636e)</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>\u8f68\u8ff9\u6570\u636e</p> required <code>lng_field</code> <code>str</code> <p>\u7ecf\u5ea6\u5b57\u6bb5</p> <code>'lng'</code> <code>lat_field</code> <code>str</code> <p>\u7eac\u5ea6\u5b57\u6bb5</p> <code>'lat'</code> <code>altitude_field</code> <code>str</code> <p>\u9ad8\u5ea6\u5b57\u6bb5</p> <code>None</code> <code>time_format</code> <code>str</code> <p>\u65f6\u95f4\u5217\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6a21\u677f</p> <code>'%Y-%m-%d %H:%M:%S'</code> <code>time_unit</code> <code>str</code> <p>\u65f6\u95f4\u5217\u7684\u65f6\u95f4\u5355\u4f4d</p> <code>'s'</code> <code>layer_id</code> <code>str</code> <p>\u56fe\u5c42ID</p> <code>None</code> <code>set_avg_zoom</code> <code>bool</code> <p>\u662f\u5426\u81ea\u52a8\u5b9a\u4f4d\u4e2d\u5fc3\u70b9</p> <code>True</code> <code>thickness</code> <code>float</code> <p>\u8f68\u8ff9\u7684\u663e\u793a\u5bbd\u5ea6</p> <code>2.0</code> <code>trail_length</code> <code>float</code> <p>\u8def\u5f84\u62d6\u5c3e\u957f\u5ea6</p> <code>120.0</code> <code>opacity</code> <code>float</code> <p>\u8f68\u8ff9\u7684\u900f\u660e\u5ea6</p> <code>0.8</code> <code>color</code> <code>list or str</code> <p>\u8f68\u8ff9\u7684\u989c\u8272(RGB\u8272\u503c), \u9ed8\u8ba4[241, 225, 37]</p> <code>None</code> <code>tooltip_fields</code> <code>list[str]</code> <p>\u53c2\u6570\u672a\u542f\u7528</p> <code>None</code> <p>Returns:</p> Source code in <code>src/gotrackit/visualization.py</code> <pre><code>def add_trip_layer(self, data: pd.DataFrame, lng_field: str = 'lng', lat_field: str = 'lat',\n                   altitude_field: str = None,\n                   time_format: str = '%Y-%m-%d %H:%M:%S', time_unit: str = 's', layer_id: str = None,\n                   thickness: float = 2.0, set_avg_zoom: bool = True,\n                   opacity: float = 0.8, color: list or str = None,\n                   trail_length: float = 120.0, tooltip_fields: list[str] = None):\n    \"\"\"\u6dfb\u52a0\u8def\u5f84\u52a8\u753b\u56fe\u5c42\n    \u53ef\u4e3a\u5e95\u56fe\u52a0\u4e0a\u4e00\u4e2a\u8def\u5f84\u52a8\u753b\u56fe\u5c42(\u5e26\u65f6\u95f4\u5b57\u6bb5\u7684\u8f68\u8ff9\u6570\u636e)\n\n    Args:\n        data: \u8f68\u8ff9\u6570\u636e\n        lng_field: \u7ecf\u5ea6\u5b57\u6bb5\n        lat_field: \u7eac\u5ea6\u5b57\u6bb5\n        altitude_field: \u9ad8\u5ea6\u5b57\u6bb5\n        time_format: \u65f6\u95f4\u5217\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6a21\u677f\n        time_unit: \u65f6\u95f4\u5217\u7684\u65f6\u95f4\u5355\u4f4d\n        layer_id: \u56fe\u5c42ID\n        set_avg_zoom: \u662f\u5426\u81ea\u52a8\u5b9a\u4f4d\u4e2d\u5fc3\u70b9\n        thickness: \u8f68\u8ff9\u7684\u663e\u793a\u5bbd\u5ea6\n        trail_length: \u8def\u5f84\u62d6\u5c3e\u957f\u5ea6\n        opacity: \u8f68\u8ff9\u7684\u900f\u660e\u5ea6\n        color: \u8f68\u8ff9\u7684\u989c\u8272(RGB\u8272\u503c), \u9ed8\u8ba4[241, 225, 37]\n        tooltip_fields: \u53c2\u6570\u672a\u542f\u7528\n\n    Returns:\n    \"\"\"\n    layer_config = self.get_base_layer()\n    trip_data = generate_trip_layer(match_res_df=data, time_format=time_format, time_unit=time_unit,\n                                    lng_field=lng_field, lat_field=lat_field, altitude_field=altitude_field)\n    if set_avg_zoom:\n        cen_x, cen_y = get_avg_loc(df=data, x_field=lng_field, y_field=lat_field)\n        self.user_config[\"config\"][\"mapState\"][\"longitude\"] = cen_x\n        self.user_config[\"config\"][\"mapState\"][\"latitude\"] = cen_y\n    del data\n    layer_id = layer_id if layer_id is not None else rf'trip-{self.trip_count}'\n    layer_config['id'] = layer_id\n    layer_config['type'] = 'trip'\n    layer_config['config']['dataId'] = layer_id\n    layer_config['config']['label'] = layer_id\n    layer_config['config']['color'] = self.get_rgb_by_name(color, default_rgb=[241, 225, 37])\n    layer_config[\"config\"][\"columns\"] = {\"geojson\": '_geojson'}\n    layer_config['config'][\"visConfig\"]['thickness'] = thickness\n    layer_config['config'][\"visConfig\"]['opacity'] = opacity\n    layer_config['config'][\"visConfig\"]['trailLength'] = int(trail_length)\n    self.user_config[\"config\"][\"visState\"][\"layers\"].append(layer_config)\n    self.data_dict[layer_id] = trip_data\n\n    if tooltip_fields is not None:\n        self.user_config[\"config\"][\"visState\"][\"interactionConfig\"][\"tooltip\"][\"fieldsToShow\"][\n            layer_id] = self.tooltip_config(field_list=tooltip_fields)\n    self.trip_count += 1\n</code></pre> <p> </p> <p>HTML\u8f93\u51fa \u5c06\u53ef\u89c6\u5316HTML\u5b58\u50a8\u5230\u78c1\u76d8\u4e14\u8fd4\u56deMap\u5bf9\u8c61</p> <p>Parameters:</p> Name Type Description Default <code>height</code> <code>float</code> <p>\u5730\u56fe\u5bf9\u8c61\u7684\u9ad8\u5ea6</p> <code>600</code> <code>out_fldr</code> <code>str</code> <p>\u5b58\u50a8HTML\u7684\u76ee\u5f55</p> <code>None</code> <code>file_name</code> <code>str</code> <p>HTML\u6587\u4ef6\u7684\u540d\u79f0</p> <code>'map'</code> <p>Returns:</p> Type Description <p>Kepler Map</p> Source code in <code>src/gotrackit/visualization.py</code> <pre><code>def export_html(self, height: float = 600, out_fldr: str = None, file_name: str = 'map'):\n    \"\"\"HTML\u8f93\u51fa\n    \u5c06\u53ef\u89c6\u5316HTML\u5b58\u50a8\u5230\u78c1\u76d8\u4e14\u8fd4\u56deMap\u5bf9\u8c61\n\n    Args:\n        height: \u5730\u56fe\u5bf9\u8c61\u7684\u9ad8\u5ea6\n        out_fldr: \u5b58\u50a8HTML\u7684\u76ee\u5f55\n        file_name: HTML\u6587\u4ef6\u7684\u540d\u79f0\n\n    Returns:\n        Kepler Map\n    \"\"\"\n    try:\n        user_map = KeplerGl(height=height, data=self.data_dict)  # data\u4ee5\u56fe\u5c42\u540d\u4e3a\u952e\uff0c\u5bf9\u5e94\u7684\u77e2\u91cf\u6570\u636e\u4e3a\u503c\n    except:\n        user_map = KeplerGl(height=height)  # data\u4ee5\u56fe\u5c42\u540d\u4e3a\u952e\uff0c\u5bf9\u5e94\u7684\u77e2\u91cf\u6570\u636e\u4e3a\u503c\n        for key in self.data_dict.keys():\n            user_map.add_data(self.data_dict[key], name=key)\n    user_map.config = self.user_config\n    if out_fldr is not None:\n        user_map.save_to_html(file_name=os.path.join(out_fldr, file_name + '.html'))  # \u5bfc\u51fa\u5230\u672c\u5730\u53ef\u7f16\u8f91html\u6587\u4ef6\n    return user_map\n</code></pre>"},{"location":"Func%26API/LngLatTransfer/","title":"LngLatTransfer","text":"Source code in <code>src/gotrackit/tools/coord_trans.py</code> <pre><code>def __init__(self):\n    self.x_pi = 3.14159265358979324 * 3000.0 / 180.0\n    self.pi = math.pi\n    self.a = 6378245.0  # \u957f\u534a\u8f74\n    self.es = 0.00669342162296594323  # \u504f\u5fc3\u7387\u5e73\u65b9\n</code></pre> <p>\u5730\u7406\u5750\u6807\u5750\u6807\u8f6c\u6362 \u652f\u6301\u767e\u5ea6\u3001WGS-84\u3001GCJ-02(\u9ad8\u5fb7\u3001\u706b\u661f)\u5750\u6807\u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362</p> <p>Parameters:</p> Name Type Description Default <code>lng</code> <code>float or ndarray</code> <p>\u7ecf\u5ea6</p> required <code>lat</code> <code>float or ndarray</code> <p>\u7eac\u5ea6</p> required <code>con_type</code> <code>str</code> <p>\u8f6c\u6362\u7c7b\u578b, gc-bd\u6216\u8005gc-84\u6216\u800584-gc\u6216\u800584-bd\u6216\u8005bd-84\u6216\u8005bd-gc</p> <code>'gc-bd'</code> <p>Returns:</p> Type Description <code>tuple[float, float]</code> <p>\u8f6c\u6362\u540e\u7684\u7ecf\u5ea6, \u8f6c\u6362\u540e\u7684\u7eac\u5ea6</p> Source code in <code>src/gotrackit/tools/coord_trans.py</code> <pre><code>def loc_convert(self, lng: float or np.ndarray, lat: float or np.ndarray,\n                con_type: str = 'gc-bd') -&gt; tuple[float, float]:\n    \"\"\"\u5730\u7406\u5750\u6807\u5750\u6807\u8f6c\u6362\n    \u652f\u6301\u767e\u5ea6\u3001WGS-84\u3001GCJ-02(\u9ad8\u5fb7\u3001\u706b\u661f)\u5750\u6807\u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362\n\n    Args:\n        lng: \u7ecf\u5ea6\n        lat: \u7eac\u5ea6\n        con_type: \u8f6c\u6362\u7c7b\u578b, gc-bd\u6216\u8005gc-84\u6216\u800584-gc\u6216\u800584-bd\u6216\u8005bd-84\u6216\u8005bd-gc\n\n    Returns:\n        \u8f6c\u6362\u540e\u7684\u7ecf\u5ea6, \u8f6c\u6362\u540e\u7684\u7eac\u5ea6\n    \"\"\"\n    if con_type == 'gc-bd':\n        return self.gcj_to_bd(lng, lat)\n    elif con_type == 'gc-84':\n        return self.gcj_to_wgs84(lng, lat)\n    elif con_type == '84-bd':\n        return self.wgs84_to_bd(lng, lat)\n    elif con_type == '84-gc':\n        return self.wgs84_to_gcj(lng, lat)\n    elif con_type == 'bd-84':\n        return self.bd_to_wgs84(lng, lat)\n    elif con_type == 'bd-gc':\n        return self.bd_to_gcj(lng, lat)\n    else:\n        return lng, lat\n</code></pre> <p> </p> <p>\u51e0\u4f55\u5bf9\u8c61\u7684\u5730\u7406\u5750\u6807\u5750\u6807\u8f6c\u6362 \u652f\u6301\u51e0\u4f55\u5bf9\u8c61\u5728\u767e\u5ea6\u3001WGS-84\u3001GCJ-02(\u9ad8\u5fb7\u3001\u706b\u661f)\u5750\u6807\u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362</p> <p>Parameters:</p> Name Type Description Default <code>geo_obj</code> <code>geometry</code> <p>\u51e0\u4f55\u5bf9\u8c61(\u70b9, \u7ebf, \u9762)</p> required <code>con_type</code> <code>str</code> <p>\u8f6c\u6362\u7c7b\u578b, gc-bd\u6216\u8005gc-84\u6216\u800584-gc\u6216\u800584-bd\u6216\u8005bd-84\u6216\u8005bd-gc</p> <code>None</code> <code>ignore_z</code> <code>bool</code> <p>\u662f\u5426\u5ffd\u7565Z\u5750\u6807</p> <code>True</code> <p>Returns:</p> Type Description <code>geometry</code> <p>\u8f6c\u6362\u540e\u7684\u51e0\u4f55\u5bf9\u8c61</p> Source code in <code>src/gotrackit/tools/coord_trans.py</code> <pre><code>def obj_convert(self, geo_obj: shapely.geometry, con_type: str = None, ignore_z: bool = True) -&gt; shapely.geometry:\n    \"\"\"\u51e0\u4f55\u5bf9\u8c61\u7684\u5730\u7406\u5750\u6807\u5750\u6807\u8f6c\u6362\n    \u652f\u6301\u51e0\u4f55\u5bf9\u8c61\u5728\u767e\u5ea6\u3001WGS-84\u3001GCJ-02(\u9ad8\u5fb7\u3001\u706b\u661f)\u5750\u6807\u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362\n\n    Args:\n        geo_obj: \u51e0\u4f55\u5bf9\u8c61(\u70b9, \u7ebf, \u9762)\n        con_type: \u8f6c\u6362\u7c7b\u578b, gc-bd\u6216\u8005gc-84\u6216\u800584-gc\u6216\u800584-bd\u6216\u8005bd-84\u6216\u8005bd-gc\n        ignore_z: \u662f\u5426\u5ffd\u7565Z\u5750\u6807\n\n    Returns:\n        \u8f6c\u6362\u540e\u7684\u51e0\u4f55\u5bf9\u8c61\n    \"\"\"\n    if isinstance(geo_obj, (MultiPolygon, MultiLineString, MultiPoint)):\n        convert_obj_list = [self.obj_convert(geo, con_type=con_type) for geo in geo_obj.geoms]\n        if isinstance(geo_obj, MultiPolygon):\n            return MultiPolygon(convert_obj_list) if len(convert_obj_list) &gt; 1 else convert_obj_list[0]\n        elif isinstance(geo_obj, MultiLineString):\n            return MultiLineString(convert_obj_list) if len(convert_obj_list) &gt; 1 else convert_obj_list[0]\n        elif isinstance(geo_obj, MultiPoint):\n            return MultiPoint(convert_obj_list) if len(convert_obj_list) &gt; 1 else convert_obj_list[0]\n        else:\n            raise ValueError(r'MultiTypeGeoms only allow: MultiLineString or MultiPolygon')\n    else:\n        if isinstance(geo_obj, (LineString, LinearRing)):\n            coords_list = self.get_coords(obj=geo_obj, ignore_z=ignore_z)\n            return LineString(self.xfer_coords(coords_list=coords_list[0], con_type=con_type, ignore_z=ignore_z))\n        elif isinstance(geo_obj, Polygon):\n            coords_list = self.get_coords(obj=geo_obj, ignore_z=ignore_z)\n            if len(coords_list) &gt; 1:\n                return Polygon(self.xfer_coords(coords_list=coords_list[0], con_type=con_type, ignore_z=ignore_z),\n                               holes=[self.xfer_coords(coords_list=ring_coord, con_type=con_type, ignore_z=ignore_z)\n                                      for ring_coord in coords_list[1:]])\n            else:\n                return Polygon(self.xfer_coords(coords_list=coords_list[0], con_type=con_type, ignore_z=ignore_z))\n        elif isinstance(geo_obj, Point):\n            if ignore_z:\n                return Point(self.loc_convert(geo_obj.x, geo_obj.y, con_type))\n            else:\n                return Point(self.loc_convert(geo_obj.x, geo_obj.y, con_type) + (geo_obj.z,))\n        else:\n            raise ValueError(r'Only LineString or Polygon or Point or LineRing are allowed')\n</code></pre> <p> </p> <p>GeoDataFrame\u5730\u7406\u5750\u6807\u8f6c\u6362 \u652f\u6301GeoDataFrame\u5728\u767e\u5ea6\u3001WGS-84\u3001GCJ-02(\u9ad8\u5fb7\u3001\u706b\u661f)\u5750\u6807\u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>GeoDataFrame</code> <p>GeoDataFrame</p> required <code>con_type</code> <code>str</code> <p>\u8f6c\u6362\u7c7b\u578b, gc-bd\u6216\u8005gc-84\u6216\u800584-gc\u6216\u800584-bd\u6216\u8005bd-84\u6216\u8005bd-gc</p> <code>'gc-84'</code> <code>ignore_z</code> <code>bool</code> <p>\u662f\u5426\u5ffd\u7565Z\u5750\u6807</p> <code>True</code> <p>Returns:</p> Source code in <code>src/gotrackit/tools/coord_trans.py</code> <pre><code>def gdf_convert(self, gdf: gpd.GeoDataFrame, con_type: str = 'gc-84', ignore_z: bool = True) -&gt; gpd.GeoDataFrame:\n    \"\"\"GeoDataFrame\u5730\u7406\u5750\u6807\u8f6c\u6362\n    \u652f\u6301GeoDataFrame\u5728\u767e\u5ea6\u3001WGS-84\u3001GCJ-02(\u9ad8\u5fb7\u3001\u706b\u661f)\u5750\u6807\u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362\n\n    Args:\n        gdf: GeoDataFrame\n        con_type: \u8f6c\u6362\u7c7b\u578b, gc-bd\u6216\u8005gc-84\u6216\u800584-gc\u6216\u800584-bd\u6216\u8005bd-84\u6216\u8005bd-gc\n        ignore_z: \u662f\u5426\u5ffd\u7565Z\u5750\u6807\n\n    Returns:\n\n    \"\"\"\n    if gdf is None or gdf.empty:\n        return gpd.GeoDataFrame()\n    else:\n        gdf = gdf.explode(ignore_index=True)\n        g = gdf.at[0, geometry_field]\n        if isinstance(g, Point):\n            nx, ny = self.loc_convert(lng=gdf[geometry_field].x, lat=gdf[geometry_field].y,\n                                      con_type=con_type)\n            if ignore_z:\n                gdf[geometry_field] = gpd.points_from_xy(nx, ny, crs=gdf.crs)\n            else:\n                try:\n                    z = gdf[geometry_field].z\n                except Exception as e:\n                    z = 0\n                gdf[geometry_field] = gpd.points_from_xy(nx, ny, z, crs=gdf.crs)\n        elif isinstance(g, (LineString, LinearRing, Polygon)):\n            gdf[geometry_field] = gdf[geometry_field].apply(\n                lambda l: self.obj_convert(geo_obj=l, con_type=con_type, ignore_z=ignore_z))\n        else:\n            raise ValueError('Unknown Geo-Type')\n        return gdf\n</code></pre> <p> </p> <p>\u6587\u4ef6-\u5730\u7406\u5750\u6807\u8f6c\u6362 \u652f\u6301\u5730\u7406\u6587\u4ef6\u5728\u767e\u5ea6\u3001WGS-84\u3001GCJ-02(\u9ad8\u5fb7\u3001\u706b\u661f)\u5750\u6807\u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>\u6587\u4ef6\u8def\u5f84(\u80fd\u591f\u88abgeopandas\u8bfb\u53d6\u7684\u6587\u4ef6)</p> <code>None</code> <code>con_type</code> <code>str</code> <p>\u8f6c\u6362\u7c7b\u578b, gc-bd\u6216\u8005gc-84\u6216\u800584-gc\u6216\u800584-bd\u6216\u8005bd-84\u6216\u8005bd-gc</p> <code>'gc-84'</code> <code>out_fldr</code> <code>str</code> <p>\u8f93\u51fa\u8def\u5f84</p> <code>'./'</code> <code>out_file_name</code> <code>str</code> <p>\u8f6c\u6362\u7ed3\u675f\u540e\u8f93\u51fa\u6587\u4ef6\u7684\u540d\u79f0</p> <code>'transfer'</code> <code>file_type</code> <code>str</code> <p>\u8f93\u51fa\u6587\u4ef6\u7684\u5b58\u50a8\u7c7b\u578b, \u652f\u6301shp\u6216\u8005geojson</p> <code>'shp'</code> <code>ignore_z</code> <code>bool</code> <p>\u662f\u5426\u5ffd\u7565Z\u5750\u6807</p> <code>True</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>src/gotrackit/tools/coord_trans.py</code> <pre><code>def file_convert(self, file_path: str = None, con_type: str = 'gc-84',\n                 out_fldr: str = r'./', out_file_name: str = 'transfer', file_type: str = 'shp',\n                 ignore_z: bool = True):\n    \"\"\"\u6587\u4ef6-\u5730\u7406\u5750\u6807\u8f6c\u6362\n    \u652f\u6301\u5730\u7406\u6587\u4ef6\u5728\u767e\u5ea6\u3001WGS-84\u3001GCJ-02(\u9ad8\u5fb7\u3001\u706b\u661f)\u5750\u6807\u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362\n\n    Args:\n        file_path: \u6587\u4ef6\u8def\u5f84(\u80fd\u591f\u88abgeopandas\u8bfb\u53d6\u7684\u6587\u4ef6)\n        con_type: \u8f6c\u6362\u7c7b\u578b, gc-bd\u6216\u8005gc-84\u6216\u800584-gc\u6216\u800584-bd\u6216\u8005bd-84\u6216\u8005bd-gc\n        out_fldr: \u8f93\u51fa\u8def\u5f84\n        out_file_name: \u8f6c\u6362\u7ed3\u675f\u540e\u8f93\u51fa\u6587\u4ef6\u7684\u540d\u79f0\n        file_type: \u8f93\u51fa\u6587\u4ef6\u7684\u5b58\u50a8\u7c7b\u578b, \u652f\u6301shp\u6216\u8005geojson\n        ignore_z: \u662f\u5426\u5ffd\u7565Z\u5750\u6807\n\n    Returns:\n        None\n    \"\"\"\n\n    gdf = gpd.read_file(file_path)\n    gdf = self.gdf_convert(gdf=gdf, con_type=con_type, ignore_z=ignore_z)\n    if file_type == 'shp':\n        gdf.to_file(os.path.join(out_fldr, out_file_name + '.shp'))\n    else:\n        gdf.to_file(os.path.join(out_fldr, out_file_name + '.geojson'), driver='GeoJSON')\n</code></pre>"},{"location":"Func%26API/MapMatch/","title":"MapMatch","text":"<p>\u5730\u56fe(\u8def\u5f84)\u5339\u914d\u7c7b</p> <p>\u8f68\u8ff9\u6570\u636e\u5339\u914d\u7c7b, \u63d0\u4f9b\u4e86\u5355\u6838\u5339\u914d\u3001\u591a\u6838\u5339\u914d\u3001\u9884\u8ba1\u7b97\u5339\u914d\u7b49\u65b9\u6cd5</p> <p>Parameters:</p> Name Type Description Default <code>net</code> <code>Net</code> <p>\u8def\u7f51Net\u5bf9\u8c61</p> required <code>flag_name</code> <code>str</code> <p>\u6807\u8bb0\u5b57\u7b26\u540d\u79f0, \u4f1a\u7528\u4e8e\u6807\u8bb0\u8f93\u51fa\u7684\u53ef\u89c6\u5316\u6587\u4ef6</p> <code>'test'</code> <code>use_sub_net</code> <code>bool</code> <p>\u662f\u5426\u5728\u5b50\u7f51\u7edc\u4e0a\u8fdb\u884c\u8ba1\u7b97</p> <code>True</code> <code>dup_threshold</code> <code>float</code> <p>\u91cd\u590d\u70b9\u68c0\u6d4b\u9608\u503c, \u5229\u7528GPS\u8f68\u8ff9\u8ba1\u7b97sub_net\u65f6\u5148\u5bf9GPS\u70b9\u539f\u59cb\u8f68\u8ff9\u505a\u7b80\u5316</p> <code>10.0</code> <code>time_format</code> <code>str</code> <p>[1]\u65f6\u95f4\u5217\u6784\u5efa\u53c2\u6570 - GPS\u6570\u636e\u4e2d\u65f6\u95f4\u5217\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6a21\u677f</p> <code>'%Y-%m-%d %H:%M:%S'</code> <code>time_unit</code> <code>str</code> <p>[1]\u65f6\u95f4\u5217\u6784\u5efa\u53c2\u6570 - \u65f6\u95f4\u5355\u4f4d, gotrackit\u4f1a\u5148\u5c1d\u8bd5\u4f7f\u7528time_format\u8fdb\u884c\u65f6\u95f4\u5217\u6784\u5efa, \u5982\u679c\u5931\u8d25\u4f1a\u518d\u6b21\u5c1d\u8bd5\u4f7f\u7528time_unit\u8fdb\u884c\u65f6\u95f4\u5217\u6784\u5efa</p> <code>'s'</code> <code>gps_buffer</code> <code>float</code> <p>[2]\u5019\u9009\u89c4\u5219\u53c2\u6570 - GPS\u7684\u641c\u7d22\u534a\u5f84, \u5355\u4f4d\u7c73, \u610f\u4e3a\u53ea\u9009\u53d6\u6bcf\u4e2agps\u70b9\u9644\u8fd1gps_buffer\u7c73\u8303\u56f4\u5185\u7684\u8def\u6bb5\u4f5c\u4e3a\u521d\u6b65\u5019\u9009\u8def\u6bb5</p> <code>200.0</code> <code>gps_route_buffer_gap</code> <code>float</code> <p>[2]\u5019\u9009\u89c4\u5219\u53c2\u6570 - \u534a\u5f84\u589e\u91cf, gps_buffer + gps_route_buffer_gap \u7684\u534a\u5f84\u8303\u56f4\u7528\u4e8e\u8ba1\u7b97\u5b50\u7f51\u7edc</p> <code>15.0</code> <code>top_k</code> <code>int</code> <p>[2]\u5019\u9009\u89c4\u5219\u53c2\u6570 - \u9009\u53d6\u6bcf\u4e2aGPS\u70b9buffer\u8303\u56f4\u5185\u7684\u6700\u8fd1\u7684top_k\u4e2a\u8def\u6bb5</p> <code>20</code> <code>use_node_restrict</code> <code>bool</code> <p>[2]\u5019\u9009\u89c4\u5219\u53c2\u6570 - \u662f\u5426\u5f00\u542f\u8282\u70b9\u9650\u5236\uff0c\u8be5\u53c2\u6570\u7528\u4e8e\u9650\u5b9a\u6307\u5b9aGPS\u70b9\u7684\u5019\u9009\u8def\u6bb5</p> <code>False</code> <code>beta</code> <code>float</code> <p>[3]\u6982\u7387\u53c2\u6570 - \u8be5\u503c\u8d8a\u5927, \u72b6\u6001\u8f6c\u79fb\u6982\u7387\u5bf9\u4e8e\u8ddd\u79bb\u8d8a\u4e0d\u654f\u611f</p> <code>6.0</code> <code>gps_sigma</code> <code>float</code> <p>[3]\u6982\u7387\u53c2\u6570 - \u8be5\u503c\u8d8a\u5927, \u53d1\u5c04\u6982\u7387\u5bf9\u8ddd\u79bb\u8d8a\u4e0d\u654f\u611f</p> <code>30.0</code> <code>dis_para</code> <code>float</code> <p>[3]\u6982\u7387\u53c2\u6570 - \u8ddd\u79bb\u7684\u6298\u51cf\u7cfb\u6570</p> <code>0.1</code> <code>use_heading_inf</code> <code>bool</code> <p>[4]\u6982\u7387\u4fee\u6b63\u53c2\u6570 - \u662f\u5426\u5229\u7528GPS\u7684\u5dee\u5206\u65b9\u5411\u5411\u91cf\u4fee\u6b63\u53d1\u5c04\u6982\u7387, \u9002\u7528\u4e8e: \u4f4e\u5b9a\u4f4d\u8bef\u5dee GPS\u6570\u636e \u6216\u8005\u4f4e\u9891\u5b9a\u4f4d\u6570\u636e(\u914d\u5408\u52a0\u5bc6\u53c2\u6570)</p> <code>True</code> <code>heading_para_array</code> <code>ndarray</code> <p>[4]\u6982\u7387\u4fee\u6b63\u53c2\u6570 - \u5dee\u5206\u65b9\u5411\u4fee\u6b63\u53c2\u6570\u6570\u7ec4</p> <code>None</code> <code>omitted_l</code> <code>float</code> <p>[4]\u6982\u7387\u4fee\u6b63\u53c2\u6570 - \u5f53\u67d0GPS\u70b9\u4e0e\u524d\u540eGPS\u70b9\u7684\u5e73\u5747\u8ddd\u79bb\u5c0f\u4e8eomitted_l(m)\u65f6, \u8be5GPS\u70b9\u7684\u65b9\u5411\u9650\u5236\u4f5c\u7528\u88ab\u53d6\u6d88</p> <code>6.0</code> <code>del_dwell</code> <code>bool</code> <p>[5]\u505c\u7559\u70b9\u5904\u7406 - \u662f\u5426\u8fdb\u884c\u505c\u7559\u70b9\u8bc6\u522b\u5e76\u4e14\u5220\u9664\u505c\u7559\u70b9</p> <code>False</code> <code>dwell_l_length</code> <code>float</code> <p>[5]\u505c\u7559\u70b9\u5904\u7406 - \u505c\u7559\u70b9\u8bc6\u522b\u8ddd\u79bb\u9608\u503c</p> <code>5.0</code> <code>dwell_n</code> <code>int</code> <p>[5]\u505c\u7559\u70b9\u5904\u7406 - \u8d85\u8fc7\u8fde\u7eeddwell_n\u4e2a\u76f8\u90bbGPS\u70b9\u7684\u8ddd\u79bb\u5c0f\u4e8edwell_l_length\uff0c\u90a3\u4e48\u8fd9\u4e00\u7ec4\u70b9\u5c31\u4f1a\u88ab\u8bc6\u522b\u4e3a\u505c\u7559\u70b9</p> <code>2</code> <code>is_lower_f</code> <code>bool</code> <p>[6]\u8f68\u8ff9\u964d\u9891 - \u662f\u5426\u5bf9GPS\u6570\u636e\u8fdb\u884c\u6570\u636e\u964d\u9891\u7387, \u9002\u7528\u4e8e: \u9ad8\u9891-\u9ad8\u5b9a\u4f4d\u8bef\u5dee GPS\u6570\u636e</p> <code>False</code> <code>lower_n</code> <code>int</code> <p>[6]\u8f68\u8ff9\u964d\u9891 - \u9891\u7387\u500d\u7387</p> <code>2</code> <code>is_rolling_average</code> <code>bool</code> <p>[7]\u6ed1\u52a8\u7a97\u53e3\u5e73\u6ed1 - \u662f\u5426\u542f\u7528\u6ed1\u52a8\u7a97\u53e3\u5e73\u5747\u5bf9GPS\u6570\u636e\u8fdb\u884c\u964d\u566a</p> <code>False</code> <code>window</code> <code>int</code> <p>[7]\u6ed1\u52a8\u7a97\u53e3\u5e73\u6ed1 - \u6ed1\u52a8\u7a97\u53e3\u5927\u5c0f</p> <code>2</code> <code>dense_gps</code> <code>bool</code> <p>[7]\u6ed1\u52a8\u7a97\u53e3\u5e73\u6ed1 - \u662f\u5426\u5bf9GPS\u6570\u636e\u8fdb\u884c\u52a0\u5bc6</p> <code>True</code> <code>dense_interval</code> <code>float</code> <p>[8]\u8f68\u8ff9\u589e\u5bc6 - \u5f53\u524d\u540eGPS\u70b9\u7684\u76f4\u7ebf\u8ddd\u79bbl\u8d85\u8fc7dense_interval\u5373\u8fdb\u884c\u52a0\u5bc6, \u8fdb\u884c int(l / dense_interval) + 1 \u7b49\u5206\u52a0\u5bc6</p> <code>120.0</code> <code>out_fldr</code> <code>str</code> <p>[9]\u8f93\u51fa\u8bbe\u7f6e - \u4fdd\u5b58\u5339\u914d\u7ed3\u679c\u7684\u6587\u4ef6\u76ee\u5f55</p> <code>'./'</code> <code>instant_output</code> <code>bool</code> <p>[9]\u8f93\u51fa\u8bbe\u7f6e - \u662f\u5426\u6bcf\u5339\u914d\u5b8c\u4e00\u6761\u8f68\u8ff9\u5c31\u5b58\u50a8csv\u5339\u914d\u7ed3\u679c</p> <code>False</code> <code>user_field_list</code> <code>list[str]</code> <p>[9]\u8f93\u51fa\u8bbe\u7f6e - gps\u6570\u636e\u4e2d, \u7528\u6237\u60f3\u8981\u9644\u5e26\u5728\u5339\u914d\u7ed3\u679c\u8868\u4e2d\u8f93\u51fa\u7684\u989d\u5916\u5b57\u6bb5\u5217\u8868</p> <code>None</code> <code>export_html</code> <code>bool</code> <p>[10]HTML\u8f93\u51fa\u8bbe\u7f6e - \u662f\u5426\u8f93\u51fa\u7f51\u9875\u53ef\u89c6\u5316\u7ed3\u679chtml\u6587\u4ef6</p> <code>False</code> <code>use_gps_source</code> <code>bool</code> <p>[10]HTML\u8f93\u51fa\u8bbe\u7f6e - \u662f\u5426\u5728\u53ef\u89c6\u5316\u7ed3\u679c\u4e2d\u4f7f\u7528GPS\u6e90\u6570\u636e\u8fdb\u884c\u5c55\u793a</p> <code>False</code> <code>gps_radius</code> <code>float</code> <p>[10]HTML\u8f93\u51fa\u8bbe\u7f6e - HTML\u53ef\u89c6\u5316\u4e2dGPS\u70b9\u7684\u534a\u5f84\u5927\u5c0f\uff0c\u5355\u4f4d\u7c73</p> <code>6.0</code> <code>export_all_agents</code> <code>bool</code> <p>[10]HTML\u8f93\u51fa\u8bbe\u7f6e - \u662f\u5426\u5c06\u6240\u6709agent\u7684\u53ef\u89c6\u5316\u5b58\u50a8\u4e8e\u4e00\u4e2ahtml\u6587\u4ef6\u4e2d</p> <code>False</code> <code>visualization_cache_times</code> <code>int</code> <p>[10]HTML\u8f93\u51fa\u8bbe\u7f6e - \u6bcf\u5339\u914d\u5b8cvisualization_cache_times\u8f86\u8f66\u518d\u8fdb\u884c(html or geojson\u6587\u4ef6)\u7ed3\u679c\u7684\u7edf\u4e00\u5b58\u50a8</p> <code>10</code> <code>export_geo_res</code> <code>bool</code> <p>[11]GeoJSON\u8f93\u51fa\u8bbe\u7f6e - \u662f\u5426\u8f93\u51fa\u5339\u914d\u7ed3\u679c\u7684\u51e0\u4f55\u53ef\u89c6\u5316\u6587\u4ef6</p> <code>False</code> <code>heading_vec_len</code> <code>float</code> <p>[11]GeoJSON\u8f93\u51fa\u8bbe\u7f6e - \u5339\u914d\u822a\u5411\u5411\u91cf\u7684\u957f\u5ea6(\u63a7\u5236geojson\u6587\u4ef6\u4e2d\u7684\u53ef\u89c6\u5316)</p> <code>15.0</code> <code>use_para_grid</code> <code>bool</code> <p>[12]\u7f51\u683c\u53c2\u6570\u641c\u7d22\u8bbe\u7f6e - \u662f\u5426\u542f\u7528\u7f51\u683c\u53c2\u6570\u641c\u7d22</p> <code>False</code> <code>para_grid</code> <code>ParaGrid</code> <p>[12]\u7f51\u683c\u53c2\u6570\u641c\u7d22\u8bbe\u7f6e - \u7f51\u683c\u53c2\u6570\u5bf9\u8c61</p> <code>None</code> Source code in <code>src/gotrackit/MapMatch.py</code> <pre><code>def __init__(self, net: Net, flag_name: str = 'test', use_sub_net: bool = True, dup_threshold: float = 10.0,\n             time_format: str = \"%Y-%m-%d %H:%M:%S\", time_unit: str = 's', gps_buffer: float = 200.0,\n             gps_route_buffer_gap: float = 15.0, top_k: int = 20, use_node_restrict: bool = False,\n             beta: float = 6.0, gps_sigma: float = 30.0, dis_para: float = 0.1,\n             use_heading_inf: bool = True, heading_para_array: np.ndarray = None,  omitted_l: float = 6.0,\n             del_dwell: bool = False, dwell_l_length: float = 5.0, dwell_n: int = 2,\n             is_lower_f: bool = False, lower_n: int = 2,\n             is_rolling_average: bool = False, window: int = 2,\n             dense_gps: bool = True, dense_interval: float = 120.0,\n             out_fldr: str = r'./', instant_output: bool = False, user_field_list: list[str] = None,\n             export_html: bool = False, use_gps_source: bool = False,\n             gps_radius: float = 6.0, export_all_agents: bool = False, visualization_cache_times: int = 10,\n             multi_core_save: bool = False,  export_geo_res: bool = False, heading_vec_len: float = 15.0,\n             link_width: float = 1.5, node_radius: float = 1.5, match_link_width: float = 5.0,\n             use_para_grid: bool = False, para_grid: ParaGrid = None):\n    \"\"\"\u5730\u56fe(\u8def\u5f84)\u5339\u914d\u7c7b\n\n    \u8f68\u8ff9\u6570\u636e\u5339\u914d\u7c7b, \u63d0\u4f9b\u4e86\u5355\u6838\u5339\u914d\u3001\u591a\u6838\u5339\u914d\u3001\u9884\u8ba1\u7b97\u5339\u914d\u7b49\u65b9\u6cd5\n\n    Args:\n        net: \u8def\u7f51Net\u5bf9\u8c61\n        flag_name: \u6807\u8bb0\u5b57\u7b26\u540d\u79f0, \u4f1a\u7528\u4e8e\u6807\u8bb0\u8f93\u51fa\u7684\u53ef\u89c6\u5316\u6587\u4ef6\n        use_sub_net: \u662f\u5426\u5728\u5b50\u7f51\u7edc\u4e0a\u8fdb\u884c\u8ba1\u7b97\n        dup_threshold: \u91cd\u590d\u70b9\u68c0\u6d4b\u9608\u503c, \u5229\u7528GPS\u8f68\u8ff9\u8ba1\u7b97sub_net\u65f6\u5148\u5bf9GPS\u70b9\u539f\u59cb\u8f68\u8ff9\u505a\u7b80\u5316\n        time_format: [1]\u65f6\u95f4\u5217\u6784\u5efa\u53c2\u6570 - GPS\u6570\u636e\u4e2d\u65f6\u95f4\u5217\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6a21\u677f\n        time_unit: [1]\u65f6\u95f4\u5217\u6784\u5efa\u53c2\u6570 - \u65f6\u95f4\u5355\u4f4d, gotrackit\u4f1a\u5148\u5c1d\u8bd5\u4f7f\u7528time_format\u8fdb\u884c\u65f6\u95f4\u5217\u6784\u5efa, \u5982\u679c\u5931\u8d25\u4f1a\u518d\u6b21\u5c1d\u8bd5\u4f7f\u7528time_unit\u8fdb\u884c\u65f6\u95f4\u5217\u6784\u5efa\n        gps_buffer: [2]\u5019\u9009\u89c4\u5219\u53c2\u6570 - GPS\u7684\u641c\u7d22\u534a\u5f84, \u5355\u4f4d\u7c73, \u610f\u4e3a\u53ea\u9009\u53d6\u6bcf\u4e2agps\u70b9\u9644\u8fd1gps_buffer\u7c73\u8303\u56f4\u5185\u7684\u8def\u6bb5\u4f5c\u4e3a\u521d\u6b65\u5019\u9009\u8def\u6bb5\n        gps_route_buffer_gap: [2]\u5019\u9009\u89c4\u5219\u53c2\u6570 - \u534a\u5f84\u589e\u91cf, gps_buffer + gps_route_buffer_gap \u7684\u534a\u5f84\u8303\u56f4\u7528\u4e8e\u8ba1\u7b97\u5b50\u7f51\u7edc\n        top_k: [2]\u5019\u9009\u89c4\u5219\u53c2\u6570 - \u9009\u53d6\u6bcf\u4e2aGPS\u70b9buffer\u8303\u56f4\u5185\u7684\u6700\u8fd1\u7684top_k\u4e2a\u8def\u6bb5\n        use_node_restrict: [2]\u5019\u9009\u89c4\u5219\u53c2\u6570 - \u662f\u5426\u5f00\u542f\u8282\u70b9\u9650\u5236\uff0c\u8be5\u53c2\u6570\u7528\u4e8e\u9650\u5b9a\u6307\u5b9aGPS\u70b9\u7684\u5019\u9009\u8def\u6bb5\n        beta: [3]\u6982\u7387\u53c2\u6570 - \u8be5\u503c\u8d8a\u5927, \u72b6\u6001\u8f6c\u79fb\u6982\u7387\u5bf9\u4e8e\u8ddd\u79bb\u8d8a\u4e0d\u654f\u611f\n        gps_sigma: [3]\u6982\u7387\u53c2\u6570 - \u8be5\u503c\u8d8a\u5927, \u53d1\u5c04\u6982\u7387\u5bf9\u8ddd\u79bb\u8d8a\u4e0d\u654f\u611f\n        dis_para: [3]\u6982\u7387\u53c2\u6570 - \u8ddd\u79bb\u7684\u6298\u51cf\u7cfb\u6570\n        use_heading_inf: [4]\u6982\u7387\u4fee\u6b63\u53c2\u6570 - \u662f\u5426\u5229\u7528GPS\u7684\u5dee\u5206\u65b9\u5411\u5411\u91cf\u4fee\u6b63\u53d1\u5c04\u6982\u7387, \u9002\u7528\u4e8e: \u4f4e\u5b9a\u4f4d\u8bef\u5dee GPS\u6570\u636e \u6216\u8005\u4f4e\u9891\u5b9a\u4f4d\u6570\u636e(\u914d\u5408\u52a0\u5bc6\u53c2\u6570)\n        heading_para_array: [4]\u6982\u7387\u4fee\u6b63\u53c2\u6570 - \u5dee\u5206\u65b9\u5411\u4fee\u6b63\u53c2\u6570\u6570\u7ec4\n        omitted_l: [4]\u6982\u7387\u4fee\u6b63\u53c2\u6570 - \u5f53\u67d0GPS\u70b9\u4e0e\u524d\u540eGPS\u70b9\u7684\u5e73\u5747\u8ddd\u79bb\u5c0f\u4e8eomitted_l(m)\u65f6, \u8be5GPS\u70b9\u7684\u65b9\u5411\u9650\u5236\u4f5c\u7528\u88ab\u53d6\u6d88\n        del_dwell: [5]\u505c\u7559\u70b9\u5904\u7406 - \u662f\u5426\u8fdb\u884c\u505c\u7559\u70b9\u8bc6\u522b\u5e76\u4e14\u5220\u9664\u505c\u7559\u70b9\n        dwell_l_length: [5]\u505c\u7559\u70b9\u5904\u7406 - \u505c\u7559\u70b9\u8bc6\u522b\u8ddd\u79bb\u9608\u503c\n        dwell_n: [5]\u505c\u7559\u70b9\u5904\u7406 - \u8d85\u8fc7\u8fde\u7eeddwell_n\u4e2a\u76f8\u90bbGPS\u70b9\u7684\u8ddd\u79bb\u5c0f\u4e8edwell_l_length\uff0c\u90a3\u4e48\u8fd9\u4e00\u7ec4\u70b9\u5c31\u4f1a\u88ab\u8bc6\u522b\u4e3a\u505c\u7559\u70b9\n        is_lower_f: [6]\u8f68\u8ff9\u964d\u9891 - \u662f\u5426\u5bf9GPS\u6570\u636e\u8fdb\u884c\u6570\u636e\u964d\u9891\u7387, \u9002\u7528\u4e8e: \u9ad8\u9891-\u9ad8\u5b9a\u4f4d\u8bef\u5dee GPS\u6570\u636e\n        lower_n: [6]\u8f68\u8ff9\u964d\u9891 - \u9891\u7387\u500d\u7387\n        is_rolling_average: [7]\u6ed1\u52a8\u7a97\u53e3\u5e73\u6ed1 - \u662f\u5426\u542f\u7528\u6ed1\u52a8\u7a97\u53e3\u5e73\u5747\u5bf9GPS\u6570\u636e\u8fdb\u884c\u964d\u566a\n        window: [7]\u6ed1\u52a8\u7a97\u53e3\u5e73\u6ed1 - \u6ed1\u52a8\u7a97\u53e3\u5927\u5c0f\n        dense_gps: [7]\u6ed1\u52a8\u7a97\u53e3\u5e73\u6ed1 - \u662f\u5426\u5bf9GPS\u6570\u636e\u8fdb\u884c\u52a0\u5bc6\n        dense_interval: [8]\u8f68\u8ff9\u589e\u5bc6 - \u5f53\u524d\u540eGPS\u70b9\u7684\u76f4\u7ebf\u8ddd\u79bbl\u8d85\u8fc7dense_interval\u5373\u8fdb\u884c\u52a0\u5bc6, \u8fdb\u884c int(l / dense_interval) + 1 \u7b49\u5206\u52a0\u5bc6\n        out_fldr: [9]\u8f93\u51fa\u8bbe\u7f6e - \u4fdd\u5b58\u5339\u914d\u7ed3\u679c\u7684\u6587\u4ef6\u76ee\u5f55\n        instant_output: [9]\u8f93\u51fa\u8bbe\u7f6e - \u662f\u5426\u6bcf\u5339\u914d\u5b8c\u4e00\u6761\u8f68\u8ff9\u5c31\u5b58\u50a8csv\u5339\u914d\u7ed3\u679c\n        user_field_list: [9]\u8f93\u51fa\u8bbe\u7f6e - gps\u6570\u636e\u4e2d, \u7528\u6237\u60f3\u8981\u9644\u5e26\u5728\u5339\u914d\u7ed3\u679c\u8868\u4e2d\u8f93\u51fa\u7684\u989d\u5916\u5b57\u6bb5\u5217\u8868\n        export_html: [10]HTML\u8f93\u51fa\u8bbe\u7f6e - \u662f\u5426\u8f93\u51fa\u7f51\u9875\u53ef\u89c6\u5316\u7ed3\u679chtml\u6587\u4ef6\n        use_gps_source: [10]HTML\u8f93\u51fa\u8bbe\u7f6e - \u662f\u5426\u5728\u53ef\u89c6\u5316\u7ed3\u679c\u4e2d\u4f7f\u7528GPS\u6e90\u6570\u636e\u8fdb\u884c\u5c55\u793a\n        gps_radius: [10]HTML\u8f93\u51fa\u8bbe\u7f6e - HTML\u53ef\u89c6\u5316\u4e2dGPS\u70b9\u7684\u534a\u5f84\u5927\u5c0f\uff0c\u5355\u4f4d\u7c73\n        export_all_agents: [10]HTML\u8f93\u51fa\u8bbe\u7f6e - \u662f\u5426\u5c06\u6240\u6709agent\u7684\u53ef\u89c6\u5316\u5b58\u50a8\u4e8e\u4e00\u4e2ahtml\u6587\u4ef6\u4e2d\n        visualization_cache_times: [10]HTML\u8f93\u51fa\u8bbe\u7f6e - \u6bcf\u5339\u914d\u5b8cvisualization_cache_times\u8f86\u8f66\u518d\u8fdb\u884c(html or geojson\u6587\u4ef6)\u7ed3\u679c\u7684\u7edf\u4e00\u5b58\u50a8\n        export_geo_res: [11]GeoJSON\u8f93\u51fa\u8bbe\u7f6e - \u662f\u5426\u8f93\u51fa\u5339\u914d\u7ed3\u679c\u7684\u51e0\u4f55\u53ef\u89c6\u5316\u6587\u4ef6\n        heading_vec_len: [11]GeoJSON\u8f93\u51fa\u8bbe\u7f6e - \u5339\u914d\u822a\u5411\u5411\u91cf\u7684\u957f\u5ea6(\u63a7\u5236geojson\u6587\u4ef6\u4e2d\u7684\u53ef\u89c6\u5316)\n        use_para_grid: [12]\u7f51\u683c\u53c2\u6570\u641c\u7d22\u8bbe\u7f6e - \u662f\u5426\u542f\u7528\u7f51\u683c\u53c2\u6570\u641c\u7d22\n        para_grid: [12]\u7f51\u683c\u53c2\u6570\u641c\u7d22\u8bbe\u7f6e - \u7f51\u683c\u53c2\u6570\u5bf9\u8c61\n    \"\"\"\n    # \u5750\u6807\u7cfb\u6295\u5f71\n    self.plain_crs = net.planar_crs\n    self.geo_crs = net.geo_crs\n\n    # gps\u53c2\u6570\n    self.time_format = time_format  # \u65f6\u95f4\u5217\u683c\u5f0f\n    self.time_unit = time_unit  # \u65f6\u95f4\u5217\u5355\u4f4d\n    self.is_lower_f = is_lower_f  # \u662f\u5426\u964d\u9891\u7387\n    self.lower_n = lower_n  # \u964d\u9891\u500d\u6570\n    self.del_dwell = del_dwell\n    self.dwell_n = dwell_n\n    self.dwell_l_length = dwell_l_length\n    self.is_rolling_average = is_rolling_average  # \u662f\u5426\u542f\u7528\u6ed1\u52a8\u7a97\u53e3\u5e73\u5747\n    self.rolling_window = window  # \u7a97\u53e3\u5927\u5c0f\n    self.dense_gps = dense_gps  # \u662f\u5426\u52a0\u5bc6GPS\n    self.dense_interval = dense_interval  # \u52a0\u5bc6\u9608\u503c(\u524d\u540eGPS\u70b9\u76f4\u7ebf\u8ddd\u79bb\u8d85\u8fc7\u8be5\u503c\u5c31\u4f1a\u542f\u7528\u7ebf\u6027\u52a0\u5bc6)\n    self.gps_buffer = gps_buffer  # gps\u7684\u5173\u8054\u8303\u56f4(m)\n    self.use_node_restrict = use_node_restrict\n    self.use_sub_net = use_sub_net  # \u662f\u5426\u542f\u7528\u5b50\u7f51\u7edc\n    self.gps_route_buffer_gap = gps_route_buffer_gap\n    self.use_heading_inf = use_heading_inf\n    self.heading_para_array = heading_para_array\n    if not omitted_l &lt; dense_interval / 2:\n        omitted_l = dense_interval / 2 - 0.1\n    self.omitted_l = omitted_l\n    self.top_k = top_k\n    if not dup_threshold &lt; (self.gps_buffer + self.gps_route_buffer_gap) / 3:\n        dup_threshold = (self.gps_buffer + self.gps_route_buffer_gap) / 3 - 0.1\n    self.dup_threshold = dup_threshold\n\n    self.beta = beta  # \u72b6\u6001\u8f6c\u79fb\u6982\u7387\u53c2\u6570, \u6982\u7387\u4e0e\u4e4b\u6210\u6b63\u6bd4\n    self.gps_sigma = gps_sigma  # \u53d1\u5c04\u6982\u7387\u53c2\u6570, \u6982\u7387\u4e0e\u4e4b\u6210\u6b63\u6bd4\n    self.flag_name = flag_name\n    self.dis_para = dis_para\n\n    self.export_html = export_html\n    self.export_geo_res = export_geo_res\n    self.out_fldr = r'./' if out_fldr is None else out_fldr\n\n    self.my_net = net\n    self.not_conn_cost = self.my_net.not_conn_cost\n    self.use_gps_source = use_gps_source\n\n    # \u7f51\u9875\u53ef\u89c6\u5316\u53c2\u6570\n    self.link_width = link_width\n    self.node_radius = node_radius\n    self.match_link_width = match_link_width\n    self.gps_radius = gps_radius\n\n    self.export_all_agents = export_all_agents\n    self.visualization_cache_times = visualization_cache_times\n    self.multi_core_save = multi_core_save\n    self.sub_net_buffer = self.gps_buffer + self.gps_route_buffer_gap\n    self.instant_output = instant_output\n\n    self.use_para_grid = use_para_grid\n    self.para_grid = para_grid\n    self.heading_vec_len = heading_vec_len\n\n    self.user_field_list = user_field_list\n</code></pre> <p> </p> <p>\u8def\u5f84\u5339\u914d</p> <p>\u5bf9\u8f93\u5165\u7684gps\u6570\u636e\u6267\u884c\u8def\u5f84\u5339\u914d\u5e76\u4e14\u8f93\u51fa\u5339\u914d\u7ed3\u679c</p> <p>Parameters:</p> Name Type Description Default <code>gps_df</code> <code>DataFrame | GeoDataFrame</code> <p>gps\u6570\u636e\u8868\u5bf9\u8c61, \u5fc5\u9700\u53c2\u6570</p> required <p>Returns:</p> Type Description <code>tuple[DataFrame, dict, list]</code> <p>\u5339\u914d\u7ed3\u679c\u8868(pd.DataFrame), \u8b66\u544a\u4fe1\u606f(dict), \u9519\u8bef\u4fe1\u606f(list)</p> Source code in <code>src/gotrackit/MapMatch.py</code> <pre><code>def execute(self, gps_df: pd.DataFrame | gpd.GeoDataFrame) -&gt; tuple[pd.DataFrame, dict, list]:\n    \"\"\"\u8def\u5f84\u5339\u914d\n\n    \u5bf9\u8f93\u5165\u7684gps\u6570\u636e\u6267\u884c\u8def\u5f84\u5339\u914d\u5e76\u4e14\u8f93\u51fa\u5339\u914d\u7ed3\u679c\n\n    Args:\n        gps_df: gps\u6570\u636e\u8868\u5bf9\u8c61, \u5fc5\u9700\u53c2\u6570\n\n    Returns:\n        \u5339\u914d\u7ed3\u679c\u8868(pd.DataFrame), \u8b66\u544a\u4fe1\u606f(dict), \u9519\u8bef\u4fe1\u606f(list)\n\n    \"\"\"\n    # check and format\n    self.node_restrict_format(gps_df=gps_df)\n    user_field_list = GpsPointsGdf.check(gps_points_df=gps_df, user_field_list=self.user_field_list)\n\n    match_res_df = pd.DataFrame()\n    may_error_list = dict()\n    error_list = list()\n    hmm_res_list = []  # save hmm_res\n    gps_df.dropna(subset=[agent_id_field], inplace=True)\n    agent_num = len(gps_df[gps_field.AGENT_ID_FIELD].unique())\n    if agent_num == 0:\n        print('after removing the rows with empty values in the agent_id column, the gps data is empty...')\n        return match_res_df, may_error_list, error_list\n\n    # \u5bf9\u6bcf\u8f86\u8f66\u7684\u8f68\u8ff9\u8fdb\u884c\u5339\u914d\n    agent_count = 0\n    add_single_ft = [True]\n\n    for agent_id, _gps_df in gps_df.groupby(gps_field.AGENT_ID_FIELD):\n        agent_count += 1\n        print(rf'- gotrackit ------&gt; No.{agent_count}: agent: {agent_id} ')\n        try:\n            gps_obj = GpsPointsGdf(gps_points_df=_gps_df, time_format=self.time_format,\n                                   buffer=self.gps_buffer, time_unit=self.time_unit,\n                                   plane_crs=self.plain_crs, user_filed_list=user_field_list)\n        except Exception as e:\n            print(f'error constructing GPS object: {repr(e)}')\n            error_list.append(agent_id)\n            continue\n\n        del _gps_df\n\n        # gps-process\n        try:\n            self.gps_reprocess(gps_obj=gps_obj,\n                               is_lower_f=self.is_lower_f, lower_n=self.lower_n,\n                               is_rolling_average=self.is_rolling_average, rolling_window=self.rolling_window,\n                               dense_gps=self.dense_gps, dense_interval=self.dense_interval,\n                               del_dwell=self.del_dwell, dwell_l_length=self.dwell_l_length, dwell_n=self.dwell_n)\n        except Exception as e:\n            print(rf'GPS data preprocessing error: {repr(e)}')\n            error_list.append(agent_id)\n            continue\n\n        if len(gps_obj.gps_gdf) &lt;= 1:\n            print(r'after data preprocessing, there are less than 2 GPS observation points.')\n            error_list.append(agent_id)\n            continue\n\n        # \u4f9d\u636e\u5f53\u524d\u7684GPS\u6570\u636e(\u6e90\u6570\u636e)\u505a\u4e00\u4e2a\u5b50\u7f51\u7edc\n        if self.use_sub_net:\n            print(rf'using sub net')\n            add_single_ft[0] = True\n            used_net = self.my_net.create_computational_net(\n                gps_array_buffer=gps_obj.get_gps_array_buffer(buffer=self.sub_net_buffer,\n                                                              dup_threshold=self.dup_threshold),\n                fmm_cache=self.my_net.fmm_cache, prj_cache=self.my_net.prj_cache,\n                weight_field=self.my_net.weight_field,\n                cache_path=self.my_net.cache_path, cache_id=self.my_net.cache_id,\n                not_conn_cost=self.my_net.not_conn_cost)\n            if used_net is None:\n                error_list.append(agent_id)\n                continue\n        else:\n            used_net = self.my_net\n            print(rf'using whole net')\n\n        # \u521d\u59cb\u5316\u4e00\u4e2a\u9690\u9a6c\u5c14\u53ef\u592b\u6a21\u578b\n        hmm_obj = HiddenMarkov(net=used_net, gps_points=gps_obj, beta=self.beta, gps_sigma=self.gps_sigma,\n                               not_conn_cost=self.not_conn_cost, use_heading_inf=self.use_heading_inf,\n                               heading_para_array=self.heading_para_array, dis_para=self.dis_para,\n                               top_k=self.top_k, use_node_restrict=self.use_node_restrict,\n                               omitted_l=self.omitted_l, para_grid=self.para_grid,\n                               heading_vec_len=self.heading_vec_len)\n        if not self.use_para_grid:\n            is_success, _match_res_df = hmm_obj.hmm_execute(add_single_ft=add_single_ft)\n        else:\n            is_success, _match_res_df = hmm_obj.hmm_para_grid_execute(add_single_ft=add_single_ft,\n                                                                      agent_id=agent_id)\n            self.para_grid.init_para_grid()\n\n        if not is_success:\n            error_list.append(agent_id)\n            continue\n        hmm_obj.del_ft_trans()\n\n        if hmm_obj.is_warn:\n            may_error_list[agent_id] = hmm_obj.format_warn_info\n\n        if self.instant_output:\n            _match_res_df.to_csv(os.path.join(self.out_fldr, rf'{agent_id}_match_res.csv'),\n                                 encoding='utf_8_sig', index=False)\n        else:\n            match_res_df = pd.concat([match_res_df, _match_res_df])\n\n        # if export files\n        if self.export_html or self.export_geo_res:\n            hmm_res_list.append(hmm_obj)\n            if len(hmm_res_list) &gt;= self.visualization_cache_times or agent_count == agent_num:\n                export_visualization(hmm_obj_list=hmm_res_list, use_gps_source=self.use_gps_source,\n                                     export_geo=self.export_geo_res, export_html=self.export_html,\n                                     gps_radius=self.gps_radius, export_all_agents=self.export_all_agents,\n                                     out_fldr=self.out_fldr, flag_name=self.flag_name,\n                                     multi_core_save=self.multi_core_save, sub_net_buffer=self.sub_net_buffer,\n                                     dup_threshold=self.dup_threshold)\n                del hmm_res_list\n                hmm_res_list = []\n    if hmm_res_list:\n        export_visualization(hmm_obj_list=hmm_res_list, use_gps_source=self.use_gps_source,\n                             export_geo=self.export_geo_res, export_html=self.export_html,\n                             gps_radius=self.gps_radius, export_all_agents=self.export_all_agents,\n                             out_fldr=self.out_fldr, flag_name=self.flag_name,\n                             multi_core_save=self.multi_core_save, sub_net_buffer=self.sub_net_buffer,\n                             dup_threshold=self.dup_threshold)\n    return match_res_df, may_error_list, error_list\n</code></pre> <p> </p> <p>\u5e76\u884c\u5339\u914d</p> <p>\u5bf9\u8f93\u5165\u7684gps\u6570\u636e\u8fdb\u884c\u5206\u7ec4\u540e\uff0c\u6267\u884c\u5e76\u884c\u8def\u5f84\u5339\u914d\u5e76\u4e14\u8f93\u51fa\u5339\u914d\u7ed3\u679c</p> <p>Parameters:</p> Name Type Description Default <code>gps_df</code> <code>DataFrame | GeoDataFrame</code> <p>gps\u6570\u636e\u8868\u5bf9\u8c61, \u5fc5\u9700\u53c2\u6570</p> required <code>core_num</code> <code>int</code> <p>\u4f7f\u7528\u7684CPU\u6838\u6570</p> <code>2</code> <p>Returns:</p> Type Description <code>tuple[DataFrame, dict, list]</code> <p>\u5339\u914d\u7ed3\u679c\u8868(pd.DataFrame), \u8b66\u544a\u4fe1\u606f(dict), \u9519\u8bef\u4fe1\u606f(list)</p> Source code in <code>src/gotrackit/MapMatch.py</code> <pre><code>def multi_core_execute(self, gps_df: pd.DataFrame | gpd.GeoDataFrame, core_num: int = 2) -&gt; \\\n        tuple[pd.DataFrame, dict, list]:\n    \"\"\"\u5e76\u884c\u5339\u914d\n\n    \u5bf9\u8f93\u5165\u7684gps\u6570\u636e\u8fdb\u884c\u5206\u7ec4\u540e\uff0c\u6267\u884c\u5e76\u884c\u8def\u5f84\u5339\u914d\u5e76\u4e14\u8f93\u51fa\u5339\u914d\u7ed3\u679c\n\n    Args:\n        gps_df: gps\u6570\u636e\u8868\u5bf9\u8c61, \u5fc5\u9700\u53c2\u6570\n        core_num: \u4f7f\u7528\u7684CPU\u6838\u6570\n\n    Returns:\n        \u5339\u914d\u7ed3\u679c\u8868(pd.DataFrame), \u8b66\u544a\u4fe1\u606f(dict), \u9519\u8bef\u4fe1\u606f(list)\n    \"\"\"\n    assert gps_field.AGENT_ID_FIELD in set(gps_df.columns), 'gps data is missing agent_id field'\n    agent_id_list = list(gps_df[gps_field.AGENT_ID_FIELD].unique())\n    core_num = os.cpu_count() if core_num &gt; os.cpu_count() else core_num\n    agent_group = cut_group(agent_id_list, n=core_num)\n    n = len(agent_group)\n    print(f'using multiprocessing - {n} cores')\n    pool = multiprocessing.Pool(processes=n)\n    result_list = []\n    for i in range(0, n):\n        core_out_fldr = os.path.join(self.out_fldr, rf'core{i}')\n        if os.path.exists(core_out_fldr):\n            pass\n        else:\n            os.makedirs(core_out_fldr)\n\n        agent_id_list = agent_group[i]\n        _gps_df = gps_df[gps_df[gps_field.AGENT_ID_FIELD].isin(agent_id_list)]\n        mmp = MapMatch(net=self.my_net, use_sub_net=self.use_sub_net, time_format=self.time_format,\n                       time_unit=self.time_unit, gps_buffer=self.gps_buffer,\n                       use_node_restrict=self.use_node_restrict,\n                       gps_route_buffer_gap=self.gps_route_buffer_gap,\n                       beta=self.beta,\n                       gps_sigma=self.gps_sigma, dis_para=self.dis_para, is_lower_f=self.is_lower_f,\n                       lower_n=self.lower_n,\n                       use_heading_inf=self.use_heading_inf, heading_para_array=self.heading_para_array,\n                       dense_gps=self.dense_gps,\n                       dense_interval=self.dense_interval, dwell_l_length=self.dwell_l_length, dwell_n=self.dwell_n,\n                       del_dwell=self.del_dwell,\n                       dup_threshold=self.dup_threshold, is_rolling_average=self.is_rolling_average,\n                       window=self.rolling_window,\n                       export_html=self.export_html,\n                       use_gps_source=self.use_gps_source, out_fldr=core_out_fldr,\n                       export_geo_res=self.export_geo_res,\n                       top_k=self.top_k, omitted_l=self.omitted_l, link_width=self.link_width,\n                       node_radius=self.node_radius,\n                       match_link_width=self.match_link_width, gps_radius=self.gps_radius,\n                       export_all_agents=self.export_all_agents,\n                       visualization_cache_times=self.visualization_cache_times,\n                       multi_core_save=False, instant_output=self.instant_output, use_para_grid=self.use_para_grid,\n                       para_grid=self.para_grid, user_field_list=self.user_field_list,\n                       heading_vec_len=self.heading_vec_len)\n        result = pool.apply_async(mmp.execute,\n                                  args=(_gps_df, ))\n        result_list.append(result)\n    pool.close()\n    pool.join()\n\n    match_res, may_error, error = pd.DataFrame(), dict(), list()\n    for res in result_list:\n        _match_res, _may_error, _error = res.get()\n        match_res = pd.concat([match_res, _match_res])\n        may_error.update(_may_error)\n        error.extend(_error)\n    match_res.reset_index(inplace=True, drop=True)\n    return match_res, may_error, error\n</code></pre>"},{"location":"Func%26API/Net/","title":"Net","text":"<p>Net\u7c7b\u521d\u59cb\u5316</p> <p>Parameters:</p> Name Type Description Default <code>link_gdf</code> <code>GeoDataFrame</code> <p>gpd.GeoDataFrame, \u7ebf\u5c42\u6570\u636e, \u5fc5\u9700\u53c2\u6570</p> <code>None</code> <code>node_gdf</code> <code>GeoDataFrame</code> <p>gpd.GeoDataFrame, \u70b9\u5c42\u6570\u636e, \u5fc5\u9700\u53c2\u6570</p> <code>None</code> <code>link_path</code> <code>str</code> <p>str, link\u5c42\u7684\u8def\u7f51\u6587\u4ef6\u8def\u5f84, \u82e5\u6307\u5b9a\u4e86\u8be5\u53c2\u6570, \u5219\u76f4\u63a5\u4ece\u78c1\u76d8\u8bfb\u53d6\u7ebf\u5c42, \u53ef\u9009\u53c2\u6570</p> <code>None</code> <code>node_path</code> <code>str</code> <p>str, node\u5c42\u7684\u8def\u7f51\u6587\u4ef6\u8def\u5f84, \u82e5\u6307\u5b9a\u4e86\u8be5\u53c2\u6570, \u5219\u76f4\u63a5\u4ece\u78c1\u76d8\u8bfb\u53d6\u70b9\u5c42, \u53ef\u9009\u53c2\u6570</p> <code>None</code> <code>cut_off</code> <code>float</code> <p>\u8def\u5f84\u641c\u7d22\u622a\u65ad\u957f\u5ea6, \u7c73, \u53ef\u9009\u53c2\u6570</p> <code>1200.0</code> <code>not_conn_cost</code> <code>float</code> <p>float, \u4e0d\u8fde\u901a\u8def\u5f84\u7684\u963b\u6297(m), \u53ef\u9009\u53c2\u6570</p> <code>1000.0</code> <code>fmm_cache</code> <code>bool</code> <p>bool, \u662f\u5426\u542f\u7528\u8def\u5f84\u9884\u8ba1\u7b97, \u53ef\u9009\u53c2\u6570</p> <code>False</code> <code>cache_cn</code> <code>int</code> <p>int, \u4f7f\u7528\u51e0\u4e2a\u6838\u8fdb\u884c\u8def\u5f84\u9884\u8ba1\u7b97, \u53ef\u9009\u53c2\u6570</p> <code>2</code> <code>cache_slice</code> <code>int</code> <p>int, \u5927\u4e8e0\u7684\u6574\u6570, \u8868\u793a\u5c06\u8def\u5f84\u9884\u8ba1\u7b97\u7ed3\u679c\u5207\u5206\u4e3acache_slice\u4efd(\u5927\u89c4\u6a21\u8def\u7f51\u542f\u7528\u9884\u8ba1\u7b97\u65f6, \u589e\u5927\u8be5\u503c\u53ef\u4ee5\u9632\u6b62\u5185\u5b58\u6ea2\u51fa)</p> <code>None</code> <code>fmm_cache_fldr</code> <code>str</code> <p>str, \u5b58\u50a8\u8def\u5f84\u9884\u8ba1\u7b97\u7ed3\u679c\u7684\u6587\u4ef6\u76ee\u5f55, \u53ef\u9009\u53c2\u6570</p> <code>'./'</code> <code>recalc_cache</code> <code>bool</code> <p>bool, \u662f\u5426\u91cd\u65b0\u8fdb\u884c\u8def\u5f84\u9884\u8ba1\u7b97, \u53d6\u503cFalse\u65f6, \u7a0b\u5e8f\u4f1a\u53bbfmm_cache_fldr\u4e0b\u8bfb\u53d6\u7f13\u5b58, \u82e5\u8bfb\u53d6\u5931\u8d25\u5219\u4f1a\u91cd\u65b0\u8fdb\u884c\u8def\u5f84\u9884\u8ba1\u7b97, \u53ef\u9009\u53c2\u6570</p> <code>True</code> <code>prj_cache</code> <code>bool</code> <p>bool, \u662f\u5426\u542f\u7528\u6295\u5f71\u7f13\u5b58, \u53ef\u9009\u53c2\u6570</p> <code>True</code> <code>is_hierarchical</code> <code>bool</code> <p>bool, \u662f\u5426\u542f\u7528\u7a7a\u95f4\u5206\u5c42, \u53ef\u9009\u53c2\u6570</p> <code>False</code> <code>grid_len</code> <code>float</code> <p>float, \u542f\u7528\u7a7a\u95f4\u5206\u5c42\u65f6, \u8be5\u53c2\u6570\u8d77\u6548, \u610f\u4e3a\u5c06\u8def\u7f51\u533a\u57df\u5212\u5206\u4e3agrid_len(m)\u7684\u6805\u683c, \u53ef\u9009\u53c2\u6570</p> <code>2000.0</code> <code>cache_name</code> <code>str</code> <p>\u8def\u5f84\u9884\u5b58\u50a8\u7684\u6807\u5fd7\u540d\u79f0, \u9ed8\u8ba4cache</p> <code>'cache'</code> <code>plane_crs</code> <code>str</code> <p>str, \u8981\u4f7f\u7528\u7684\u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb, \u7528\u6237\u82e5\u4e0d\u6307\u5b9a, \u7a0b\u5e8f\u4f1a\u4f9d\u636e\u8def\u7f51\u7684\u7ecf\u7eac\u5ea6\u8303\u56f4\u81ea\u52a8\u8fdb\u884c6\u5ea6\u6295\u5f71\u5e26\u7684\u9009\u62e9, \u63a8\u8350\u4f7f\u7528\u7a0b\u5e8f\u81ea\u52a8</p> <code>None</code> <code>weight_field</code> <code>str</code> <p>str, \u641c\u8def\u6743\u91cd\u5b57\u6bb5, \u76ee\u524d\u53ea\u80fd\u4e3alength</p> <code>'length'</code> <code>create_single</code> <code>bool</code> <p>bool, \u662f\u5426\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u521b\u5efa\u5355\u9879\u8def\u7f51, \u53ef\u9009\u53c2\u6570</p> <code>True</code> <code>search_method</code> <code>str</code> <p>str, \u8def\u5f84\u641c\u7d22\u65b9\u6cd5, \u76ee\u524d\u53ea\u80fd\u4e3adijkstra</p> <code>'dijkstra'</code> <code>is_sub_net</code> <code>bool</code> <p>bool, \u7528\u6237\u4e0d\u53ef\u6307\u5b9a</p> <code>False</code> <code>init_from_existing</code> <code>bool</code> <p>bool, \u7528\u6237\u4e0d\u53ef\u6307\u5b9a</p> <code>False</code> <code>double_single_mapping</code> <code>dict</code> <p>dict, \u7528\u6237\u4e0d\u53ef\u6307\u5b9a</p> <code>None</code> <code>link_ft_mapping</code> <code>dict</code> <p>dict, \u7528\u6237\u4e0d\u53ef\u6307\u5b9a</p> <code>None</code> <code>link_f_mapping</code> <code>dict</code> <p>dict, \u7528\u6237\u4e0d\u53ef\u6307\u5b9a</p> <code>None</code> <code>link_t_mapping</code> <code>dict</code> <p>dict, \u7528\u6237\u4e0d\u53ef\u6307\u5b9a</p> <code>None</code> <code>link_geo_mapping</code> <code>dict</code> <p>dict, \u7528\u6237\u4e0d\u53ef\u6307\u5b9a</p> <code>None</code> <code>ft_link_mapping</code> <code>dict</code> <p>dict, \u7528\u6237\u4e0d\u53ef\u6307\u5b9a</p> <code>None</code> Source code in <code>src/gotrackit/map/Net.py</code> <pre><code>@function_time_cost\ndef __init__(self, link_path: str = None, node_path: str = None, link_gdf: gpd.GeoDataFrame = None,\n             node_gdf: gpd.GeoDataFrame = None, weight_field: str = 'length', init_from_existing: bool = False,\n             is_check: bool = True, create_single: bool = True, search_method: str = 'dijkstra',\n             ft_link_mapping: dict = None, double_single_mapping: dict = None, link_ft_mapping: dict = None,\n             link_t_mapping: dict = None, link_f_mapping: dict = None, link_geo_mapping: dict = None,\n             not_conn_cost: float = 1000.0, cache_path: bool = True, cache_id: bool = True,\n             is_sub_net: bool = False, fmm_cache: bool = False, cache_cn: int = 2, cache_slice: int = None,\n             fmm_cache_fldr: str = r'./', prj_cache: bool = True, grid_len: float = 2000.0, is_hierarchical: bool = False,\n             cache_name: str = 'cache', recalc_cache: bool = True,\n             cut_off: float = 1200.0, delete_circle: bool = True, plane_crs: str = None):\n    \"\"\"Net\u7c7b\u521d\u59cb\u5316\n\n    Args:\n        link_gdf: gpd.GeoDataFrame, \u7ebf\u5c42\u6570\u636e, \u5fc5\u9700\u53c2\u6570\n        node_gdf: gpd.GeoDataFrame, \u70b9\u5c42\u6570\u636e, \u5fc5\u9700\u53c2\u6570\n        link_path: str, link\u5c42\u7684\u8def\u7f51\u6587\u4ef6\u8def\u5f84, \u82e5\u6307\u5b9a\u4e86\u8be5\u53c2\u6570, \u5219\u76f4\u63a5\u4ece\u78c1\u76d8\u8bfb\u53d6\u7ebf\u5c42, \u53ef\u9009\u53c2\u6570\n        node_path: str, node\u5c42\u7684\u8def\u7f51\u6587\u4ef6\u8def\u5f84, \u82e5\u6307\u5b9a\u4e86\u8be5\u53c2\u6570, \u5219\u76f4\u63a5\u4ece\u78c1\u76d8\u8bfb\u53d6\u70b9\u5c42, \u53ef\u9009\u53c2\u6570\n        cut_off: \u8def\u5f84\u641c\u7d22\u622a\u65ad\u957f\u5ea6, \u7c73, \u53ef\u9009\u53c2\u6570\n        not_conn_cost: float, \u4e0d\u8fde\u901a\u8def\u5f84\u7684\u963b\u6297(m), \u53ef\u9009\u53c2\u6570\n        fmm_cache: bool, \u662f\u5426\u542f\u7528\u8def\u5f84\u9884\u8ba1\u7b97, \u53ef\u9009\u53c2\u6570\n        cache_cn: int, \u4f7f\u7528\u51e0\u4e2a\u6838\u8fdb\u884c\u8def\u5f84\u9884\u8ba1\u7b97, \u53ef\u9009\u53c2\u6570\n        cache_slice: int, \u5927\u4e8e0\u7684\u6574\u6570, \u8868\u793a\u5c06\u8def\u5f84\u9884\u8ba1\u7b97\u7ed3\u679c\u5207\u5206\u4e3acache_slice\u4efd(\u5927\u89c4\u6a21\u8def\u7f51\u542f\u7528\u9884\u8ba1\u7b97\u65f6, \u589e\u5927\u8be5\u503c\u53ef\u4ee5\u9632\u6b62\u5185\u5b58\u6ea2\u51fa)\n        fmm_cache_fldr: str, \u5b58\u50a8\u8def\u5f84\u9884\u8ba1\u7b97\u7ed3\u679c\u7684\u6587\u4ef6\u76ee\u5f55, \u53ef\u9009\u53c2\u6570\n        recalc_cache: bool, \u662f\u5426\u91cd\u65b0\u8fdb\u884c\u8def\u5f84\u9884\u8ba1\u7b97, \u53d6\u503cFalse\u65f6, \u7a0b\u5e8f\u4f1a\u53bbfmm_cache_fldr\u4e0b\u8bfb\u53d6\u7f13\u5b58, \u82e5\u8bfb\u53d6\u5931\u8d25\u5219\u4f1a\u91cd\u65b0\u8fdb\u884c\u8def\u5f84\u9884\u8ba1\u7b97, \u53ef\u9009\u53c2\u6570\n        prj_cache: bool, \u662f\u5426\u542f\u7528\u6295\u5f71\u7f13\u5b58, \u53ef\u9009\u53c2\u6570\n        is_hierarchical: bool, \u662f\u5426\u542f\u7528\u7a7a\u95f4\u5206\u5c42, \u53ef\u9009\u53c2\u6570\n        grid_len: float, \u542f\u7528\u7a7a\u95f4\u5206\u5c42\u65f6, \u8be5\u53c2\u6570\u8d77\u6548, \u610f\u4e3a\u5c06\u8def\u7f51\u533a\u57df\u5212\u5206\u4e3agrid_len(m)\u7684\u6805\u683c, \u53ef\u9009\u53c2\u6570\n        cache_name: \u8def\u5f84\u9884\u5b58\u50a8\u7684\u6807\u5fd7\u540d\u79f0, \u9ed8\u8ba4cache\n        plane_crs: str, \u8981\u4f7f\u7528\u7684\u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb, \u7528\u6237\u82e5\u4e0d\u6307\u5b9a, \u7a0b\u5e8f\u4f1a\u4f9d\u636e\u8def\u7f51\u7684\u7ecf\u7eac\u5ea6\u8303\u56f4\u81ea\u52a8\u8fdb\u884c6\u5ea6\u6295\u5f71\u5e26\u7684\u9009\u62e9, \u63a8\u8350\u4f7f\u7528\u7a0b\u5e8f\u81ea\u52a8\n        weight_field: str, \u641c\u8def\u6743\u91cd\u5b57\u6bb5, \u76ee\u524d\u53ea\u80fd\u4e3alength\n        create_single: bool, \u662f\u5426\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u521b\u5efa\u5355\u9879\u8def\u7f51, \u53ef\u9009\u53c2\u6570\n        search_method: str, \u8def\u5f84\u641c\u7d22\u65b9\u6cd5, \u76ee\u524d\u53ea\u80fd\u4e3adijkstra\n        is_sub_net: bool, \u7528\u6237\u4e0d\u53ef\u6307\u5b9a\n        init_from_existing: bool, \u7528\u6237\u4e0d\u53ef\u6307\u5b9a\n        double_single_mapping: dict, \u7528\u6237\u4e0d\u53ef\u6307\u5b9a\n        link_ft_mapping: dict, \u7528\u6237\u4e0d\u53ef\u6307\u5b9a\n        link_f_mapping: dict, \u7528\u6237\u4e0d\u53ef\u6307\u5b9a\n        link_t_mapping: dict, \u7528\u6237\u4e0d\u53ef\u6307\u5b9a\n        link_geo_mapping: dict, \u7528\u6237\u4e0d\u53ef\u6307\u5b9a\n        ft_link_mapping: dict, \u7528\u6237\u4e0d\u53ef\u6307\u5b9a\n    \"\"\"\n    self.not_conn_cost = not_conn_cost\n    self.geo_crs = geo_crs\n    self.search_method = search_method\n    self.weight_field = weight_field\n    self.all_pair_path_df = pd.DataFrame()\n    self.__stp_cache = dict() or pd.DataFrame\n    self.__done_path_cost = dict() or pd.DataFrame\n    self.__done_stp_cost_df = pd.DataFrame()\n    self.__cache_prj_inf = dict()\n    self.cache_path = cache_path\n    self.cache_id = cache_id\n    self.__is_sub_net = is_sub_net\n    self.fmm_cache = fmm_cache\n    self.cut_off = cut_off\n    if cache_cn &gt; os.cpu_count():\n        cache_cn = os.cpu_count()\n    self.cache_cn = cache_cn\n    self.cache_name = cache_name\n    self.fmm_cache_fldr = fmm_cache_fldr\n    self.prj_cache = prj_cache\n    self.recalc_cache = recalc_cache\n    self.cache_slice = cache_slice\n    self.delete_circle = delete_circle\n    self.grid_len = 2000.0 if grid_len &lt; 2000.0 else grid_len\n    self.is_hierarchical = is_hierarchical\n    self.region_grid = gpd.GeoDataFrame()\n    self.grid_cor_link = pd.DataFrame()\n    self.done_sjoin_cache = False\n    if self.cache_slice is None:\n        self.cache_slice = 2 * self.cache_cn\n\n    if node_gdf is None:\n        self.__node = Node(node_gdf=gpd.read_file(node_path), is_check=is_check, init_available_node=self.cache_id,\n                           plane_crs=plane_crs)\n    else:\n        self.__node = Node(node_gdf=node_gdf, is_check=is_check, init_available_node=self.cache_id,\n                           plane_crs=plane_crs)\n\n    if not init_from_existing:\n        self.__node.init_node()\n    else:\n        pass\n\n    if link_gdf is None:\n        self.__link = Link(link_gdf=gpd.read_file(link_path), weight_field=self.weight_field, is_check=is_check,\n                           planar_crs=self.__node.planar_crs, init_available_link=self.cache_id,\n                           not_conn_cost=self.not_conn_cost, delete_circle=self.delete_circle)\n    else:\n        self.__link = Link(link_gdf=link_gdf, weight_field=self.weight_field, is_check=is_check,\n                           planar_crs=self.__node.planar_crs, init_available_link=self.cache_id,\n                           not_conn_cost=self.not_conn_cost, delete_circle=self.delete_circle)\n    self.__planar_crs = self.__node.planar_crs\n    self.to_plane_prj()\n    if not self.is_sub_net:\n        self.del_zero_degree_nodes()\n        self.__link.renew_length()\n    if not init_from_existing:\n        if create_single:\n            self.__link.init_link()\n    else:\n        if create_single:\n            # for sub net\n            self.__link.init_link_from_existing_single_link(single_link_gdf=link_gdf,\n                                                            double_single_mapping=double_single_mapping,\n                                                            ft_link_mapping=ft_link_mapping,\n                                                            link_ft_mapping=link_ft_mapping,\n                                                            link_t_mapping=link_t_mapping,\n                                                            link_f_mapping=link_f_mapping,\n                                                            link_geo_mapping=link_geo_mapping)\n    if is_check:\n        self.check()\n</code></pre> <p> </p> <p>Parameters:</p> Name Type Description Default <code>o</code> <code>int</code> <code>None</code> <code>d</code> <code>int</code> <code>None</code> <code>k</code> <code>int</code> <code>2</code> <p>Returns:</p> Source code in <code>src/gotrackit/map/Net.py</code> <pre><code>def shortest_k_paths(self, o: int = None, d: int = None, k: int = 2):\n    \"\"\"\n\n    Args:\n        o:\n        d:\n        k:\n\n    Returns:\n\n    \"\"\"\n    g = self.__link.get_graph()\n    return list(islice(nx.shortest_simple_paths(g, o, d, weight=self.weight_field), k))\n</code></pre>"},{"location":"Func%26API/NetReverse/","title":"NetReverse","text":"<p>\u8def\u7f51\u9006\u5411\u7c7b\u521d\u59cb\u5316</p> <p>:\u5b9a\u4e49\u8def\u7f51\u9006\u5411\u7c7b\u7684\u76f8\u5173\u53c2\u6570</p> <p>Parameters:</p> Name Type Description Default <code>flag_name</code> <code>str</code> <p>[1]\u603b\u4f53\u53c2\u6570 - \u9879\u76ee\u540d\u79f0</p> <code>'NetGen'</code> <code>net_out_fldr</code> <code>str</code> <p>[1]\u603b\u4f53\u53c2\u6570 - \u8f93\u51fa\u8def\u7f51\u7684\u5b58\u50a8\u76ee\u5f55</p> <code>'./'</code> <code>plain_crs</code> <code>str</code> <p>[1]\u603b\u4f53\u53c2\u6570 - \u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb</p> <code>'EPSG:32650'</code> <code>net_file_type</code> <code>str</code> <p>[1]\u603b\u4f53\u53c2\u6570 - \u8def\u7f51\u7684\u8f93\u51fa\u6587\u4ef6\u7c7b\u578b\uff0cshp \u6216\u8005 geojson</p> <code>'shp'</code> <code>multi_core_parse</code> <code>bool</code> <p>[2]\u8def\u5f84\u89e3\u6790\u3001\u62c6\u5206\u53c2\u6570 - \u662f\u5426\u542f\u7528\u591a\u6838\u5bf9\u4e8c\u8fdb\u5236\u8def\u5f84\u6587\u4ef6\u8fdb\u884c\u89e3\u6790</p> <code>False</code> <code>parse_core_num</code> <code>int</code> <p>[2]\u8def\u5f84\u89e3\u6790\u3001\u62c6\u5206\u53c2\u6570 - \u591a\u6838\u89e3\u6790\u65f6\u4f7f\u7528\u7684\u6838\u6570</p> <code>2</code> <code>ignore_head_tail</code> <code>bool</code> <p>[2]\u8def\u5f84\u89e3\u6790\u3001\u62c6\u5206\u53c2\u6570 - \u662f\u5426\u5ffd\u7565\u8def\u5f84\u9996\u5c3e\u7684\u65e0\u540d\u9053\u8def, \u8fd9\u79cd\u4e00\u822c\u662f\u5c0f\u533a\u5185\u90e8\u9053\u8def</p> <code>False</code> <code>cut_slice</code> <code>bool</code> <p>[2]\u8def\u5f84\u89e3\u6790\u3001\u62c6\u5206\u53c2\u6570 - \u62c6\u5206\u8def\u6bb5\u65f6\uff0c\u662f\u5426\u5206\u7247\u5904\u7406\uff0c\u5185\u5b58\u4e0d\u591f\u65f6\u53ef\u4ee5\u6307\u5b9a\u4e3aTrue</p> <code>False</code> <code>slice_num</code> <code>int</code> <p>[2]\u8def\u5f84\u89e3\u6790\u3001\u62c6\u5206\u53c2\u6570 - \u62c6\u5206\u8def\u6bb5\u65f6\uff0c\u62c6\u5206\u4e3a\u51e0\u4e2aslice\u5904\u7406</p> <code>5</code> <code>generate_rod</code> <code>bool</code> <p>[2]\u8def\u5f84\u89e3\u6790\u3001\u62c6\u5206\u53c2\u6570 - \u662f\u5426\u751f\u6210\u8fde\u6746, \u53ea\u6709\u5f53\u53c2\u6570ignore_head_tail\u4e3afalse\u65f6\u8be5\u53c2\u6570\u624d\u751f\u6548</p> <code>False</code> <code>min_rod_length</code> <code>float</code> <p>[2]\u8def\u5f84\u89e3\u6790\u3001\u62c6\u5206\u53c2\u6570 - \u6700\u5c0f\u8fde\u6746\u957f\u5ea6\uff0c\u7c73</p> <code>5.0</code> <code>restrict_region_gdf</code> <code>GeoDataFrame</code> <p>[2]\u8def\u5f84\u89e3\u6790\u3001\u62c6\u5206\u53c2\u6570 - \u9650\u5236\u533a\u57dfgdf\uff0c\u82e5\u4f20\u5165\u6b64\u533a\u57df\uff0c\u90a3\u4e48\u4ec5\u4ec5\u53ea\u5bf9\u5728\u533a\u57df\u8303\u56f4\u5185\u7684\u8def\u7f51\u8fdb\u884c\u9006\u5411</p> <code>None</code> <code>save_split_link</code> <code>bool</code> <p>[2]\u8def\u5f84\u89e3\u6790\u3001\u62c6\u5206\u53c2\u6570 - \u662f\u5426\u4fdd\u5b58\u62c6\u5206\u8def\u5f84\u540e\u7684link\u5c42\u6587\u4ef6</p> <code>False</code> <code>modify_minimum_buffer</code> <code>float</code> <p>[3]\u62d3\u6251\u751f\u6210\u53c2\u6570 - \u662f\u6781\u5c0f\u95f4\u9694\u8282\u70b9\u4f18\u5316\u7684buffer, m</p> <code>0.8</code> <code>save_streets_before_modify_minimum</code> <code>bool</code> <p>[3]\u62d3\u6251\u751f\u6210\u53c2\u6570 - \u662f\u5426\u4fdd\u5b58\u4f18\u5316\u524d\u7684\u7ed3\u679c</p> <code>False</code> <code>save_streets_after_modify_minimum</code> <code>bool</code> <p>[3]\u62d3\u6251\u751f\u6210\u53c2\u6570 - \u662f\u5426\u4fdd\u5b58\u4f18\u5316\u540e\u7684\u7ed3\u679c</p> <code>False</code> <code>save_tpr_link</code> <code>bool</code> <p>[3]\u62d3\u6251\u751f\u6210\u53c2\u6570 - \u662f\u5426\u4fdd\u5b58\u4f18\u5316\u540e\u4e14\u8fdb\u884c\u65b9\u5411\u5904\u7406\u7684\u6587\u4ef6</p> <code>False</code> <code>limit_col_name</code> <code>str</code> <p>[4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u8def\u6bb5\u5408\u5e76\u65f6\uff0c\u7528\u4e8e\u9650\u5236\u8def\u6bb5\u5408\u5e76\u7684\u7ebf\u5c42\u5c5e\u6027\u5b57\u6bb5\uff0c\u9ed8\u8ba4road_name\uff0c\u5982\u679c\u4f60\u8981\u4f7f\u7528\u5176\u4ed6\u5b57\u6bb5\u6765\u9650\u5236\u5408\u5e76\uff0c\u8bf7\u81ea\u5b9a\u4e49\u8be5\u53c2\u6570</p> <code>'road_name'</code> <code>ignore_dir</code> <code>bool</code> <p>[4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u8def\u6bb5\u5408\u5e76\u65f6\uff0c\u662f\u5426\u5ffd\u7565\u884c\u8f66\u65b9\u5411</p> <code>False</code> <code>allow_ring</code> <code>bool</code> <p>[4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u662f\u5426\u5141\u8bb8\u8def\u6bb5\u5408\u5e76\u540e\u51fa\u73b0\u73af</p> <code>False</code> <code>restrict_angle</code> <code>bool</code> <p>[4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u662f\u5426\u542f\u7528\u6700\u5927\u8f6c\u89d2\u9650\u5236\u6765\u7ea6\u675f\u8def\u6bb5\u5408\u5e76</p> <code>True</code> <code>restrict_length</code> <code>bool</code> <p>[4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u662f\u5426\u542f\u7528\u6700\u5927\u8def\u6bb5\u957f\u5ea6\u9650\u5236\u6765\u7ea6\u675f\u8def\u6bb5\u5408\u5e76</p> <code>True</code> <code>accu_l_threshold</code> <code>float</code> <p>[4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u5141\u8bb8\u7684\u6700\u957f\u7684\u8def\u6bb5\u957f\u5ea6\uff0c\u7c73</p> <code>200.0</code> <code>angle_threshold</code> <code>float</code> <p>[4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u5141\u8bb8\u7684\u6700\u5927\u7684\u8def\u6bb5\u5185\u8f6c\u89d2\uff0c\u5ea6</p> <code>35.0</code> <code>min_length</code> <code>float</code> <p>[4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u5141\u8bb8\u7684\u6700\u5c0f\u7684\u8def\u6bb5\u957f\u5ea6\uff0c\u7c73</p> <code>50.0</code> <code>save_preliminary</code> <code>bool</code> <p>[4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u662f\u5426\u4fdd\u7559\u91cd\u590d\u8def\u6bb5\u5904\u7406\u524d\u7684\u6587\u4ef6</p> <code>False</code> <code>multi_core_merge</code> <code>bool</code> <p>[4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u662f\u5426\u542f\u7528\u591a\u8fdb\u7a0b\u8fdb\u884c\u8def\u6bb5\u5408\u5e76</p> <code>False</code> <code>merge_core_num</code> <code>int</code> <p>[4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u542f\u7528\u51e0\u4e2a\u6838\u8fdb\u884c\u8def\u6bb5\u5408\u5e76</p> <code>2</code> <code>save_done_topo</code> <code>bool</code> <p>[4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u662f\u5426\u4fdd\u5b58\u62d3\u6251\u4f18\u5316\u540e\u7684\u8def\u7f51</p> <code>False</code> <code>is_process_dup_link</code> <code>bool</code> <p>[5]\u91cd\u53e0\u8def\u6bb5\u5904\u7406\u53c2\u6570 - \u662f\u5426\u5904\u7406\u91cd\u590d\u8def</p> <code>True</code> <code>process_dup_link_buffer</code> <code>float</code> <p>[5]\u91cd\u53e0\u8def\u6bb5\u5904\u7406\u53c2\u6570 - \u5904\u7406\u91cd\u590d\u8def\u6bb5\u6240\u4f7f\u7528\u7684buffer\u957f\u5ea6\uff0c\u7c73</p> <code>0.8</code> <code>dup_link_buffer_ratio</code> <code>float</code> <p>[5]\u91cd\u53e0\u8def\u6bb5\u5904\u7406\u53c2\u6570 - dup_link_buffer_ratio</p> <code>60.0</code> <code>is_modify_conn</code> <code>bool</code> <p>[6]\u8054\u901a\u6027\u4fee\u590d\u53c2\u6570 - \u662f\u5426\u68c0\u67e5\u6f5c\u5728\u7684\u8054\u901a\u6027\u95ee\u9898\u5e76\u4e14\u8fdb\u884c\u4fee\u590d</p> <code>True</code> <code>conn_buffer</code> <code>float</code> <p>[6]\u8054\u901a\u6027\u4fee\u590d\u53c2\u6570 - \u68c0\u67e5\u8054\u901a\u6027\u95ee\u9898\u65f6\u4f7f\u7528\u7684\u68c0\u6d4b\u534a\u5f84\u5927\u5c0f,\u5355\u4f4d\u7c73</p> <code>0.8</code> <code>conn_period</code> <code>str</code> <p>[6]\u8054\u901a\u6027\u4fee\u590d\u53c2\u6570 - \u53d6\u503cfinal\u6216\u8005start, final\u8868\u793a\u5728\u62d3\u6251\u4f18\u5316\u4e4b\u540e\u4fee\u590d\u8054\u901a\u6027, start\u8868\u793a\u5728\u62d3\u6251\u4f18\u5316\u4e4b\u524d\u4fee\u590d\u8054\u901a\u6027</p> <code>'final'</code> <code>multi_core_reverse</code> <code>bool</code> <p>[7]\u5206\u533a\u9006\u5411\u53c2\u6570 - \u662f\u5426\u542f\u7528\u591a\u8fdb\u7a0b\u5bf9\u8def\u7f51\u8fdb\u884c\u5e76\u884c\u9006\u5411\u8ba1\u7b97</p> <code>False</code> <code>reverse_core_num</code> <code>int</code> <p>[7]\u5206\u533a\u9006\u5411\u53c2\u6570 - \u9006\u5411\u5e76\u884c\u8ba1\u7b97\u8981\u542f\u7528\u7684\u6838\u6570</p> <code>2</code> Source code in <code>src/gotrackit/netreverse/NetGen.py</code> <pre><code>def __init__(self, flag_name: str = 'NetGen', plain_crs: str = 'EPSG:32650', ignore_head_tail: bool = False,\n             cut_slice: bool = False, slice_num: int = 5, generate_rod: bool = False, min_rod_length: float = 5.0,\n             restrict_region_gdf: gpd.GeoDataFrame = None, save_split_link: bool = False,\n             modify_minimum_buffer: float = 0.8, save_streets_before_modify_minimum: bool = False,\n             save_streets_after_modify_minimum: bool = False, save_tpr_link: bool = False,\n             limit_col_name: str = 'road_name', ignore_dir: bool = False,\n             allow_ring: bool = False, restrict_angle: bool = True, restrict_length: bool = True,\n             accu_l_threshold: float = 200.0, angle_threshold: float = 35.0, min_length: float = 50.0,\n             multi_core_merge: bool = False, merge_core_num: int = 2,\n             save_preliminary: bool = False, save_done_topo: bool = False,\n             is_process_dup_link: bool = True, process_dup_link_buffer: float = 0.8,\n             dup_link_buffer_ratio: float = 60.0, net_out_fldr: str = r'./', net_file_type: str = 'shp',\n             is_modify_conn: bool = True, conn_buffer: float = 0.8, conn_period: str = 'final',\n             multi_core_parse: bool = False, parse_core_num: int = 2,\n             multi_core_reverse: bool = False, reverse_core_num: int = 2):\n    \"\"\"\u8def\u7f51\u9006\u5411\u7c7b\u521d\u59cb\u5316\n\n    :\u5b9a\u4e49\u8def\u7f51\u9006\u5411\u7c7b\u7684\u76f8\u5173\u53c2\u6570\n\n    Args:\n        flag_name: [1]\u603b\u4f53\u53c2\u6570 - \u9879\u76ee\u540d\u79f0\n        net_out_fldr: [1]\u603b\u4f53\u53c2\u6570 - \u8f93\u51fa\u8def\u7f51\u7684\u5b58\u50a8\u76ee\u5f55\n        plain_crs: [1]\u603b\u4f53\u53c2\u6570 - \u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb\n        net_file_type: [1]\u603b\u4f53\u53c2\u6570 - \u8def\u7f51\u7684\u8f93\u51fa\u6587\u4ef6\u7c7b\u578b\uff0cshp \u6216\u8005 geojson\n        multi_core_parse: [2]\u8def\u5f84\u89e3\u6790\u3001\u62c6\u5206\u53c2\u6570 - \u662f\u5426\u542f\u7528\u591a\u6838\u5bf9\u4e8c\u8fdb\u5236\u8def\u5f84\u6587\u4ef6\u8fdb\u884c\u89e3\u6790\n        parse_core_num: [2]\u8def\u5f84\u89e3\u6790\u3001\u62c6\u5206\u53c2\u6570 - \u591a\u6838\u89e3\u6790\u65f6\u4f7f\u7528\u7684\u6838\u6570\n        ignore_head_tail: [2]\u8def\u5f84\u89e3\u6790\u3001\u62c6\u5206\u53c2\u6570 - \u662f\u5426\u5ffd\u7565\u8def\u5f84\u9996\u5c3e\u7684\u65e0\u540d\u9053\u8def, \u8fd9\u79cd\u4e00\u822c\u662f\u5c0f\u533a\u5185\u90e8\u9053\u8def\n        cut_slice: [2]\u8def\u5f84\u89e3\u6790\u3001\u62c6\u5206\u53c2\u6570 - \u62c6\u5206\u8def\u6bb5\u65f6\uff0c\u662f\u5426\u5206\u7247\u5904\u7406\uff0c\u5185\u5b58\u4e0d\u591f\u65f6\u53ef\u4ee5\u6307\u5b9a\u4e3aTrue\n        slice_num: [2]\u8def\u5f84\u89e3\u6790\u3001\u62c6\u5206\u53c2\u6570 - \u62c6\u5206\u8def\u6bb5\u65f6\uff0c\u62c6\u5206\u4e3a\u51e0\u4e2aslice\u5904\u7406\n        generate_rod: [2]\u8def\u5f84\u89e3\u6790\u3001\u62c6\u5206\u53c2\u6570 - \u662f\u5426\u751f\u6210\u8fde\u6746, \u53ea\u6709\u5f53\u53c2\u6570ignore_head_tail\u4e3afalse\u65f6\u8be5\u53c2\u6570\u624d\u751f\u6548\n        min_rod_length: [2]\u8def\u5f84\u89e3\u6790\u3001\u62c6\u5206\u53c2\u6570 - \u6700\u5c0f\u8fde\u6746\u957f\u5ea6\uff0c\u7c73\n        restrict_region_gdf: [2]\u8def\u5f84\u89e3\u6790\u3001\u62c6\u5206\u53c2\u6570 - \u9650\u5236\u533a\u57dfgdf\uff0c\u82e5\u4f20\u5165\u6b64\u533a\u57df\uff0c\u90a3\u4e48\u4ec5\u4ec5\u53ea\u5bf9\u5728\u533a\u57df\u8303\u56f4\u5185\u7684\u8def\u7f51\u8fdb\u884c\u9006\u5411\n        save_split_link: [2]\u8def\u5f84\u89e3\u6790\u3001\u62c6\u5206\u53c2\u6570 - \u662f\u5426\u4fdd\u5b58\u62c6\u5206\u8def\u5f84\u540e\u7684link\u5c42\u6587\u4ef6\n        modify_minimum_buffer: [3]\u62d3\u6251\u751f\u6210\u53c2\u6570 - \u662f\u6781\u5c0f\u95f4\u9694\u8282\u70b9\u4f18\u5316\u7684buffer, m\n        save_streets_before_modify_minimum: [3]\u62d3\u6251\u751f\u6210\u53c2\u6570 - \u662f\u5426\u4fdd\u5b58\u4f18\u5316\u524d\u7684\u7ed3\u679c\n        save_streets_after_modify_minimum: [3]\u62d3\u6251\u751f\u6210\u53c2\u6570 - \u662f\u5426\u4fdd\u5b58\u4f18\u5316\u540e\u7684\u7ed3\u679c\n        save_tpr_link: [3]\u62d3\u6251\u751f\u6210\u53c2\u6570 - \u662f\u5426\u4fdd\u5b58\u4f18\u5316\u540e\u4e14\u8fdb\u884c\u65b9\u5411\u5904\u7406\u7684\u6587\u4ef6\n        limit_col_name: [4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u8def\u6bb5\u5408\u5e76\u65f6\uff0c\u7528\u4e8e\u9650\u5236\u8def\u6bb5\u5408\u5e76\u7684\u7ebf\u5c42\u5c5e\u6027\u5b57\u6bb5\uff0c\u9ed8\u8ba4road_name\uff0c\u5982\u679c\u4f60\u8981\u4f7f\u7528\u5176\u4ed6\u5b57\u6bb5\u6765\u9650\u5236\u5408\u5e76\uff0c\u8bf7\u81ea\u5b9a\u4e49\u8be5\u53c2\u6570\n        ignore_dir: [4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u8def\u6bb5\u5408\u5e76\u65f6\uff0c\u662f\u5426\u5ffd\u7565\u884c\u8f66\u65b9\u5411\n        allow_ring: [4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u662f\u5426\u5141\u8bb8\u8def\u6bb5\u5408\u5e76\u540e\u51fa\u73b0\u73af\n        restrict_angle: [4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u662f\u5426\u542f\u7528\u6700\u5927\u8f6c\u89d2\u9650\u5236\u6765\u7ea6\u675f\u8def\u6bb5\u5408\u5e76\n        restrict_length: [4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u662f\u5426\u542f\u7528\u6700\u5927\u8def\u6bb5\u957f\u5ea6\u9650\u5236\u6765\u7ea6\u675f\u8def\u6bb5\u5408\u5e76\n        accu_l_threshold: [4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u5141\u8bb8\u7684\u6700\u957f\u7684\u8def\u6bb5\u957f\u5ea6\uff0c\u7c73\n        angle_threshold: [4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u5141\u8bb8\u7684\u6700\u5927\u7684\u8def\u6bb5\u5185\u8f6c\u89d2\uff0c\u5ea6\n        min_length: [4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u5141\u8bb8\u7684\u6700\u5c0f\u7684\u8def\u6bb5\u957f\u5ea6\uff0c\u7c73\n        save_preliminary: [4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u662f\u5426\u4fdd\u7559\u91cd\u590d\u8def\u6bb5\u5904\u7406\u524d\u7684\u6587\u4ef6\n        multi_core_merge: [4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u662f\u5426\u542f\u7528\u591a\u8fdb\u7a0b\u8fdb\u884c\u8def\u6bb5\u5408\u5e76\n        merge_core_num: [4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u542f\u7528\u51e0\u4e2a\u6838\u8fdb\u884c\u8def\u6bb5\u5408\u5e76\n        save_done_topo: [4]\u62d3\u6251\u4f18\u5316\u53c2\u6570 - \u662f\u5426\u4fdd\u5b58\u62d3\u6251\u4f18\u5316\u540e\u7684\u8def\u7f51\n        is_process_dup_link: [5]\u91cd\u53e0\u8def\u6bb5\u5904\u7406\u53c2\u6570 - \u662f\u5426\u5904\u7406\u91cd\u590d\u8def\n        process_dup_link_buffer: [5]\u91cd\u53e0\u8def\u6bb5\u5904\u7406\u53c2\u6570 - \u5904\u7406\u91cd\u590d\u8def\u6bb5\u6240\u4f7f\u7528\u7684buffer\u957f\u5ea6\uff0c\u7c73\n        dup_link_buffer_ratio: [5]\u91cd\u53e0\u8def\u6bb5\u5904\u7406\u53c2\u6570 - dup_link_buffer_ratio\n        is_modify_conn: [6]\u8054\u901a\u6027\u4fee\u590d\u53c2\u6570 - \u662f\u5426\u68c0\u67e5\u6f5c\u5728\u7684\u8054\u901a\u6027\u95ee\u9898\u5e76\u4e14\u8fdb\u884c\u4fee\u590d\n        conn_buffer: [6]\u8054\u901a\u6027\u4fee\u590d\u53c2\u6570 - \u68c0\u67e5\u8054\u901a\u6027\u95ee\u9898\u65f6\u4f7f\u7528\u7684\u68c0\u6d4b\u534a\u5f84\u5927\u5c0f,\u5355\u4f4d\u7c73\n        conn_period: [6]\u8054\u901a\u6027\u4fee\u590d\u53c2\u6570 - \u53d6\u503cfinal\u6216\u8005start, final\u8868\u793a\u5728\u62d3\u6251\u4f18\u5316\u4e4b\u540e\u4fee\u590d\u8054\u901a\u6027, start\u8868\u793a\u5728\u62d3\u6251\u4f18\u5316\u4e4b\u524d\u4fee\u590d\u8054\u901a\u6027\n        multi_core_reverse: [7]\u5206\u533a\u9006\u5411\u53c2\u6570 - \u662f\u5426\u542f\u7528\u591a\u8fdb\u7a0b\u5bf9\u8def\u7f51\u8fdb\u884c\u5e76\u884c\u9006\u5411\u8ba1\u7b97\n        reverse_core_num: [7]\u5206\u533a\u9006\u5411\u53c2\u6570 - \u9006\u5411\u5e76\u884c\u8ba1\u7b97\u8981\u542f\u7528\u7684\u6838\u6570\n    \"\"\"\n    # overall\n    super().__init__(flag_name, plain_crs, net_out_fldr, net_file_type)\n\n    # split\n    self.ignore_head_tail = ignore_head_tail\n    self.cut_slice = cut_slice\n    self.slice_num = slice_num\n    self.generate_rod = generate_rod\n    self.min_rod_length = min_rod_length\n    self.save_split_link = save_split_link\n    self.restrict_region_gdf = restrict_region_gdf\n\n    # create node from link\n    self.modify_minimum_buffer = \\\n        conn_buffer + 0.1 if modify_minimum_buffer &lt;= conn_buffer else modify_minimum_buffer\n    self.save_streets_before_modify_minimum = save_streets_before_modify_minimum\n    self.save_streets_after_modify_minimum = save_streets_after_modify_minimum\n    self.save_tpr_link = save_tpr_link\n\n    # merge\n    self.limit_col_name = limit_col_name\n    self.ignore_dir = ignore_dir\n    self.allow_ring = allow_ring\n    self.restrict_angle = restrict_angle\n    self.restrict_length = restrict_length\n    self.accu_l_threshold = accu_l_threshold\n    self.angle_threshold = angle_threshold\n    self.min_length = min_length\n    self.save_preliminary = save_preliminary\n    self.save_done_topo = save_done_topo\n    self.multi_core_merge = multi_core_merge\n    self.merge_core_num = merge_core_num\n\n    # process dup\n    self.is_process_dup_link = is_process_dup_link\n    self.process_dup_link_buffer = process_dup_link_buffer\n    self.dup_link_buffer_ratio = dup_link_buffer_ratio\n\n    # conn\n    self.is_modify_conn = is_modify_conn\n    self.conn_buffer = conn_buffer\n    assert conn_period in ['start', 'final']\n    self.conn_period = conn_period\n\n    # attrs\n    self.__od_df = pd.DataFrame()\n    self.__region_gdf = gpd.GeoDataFrame()\n\n    # if uses multi core\n    self.multi_core_parse = multi_core_parse\n    self.parse_core_num = parse_core_num\n\n    # if uses multi core\n    self.multi_core_reverse = multi_core_reverse\n    self.reverse_core_num = reverse_core_num\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5generate_net_from_request - \u5411\u5f00\u653e\u5e73\u53f0\u8bf7\u6c42\u8def\u5f84\u540e\u5206\u6790\u8ba1\u7b97\u5f97\u5230\u8def\u7f51</p> <p>:\u6784\u9020OD -&gt; \u8bf7\u6c42\u8def\u5f84 -&gt; \u4e8c\u8fdb\u5236\u5b58\u50a8 -&gt; \u8def\u7f51\u751f\u4ea7</p> <p>Parameters:</p> Name Type Description Default <code>binary_path_fldr</code> <code>str</code> <p>[1]\u8bf7\u6c42\u8bbe\u7f6e\u53c2\u6570 - \u5b58\u50a8\u8bf7\u6c42\u8def\u5f84\u6e90\u6587\u4ef6\u7684\u76ee\u5f55</p> <code>'./'</code> <code>key_list</code> <code>list[str]</code> <p>[1]\u8bf7\u6c42\u8bbe\u7f6e\u53c2\u6570 - \u5f00\u53d1\u8005key\u503c\u5217\u8868\uff0c\u5fc5\u9700\u53c2\u6570</p> required <code>wait_until_recovery</code> <code>bool</code> <p>[1]\u8bf7\u6c42\u8bbe\u7f6e\u53c2\u6570 - \u5982\u679c\u914d\u989d\u8d85\u9650\uff0c\u662f\u5426\u4e00\u76f4\u7b49\u5f85\u76f4\u81f3\u914d\u989d\u6062\u590d</p> <code>False</code> <code>is_rnd_strategy</code> <code>bool</code> <p>[1]\u8bf7\u6c42\u8bbe\u7f6e\u53c2\u6570 - \u662f\u5426\u542f\u7528\u968f\u673a\u7b56\u7565</p> <code>False</code> <code>strategy</code> <code>str</code> <p>[1]\u8bf7\u6c42\u8bbe\u7f6e\u53c2\u6570 - \u8def\u5f84\u89c4\u5212\u7b56\u7565\u7f16\u53f7\uff0c\u53d6\u503c\u8bf7\u8bbf\u95ee: https://lbs.amap.com/api/webservice/guide/api/newroute#s1</p> <code>'32'</code> <code>cache_times</code> <code>int</code> <p>[1]\u8bf7\u6c42\u8bbe\u7f6e\u53c2\u6570 - \u8def\u5f84\u6587\u4ef6\u7f13\u5b58\u6570\uff0c\u5373\u6bcf\u8bf7\u6c42cache_times\u6b21\u7f13\u5b58\u4e00\u6b21\u6570\u636e\u5230binary_path_fldr\u4e0b</p> <code>300</code> <code>ignore_hh</code> <code>bool</code> <p>[1]\u8bf7\u6c42\u8bbe\u7f6e\u53c2\u6570 - \u662f\u5426\u5ffd\u7565\u65f6\u6bb5\u9650\u5236\u8fdb\u884c\u8bf7\u6c42</p> <code>True</code> <code>remove_his</code> <code>bool</code> <p>[1]\u8bf7\u6c42\u8bbe\u7f6e\u53c2\u6570 - \u662f\u5426\u5bf9\u5df2\u7ecf\u8bf7\u6c42\u7684OD\u91cd\u590d(\u6307\u7684\u662f\u5728\u8bf7\u6c42\u88ab\u610f\u5916\u4e2d\u65ad\u7684\u60c5\u51b5\u4e0b\uff0cod_id\u4e3a\u5224\u65ad\u4f9d\u636e)\u8bf7\u6c42</p> <code>True</code> <code>save_log_file</code> <code>bool</code> <p>[1]\u8bf7\u6c42\u8bbe\u7f6e\u53c2\u6570 - \u662f\u5426\u4fdd\u5b58\u65e5\u5fd7\u6587\u4ef6</p> <code>False</code> <code>log_fldr</code> <code>str</code> <p>[1]\u8bf7\u6c42\u8bbe\u7f6e\u53c2\u6570 - \u65e5\u5fd7\u6587\u4ef6\u7684\u5b58\u50a8\u76ee\u5f55</p> <code>None</code> <code>od_file_path</code> <code>str</code> <p>[2]OD\u6784\u9020\u53c2\u6570 - \u7528\u4e8e\u8bf7\u6c42\u7684od\u6587\u4ef6\u8def\u5f84\uff0c\u53ef\u9009\u53c2\u6570</p> <code>None</code> <code>od_df</code> <code>DataFrame</code> <p>[2]OD\u6784\u9020\u53c2\u6570 - \u7528\u4e8e\u8bf7\u6c42\u7684od\u6570\u636e\uff0c\u8be5\u53c2\u6570\u548cod_file_path\u4efb\u610f\u6307\u5b9a\u4e00\u4e2a\u5373\u53ef\uff0c\u53ef\u9009\u53c2\u6570</p> <code>None</code> <code>region_gdf</code> <code>GeoDataFrame</code> <p>[2]OD\u6784\u9020\u53c2\u6570 - \u7528\u4e8e\u6784\u9020od\u7684\u9762\u57df\u6570\u636e</p> <code>None</code> <code>od_type</code> <p>[2]OD\u6784\u9020\u53c2\u6570 - \u7528\u4e8e\u6784\u9020od\u7684\u65b9\u6cd5\uff0crand_od\u3001region_od\u3001diy_od</p> <code>'rand_od'</code> <code>min_lng</code> <code>float</code> <p>[2]OD\u6784\u9020\u53c2\u6570 - \u77e9\u5f62\u533a\u57df\u7684\u5de6\u4e0b\u89d2\u7ecf\u5ea6</p> <code>None</code> <code>min_lat</code> <code>float</code> <p>[2]OD\u6784\u9020\u53c2\u6570 - \u77e9\u5f62\u533a\u57df\u7684\u5de6\u4e0b\u89d2\u7eac\u5ea6</p> <code>None</code> <code>w</code> <code>float</code> <p>[2]OD\u6784\u9020\u53c2\u6570 - \u77e9\u5f62\u533a\u57df\u7684\u5bbd\u5ea6\uff0c\u7c73</p> <code>2000</code> <code>h</code> <code>float</code> <p>[2]OD\u6784\u9020\u53c2\u6570 - \u77e9\u5f62\u533a\u57df\u7684\u9ad8\u5ea6\uff0c\u7c73</p> <code>2000</code> <code>od_num</code> <code>int</code> <p>[2]OD\u6784\u9020\u53c2\u6570 - \u8bf7\u6c42\u7684od\u6570\uff0cod\u6570\u8d8a\u591a\uff0c\u8bf7\u6c42\u7684\u8def\u5f84\u5c31\u8d8a\u591a\uff0c\u8def\u7f51\u8986\u76d6\u7387\u5c31\u8d8a\u5b8c\u6574\uff0c\u53ea\u6709od_type\u4e3arand_od\u65f6\u8d77\u6548</p> <code>100</code> <code>gap_n</code> <code>int</code> <p>[2]OD\u6784\u9020\u53c2\u6570 - \u6a2a\u7eb5\u5411\u7f51\u683c\u4e2a\u6570\uff0c\u53ea\u6709od_type\u4e3arand_od\u65f6\u8d77\u6548</p> <code>1000</code> <code>min_od_length</code> <code>float</code> <p>[2]OD\u6784\u9020\u53c2\u6570 - od\u4e4b\u95f4\u6700\u77ed\u76f4\u7ebf\u8ddd\u79bb\uff0c\u53ea\u6709od_type\u4e3arand_od\u65f6\u8d77\u6548</p> <code>1200.0</code> <code>boundary_buffer</code> <code>float</code> <p>[2]OD\u6784\u9020\u53c2\u6570 - \u533a\u57df\u8fb9\u754cbuffer\uff0c\u7c73\uff0c</p> <code>2000</code> <p>Returns:</p> Type Description <code>None</code> <p>\u76f4\u63a5\u5728net_out_fldr\u4e0b\u751f\u6210\u8def\u7f51</p> Source code in <code>src/gotrackit/netreverse/NetGen.py</code> <pre><code>def generate_net_from_request(self, key_list: list[str], binary_path_fldr: str = r'./',\n                              od_file_path: str = None, od_df: pd.DataFrame = None,\n                              region_gdf: gpd.GeoDataFrame = None, od_type='rand_od', boundary_buffer: float = 2000,\n                              cache_times: int = 300, ignore_hh: bool = True, remove_his: bool = True,\n                              log_fldr: str = None, save_log_file: bool = False,\n                              min_lng: float = None, min_lat: float = None, w: float = 2000, h: float = 2000,\n                              od_num: int = 100, gap_n: int = 1000, min_od_length: float = 1200.0,\n                              wait_until_recovery: bool = False,\n                              is_rnd_strategy: bool = False, strategy: str = '32') -&gt; None:\n    \"\"\"\u7c7b\u65b9\u6cd5generate_net_from_request - \u5411\u5f00\u653e\u5e73\u53f0\u8bf7\u6c42\u8def\u5f84\u540e\u5206\u6790\u8ba1\u7b97\u5f97\u5230\u8def\u7f51\n\n    :\u6784\u9020OD -&gt; \u8bf7\u6c42\u8def\u5f84 -&gt; \u4e8c\u8fdb\u5236\u5b58\u50a8 -&gt; \u8def\u7f51\u751f\u4ea7\n\n    Args:\n        binary_path_fldr: [1]\u8bf7\u6c42\u8bbe\u7f6e\u53c2\u6570 - \u5b58\u50a8\u8bf7\u6c42\u8def\u5f84\u6e90\u6587\u4ef6\u7684\u76ee\u5f55\n        key_list: [1]\u8bf7\u6c42\u8bbe\u7f6e\u53c2\u6570 - \u5f00\u53d1\u8005key\u503c\u5217\u8868\uff0c\u5fc5\u9700\u53c2\u6570\n        wait_until_recovery: [1]\u8bf7\u6c42\u8bbe\u7f6e\u53c2\u6570 - \u5982\u679c\u914d\u989d\u8d85\u9650\uff0c\u662f\u5426\u4e00\u76f4\u7b49\u5f85\u76f4\u81f3\u914d\u989d\u6062\u590d\n        is_rnd_strategy: [1]\u8bf7\u6c42\u8bbe\u7f6e\u53c2\u6570 - \u662f\u5426\u542f\u7528\u968f\u673a\u7b56\u7565\n        strategy: [1]\u8bf7\u6c42\u8bbe\u7f6e\u53c2\u6570 - \u8def\u5f84\u89c4\u5212\u7b56\u7565\u7f16\u53f7\uff0c\u53d6\u503c\u8bf7\u8bbf\u95ee: https://lbs.amap.com/api/webservice/guide/api/newroute#s1\n        cache_times: [1]\u8bf7\u6c42\u8bbe\u7f6e\u53c2\u6570 - \u8def\u5f84\u6587\u4ef6\u7f13\u5b58\u6570\uff0c\u5373\u6bcf\u8bf7\u6c42cache_times\u6b21\u7f13\u5b58\u4e00\u6b21\u6570\u636e\u5230binary_path_fldr\u4e0b\n        ignore_hh: [1]\u8bf7\u6c42\u8bbe\u7f6e\u53c2\u6570 - \u662f\u5426\u5ffd\u7565\u65f6\u6bb5\u9650\u5236\u8fdb\u884c\u8bf7\u6c42\n        remove_his: [1]\u8bf7\u6c42\u8bbe\u7f6e\u53c2\u6570 - \u662f\u5426\u5bf9\u5df2\u7ecf\u8bf7\u6c42\u7684OD\u91cd\u590d(\u6307\u7684\u662f\u5728\u8bf7\u6c42\u88ab\u610f\u5916\u4e2d\u65ad\u7684\u60c5\u51b5\u4e0b\uff0cod_id\u4e3a\u5224\u65ad\u4f9d\u636e)\u8bf7\u6c42\n        save_log_file: [1]\u8bf7\u6c42\u8bbe\u7f6e\u53c2\u6570 - \u662f\u5426\u4fdd\u5b58\u65e5\u5fd7\u6587\u4ef6\n        log_fldr: [1]\u8bf7\u6c42\u8bbe\u7f6e\u53c2\u6570 - \u65e5\u5fd7\u6587\u4ef6\u7684\u5b58\u50a8\u76ee\u5f55\n        od_file_path: [2]OD\u6784\u9020\u53c2\u6570 - \u7528\u4e8e\u8bf7\u6c42\u7684od\u6587\u4ef6\u8def\u5f84\uff0c\u53ef\u9009\u53c2\u6570\n        od_df: [2]OD\u6784\u9020\u53c2\u6570 - \u7528\u4e8e\u8bf7\u6c42\u7684od\u6570\u636e\uff0c\u8be5\u53c2\u6570\u548cod_file_path\u4efb\u610f\u6307\u5b9a\u4e00\u4e2a\u5373\u53ef\uff0c\u53ef\u9009\u53c2\u6570\n        region_gdf: [2]OD\u6784\u9020\u53c2\u6570 - \u7528\u4e8e\u6784\u9020od\u7684\u9762\u57df\u6570\u636e\n        od_type: [2]OD\u6784\u9020\u53c2\u6570 - \u7528\u4e8e\u6784\u9020od\u7684\u65b9\u6cd5\uff0crand_od\u3001region_od\u3001diy_od\n        min_lng: [2]OD\u6784\u9020\u53c2\u6570 - \u77e9\u5f62\u533a\u57df\u7684\u5de6\u4e0b\u89d2\u7ecf\u5ea6\n        min_lat: [2]OD\u6784\u9020\u53c2\u6570 - \u77e9\u5f62\u533a\u57df\u7684\u5de6\u4e0b\u89d2\u7eac\u5ea6\n        w: [2]OD\u6784\u9020\u53c2\u6570 - \u77e9\u5f62\u533a\u57df\u7684\u5bbd\u5ea6\uff0c\u7c73\n        h: [2]OD\u6784\u9020\u53c2\u6570 - \u77e9\u5f62\u533a\u57df\u7684\u9ad8\u5ea6\uff0c\u7c73\n        od_num: [2]OD\u6784\u9020\u53c2\u6570 - \u8bf7\u6c42\u7684od\u6570\uff0cod\u6570\u8d8a\u591a\uff0c\u8bf7\u6c42\u7684\u8def\u5f84\u5c31\u8d8a\u591a\uff0c\u8def\u7f51\u8986\u76d6\u7387\u5c31\u8d8a\u5b8c\u6574\uff0c\u53ea\u6709od_type\u4e3arand_od\u65f6\u8d77\u6548\n        gap_n: [2]OD\u6784\u9020\u53c2\u6570 - \u6a2a\u7eb5\u5411\u7f51\u683c\u4e2a\u6570\uff0c\u53ea\u6709od_type\u4e3arand_od\u65f6\u8d77\u6548\n        min_od_length: [2]OD\u6784\u9020\u53c2\u6570 - od\u4e4b\u95f4\u6700\u77ed\u76f4\u7ebf\u8ddd\u79bb\uff0c\u53ea\u6709od_type\u4e3arand_od\u65f6\u8d77\u6548\n        boundary_buffer: [2]OD\u6784\u9020\u53c2\u6570 - \u533a\u57df\u8fb9\u754cbuffer\uff0c\u7c73\uff0c\n\n    Returns:\n        \u76f4\u63a5\u5728net_out_fldr\u4e0b\u751f\u6210\u8def\u7f51\n    \"\"\"\n    self.request_path(key_list=key_list, binary_path_fldr=binary_path_fldr,\n                      od_file_path=od_file_path,\n                      od_df=od_df, region_gdf=region_gdf, od_type=od_type,\n                      boundary_buffer=boundary_buffer,\n                      cache_times=cache_times, ignore_hh=ignore_hh,\n                      remove_his=remove_his,\n                      log_fldr=log_fldr, save_log_file=save_log_file,\n                      min_lng=min_lng, min_lat=min_lat,\n                      w=w, h=h, od_num=od_num, gap_n=gap_n,\n                      min_od_length=min_od_length, wait_until_recovery=wait_until_recovery,\n                      is_rnd_strategy=is_rnd_strategy, strategy=strategy)\n    pickle_file_name_list = os.listdir(binary_path_fldr)\n    self.generate_net_from_pickle(binary_path_fldr=binary_path_fldr,\n                                  pickle_file_name_list=pickle_file_name_list)\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5generate_net_from_pickle\uff1a\u4f9d\u636e\u4e8c\u8fdb\u5236\u8def\u5f84\u6587\u4ef6\u8ba1\u7b97\u5f97\u5230\u8def\u7f51</p> <p>\u89e3\u6790\u4e8c\u8fdb\u5236\u8def\u5f84\u6587\u4ef6, \u7136\u540e\u751f\u4ea7\u8def\u7f51</p> <p>Parameters:</p> Name Type Description Default <code>binary_path_fldr</code> <code>str</code> <p>\u8def\u5f84\u6e90\u6587\u4ef6\u7684\u5b58\u50a8\u76ee\u5f55\uff0c\u5fc5\u987b\u53c2\u6570</p> required <code>pickle_file_name_list</code> <code>list[str]</code> <p>\u9700\u8981\u89e3\u6790\u7684\u8def\u5f84\u6587\u4ef6\u540d\u79f0\u5217\u8868\uff0c\u5982\u679c\u4e0d\u4f20\u5165\u5219\u9ed8\u8ba4\u89e3\u6790\u6240\u6709\u6587\u4ef6</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None, \u76f4\u63a5\u5728net_out_fldr\u4e0b\u751f\u6210\u8def\u7f51</p> Source code in <code>src/gotrackit/netreverse/NetGen.py</code> <pre><code>def generate_net_from_pickle(self, binary_path_fldr: str, pickle_file_name_list: list[str] = None) -&gt; None:\n    \"\"\"\u7c7b\u65b9\u6cd5generate_net_from_pickle\uff1a\u4f9d\u636e\u4e8c\u8fdb\u5236\u8def\u5f84\u6587\u4ef6\u8ba1\u7b97\u5f97\u5230\u8def\u7f51\n\n    \u89e3\u6790\u4e8c\u8fdb\u5236\u8def\u5f84\u6587\u4ef6, \u7136\u540e\u751f\u4ea7\u8def\u7f51\n\n    Args:\n        binary_path_fldr: \u8def\u5f84\u6e90\u6587\u4ef6\u7684\u5b58\u50a8\u76ee\u5f55\uff0c\u5fc5\u987b\u53c2\u6570\n        pickle_file_name_list: \u9700\u8981\u89e3\u6790\u7684\u8def\u5f84\u6587\u4ef6\u540d\u79f0\u5217\u8868\uff0c\u5982\u679c\u4e0d\u4f20\u5165\u5219\u9ed8\u8ba4\u89e3\u6790\u6240\u6709\u6587\u4ef6\n\n    Returns:\n        None, \u76f4\u63a5\u5728net_out_fldr\u4e0b\u751f\u6210\u8def\u7f51\n    \"\"\"\n    attr_name_list = ['road_name']\n    if pickle_file_name_list is None or not pickle_file_name_list:\n        pickle_file_name_list = os.listdir(binary_path_fldr)\n    pgd = ParseGdPath(binary_path_fldr=binary_path_fldr,\n                      pickle_file_name_list=pickle_file_name_list,\n                      flag_name=self.flag_name,\n                      is_slice=self.cut_slice,\n                      slice_num=self.slice_num,\n                      restrict_region_gdf=self.restrict_region_gdf,\n                      attr_name_list=attr_name_list,\n                      ignore_head_tail=self.ignore_head_tail,\n                      check=False, generate_rod=self.generate_rod,\n                      min_rod_length=self.min_rod_length,\n                      is_multi_core=self.multi_core_parse,\n                      used_core_num=self.parse_core_num)\n\n    split_path_gdf = pgd.parse_path_main_multi()\n    self._generate_net_from_split_path(split_path_gdf=split_path_gdf)\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5generate_net_from_path_gdf\uff1a\u4ece\u7ebf\u5c42\u6587\u4ef6\u8ba1\u7b97\u5f97\u5230\u8def\u7f51</p> <p>\u4ece\u7ebf\u5c42\u6587\u4ef6\u8ba1\u7b97\u5f97\u5230\u8def\u7f51</p> <p>Parameters:</p> Name Type Description Default <code>path_gdf</code> <code>GeoDataFrame</code> <p>\u7ebf\u5c42gdf\u6570\u636e\uff0c\u5fc5\u987b\u53c2\u6570, \u5750\u6807\u7cfb\u5fc5\u987b\u4e3aEPSG:4326</p> required <code>slice_num</code> <code>int</code> <p>\u62c6\u5206\u8def\u6bb5\u65f6\uff0c\u62c6\u5206\u4e3a\u51e0\u4e2aslice\u5904\u7406</p> <code>1</code> <code>attr_name_list</code> <code>list</code> <p>\u9650\u5b9a\u5b57\u6bb5\u5217\u8868</p> <code>None</code> <code>cut_slice</code> <code>bool</code> <p>\u62c6\u5206\u8def\u6bb5\u65f6\uff0c\u662f\u5426\u5206\u7247\u5904\u7406\uff0c\u5185\u5b58\u4e0d\u591f\u65f6\u53ef\u4ee5\u6307\u5b9a\u4e3aTrue</p> <code>False</code> <p>Returns:</p> Type Description <p>None, \u76f4\u63a5\u5728net_out_fldr\u4e0b\u751f\u6210\u8def\u7f51</p> Source code in <code>src/gotrackit/netreverse/NetGen.py</code> <pre><code>def generate_net_from_path_gdf(self, path_gdf: gpd.GeoDataFrame,\n                               slice_num: int = 1, attr_name_list: list = None,\n                               cut_slice: bool = False):\n    \"\"\"\u7c7b\u65b9\u6cd5generate_net_from_path_gdf\uff1a\u4ece\u7ebf\u5c42\u6587\u4ef6\u8ba1\u7b97\u5f97\u5230\u8def\u7f51\n\n    \u4ece\u7ebf\u5c42\u6587\u4ef6\u8ba1\u7b97\u5f97\u5230\u8def\u7f51\n\n    Args:\n        path_gdf: \u7ebf\u5c42gdf\u6570\u636e\uff0c\u5fc5\u987b\u53c2\u6570, \u5750\u6807\u7cfb\u5fc5\u987b\u4e3aEPSG:4326\n        slice_num: \u62c6\u5206\u8def\u6bb5\u65f6\uff0c\u62c6\u5206\u4e3a\u51e0\u4e2aslice\u5904\u7406\n        attr_name_list: \u9650\u5b9a\u5b57\u6bb5\u5217\u8868\n        cut_slice: \u62c6\u5206\u8def\u6bb5\u65f6\uff0c\u662f\u5426\u5206\u7247\u5904\u7406\uff0c\u5185\u5b58\u4e0d\u591f\u65f6\u53ef\u4ee5\u6307\u5b9a\u4e3aTrue\n\n    Returns:\n        None, \u76f4\u63a5\u5728net_out_fldr\u4e0b\u751f\u6210\u8def\u7f51\n    \"\"\"\n    print(rf'##########   {self.flag_name} - Split Path')\n    if 'road_name' not in path_gdf.columns:\n        path_gdf['road_name'] = ''\n    attr_name_list = ['road_name'] if attr_name_list is None or len(attr_name_list) == 1 else attr_name_list\n    split_path_gdf = split_path_main(path_gdf=path_gdf, restrict_region_gdf=self.restrict_region_gdf,\n                                     slice_num=slice_num, attr_name_list=attr_name_list,\n                                     cut_slice=cut_slice, drop_ft_loc=True)\n\n    self._generate_net_from_split_path(split_path_gdf=split_path_gdf)\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5topology_optimization\uff1a\u62d3\u6251\u4f18\u5316</p> <p>\u5bf9\u6807\u51c6\u8def\u7f51\u8fdb\u884c\u8def\u6bb5\u5408\u5e76\u3001\u91cd\u590d\u8def\u6bb5\u6d88\u9664</p> <p>Parameters:</p> Name Type Description Default <code>link_gdf</code> <code>GeoDataFrame</code> <p>\u7ebf\u5c42gdf, \u5750\u6807\u7cfb\u5fc5\u987b\u4e3aEPSG:4326</p> required <code>node_gdf</code> <code>GeoDataFrame</code> <p>\u70b9\u5c42gdf, \u5750\u6807\u7cfb\u5fc5\u987b\u4e3aEPSG:4326</p> required <code>out_fldr</code> <code>str</code> <p>\u8f93\u51fa\u8def\u7f51\u7684\u5b58\u50a8\u76ee\u5f55</p> <code>'./'</code> <p>Returns:</p> Type Description <code>tuple[GeoDataFrame, GeoDataFrame, dict]</code> <p>\u7ebf\u5c42gdf, \u70b9\u5c42gdf, \u4fee\u590d\u70b9\u4f4d\u7a7a\u95f4\u4fe1\u606f</p> Source code in <code>src/gotrackit/netreverse/NetGen.py</code> <pre><code>def topology_optimization(self, link_gdf: gpd.GeoDataFrame, node_gdf: gpd.GeoDataFrame,\n                          out_fldr: str = r'./') -&gt; tuple[gpd.GeoDataFrame, gpd.GeoDataFrame, dict]:\n    \"\"\"\u7c7b\u65b9\u6cd5topology_optimization\uff1a\u62d3\u6251\u4f18\u5316\n\n    \u5bf9\u6807\u51c6\u8def\u7f51\u8fdb\u884c\u8def\u6bb5\u5408\u5e76\u3001\u91cd\u590d\u8def\u6bb5\u6d88\u9664\n\n    Args:\n        link_gdf: \u7ebf\u5c42gdf, \u5750\u6807\u7cfb\u5fc5\u987b\u4e3aEPSG:4326\n        node_gdf: \u70b9\u5c42gdf, \u5750\u6807\u7cfb\u5fc5\u987b\u4e3aEPSG:4326\n        out_fldr: \u8f93\u51fa\u8def\u7f51\u7684\u5b58\u50a8\u76ee\u5f55\n\n    Returns:\n        \u7ebf\u5c42gdf, \u70b9\u5c42gdf, \u4fee\u590d\u70b9\u4f4d\u7a7a\u95f4\u4fe1\u606f\n    \"\"\"\n    if self.limit_col_name not in link_gdf.columns:\n        self.limit_col_name = None\n    link_gdf, node_gdf, dup_info_dict = optimize(link_gdf=link_gdf, node_gdf=node_gdf,\n                                                 ignore_dir=self.ignore_dir,\n                                                 allow_ring=self.allow_ring,\n                                                 limit_col_name=self.limit_col_name,\n                                                 plain_prj=self.plain_crs,\n                                                 accu_l_threshold=self.accu_l_threshold,\n                                                 angle_threshold=self.angle_threshold,\n                                                 restrict_length=self.restrict_length,\n                                                 restrict_angle=self.restrict_angle,\n                                                 save_preliminary=False,\n                                                 out_fldr=self.net_out_fldr,\n                                                 is_process_dup_link=False,\n                                                 process_dup_link_buffer=self.process_dup_link_buffer,\n                                                 min_length=self.min_length,\n                                                 dup_link_buffer_ratio=self.dup_link_buffer_ratio,\n                                                 multi_core=self.multi_core_merge, core_num=self.merge_core_num)\n    if out_fldr is not None:\n        save_file(data_item=link_gdf, out_fldr=out_fldr, file_type=self.net_file_type, file_name='opt_link')\n        save_file(data_item=node_gdf, out_fldr=out_fldr, file_type=self.net_file_type, file_name='opt_node')\n    return link_gdf, node_gdf, dup_info_dict\n</code></pre> <p> </p> <p>\u7c7b\u9759\u6001\u65b9\u6cd5create_node_from_link\uff1a\u521b\u5efa\u70b9\u5c42</p> <p>\u751f\u4ea7\u70b9\u7ebf\u62d3\u6251\u5173\u8054, \u66f4\u65b0\u7ebf\u5c42\u4fe1\u606f, \u540c\u65f6\u751f\u4ea7\u70b9\u5c42</p> <p>Parameters:</p> Name Type Description Default <code>link_gdf</code> <code>GeoDataFrame</code> <p>\u8def\u7f51\u7ebf\u5c42gdf\u6570\u636e\uff0c\u5fc5\u9700\u6570\u636e</p> required <code>out_fldr</code> <code>str</code> <p>\u8f93\u51fa\u6587\u4ef6\u7684\u5b58\u50a8\u76ee\u5f55</p> <code>None</code> <code>update_link_field_list</code> <code>list[str]</code> <p>\u9700\u8981\u66f4\u65b0\u7684\u5b57\u6bb5\u5217\u8868, \u751f\u4ea7\u62d3\u6251\u5173\u8054\u540e\u9700\u8981\u66f4\u65b0\u7684\u7ebf\u5c42\u57fa\u672c\u5b57\u6bb5\uff0c\u4ece(link_id, from_node, to_node, dir, length)\u4e2d\u9009\u53d6</p> <code>None</code> <code>using_from_to</code> <code>bool</code> <p>\u662f\u5426\u4f7f\u7528\u8f93\u5165\u7ebf\u5c42\u4e2d\u7684from_node\u5b57\u6bb5\u548cto_node\u5b57\u6bb5</p> <code>False</code> <code>fill_dir</code> <code>int</code> <p>\u7528\u4e8e\u586b\u5145dir\u65b9\u5411\u5b57\u6bb5\u7684\u503c\uff0c\u5982\u679cupdate_link_field_list\u4e2d\u5305\u542bdir\u5b57\u6bb5\uff0c\u90a3\u4e48\u8be5\u53c2\u6570\u9700\u8981\u4f20\u5165\u503c\uff0c\u5141\u8bb8\u7684\u503c\u4e3a1\u6216\u80050</p> <code>0</code> <code>plain_crs</code> <code>str</code> <p>\u6240\u4f7f\u7528\u7684\u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb</p> <code>'EPSG:32650'</code> <code>ignore_merge_rule</code> <code>bool</code> <p>\u662f\u5426\u5ffd\u7565\u6781\u5c0f\u95f4\u9694\u4f18\u5316\u7684\u89c4\u5219</p> <code>True</code> <code>execute_modify</code> <code>bool</code> <p>\u662f\u5426\u6267\u884c\u6781\u5c0f\u95f4\u9694\u8282\u70b9\u4f18\u5316</p> <code>True</code> <code>modify_minimum_buffer</code> <code>float</code> <p>\u6781\u5c0f\u95f4\u9694\u8282\u70b9\u4f18\u5316\u7684buffer, \u7c73</p> <code>0.8</code> <code>auxiliary_judge_field</code> <code>str</code> <p>\u7528\u4e8e\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5408\u5e76\u7684\u7ebf\u5c42\u5b57\u6bb5, \u53ea\u6709\u5f53ignore_merge_rule\u4e3aFalse\u624d\u8d77\u6548</p> <code>None</code> <code>save_streets_before_modify_minimum</code> <code>bool</code> <p>\u662f\u5426\u5b58\u50a8\u6781\u5c0f\u95f4\u9694\u4f18\u5316\u524d\u7684\u6570\u636e</p> <code>False</code> <code>save_streets_after_modify_minimum</code> <code>bool</code> <p>\u662f\u5426\u5b58\u50a8\u6781\u5c0f\u95f4\u9694\u4f18\u5316\u540e\u7684\u6570\u636e</p> <code>True</code> <code>net_file_type</code> <code>str</code> <p>\u8f93\u51fa\u8def\u7f51\u6587\u4ef6\u7684\u5b58\u50a8\u7c7b\u578b\uff0cshp\u6216\u8005geojson</p> <code>'shp'</code> <p>Returns:</p> Type Description <code>tuple[GeoDataFrame, GeoDataFrame, GeoDataFrame]</code> <p>\u7ebf\u5c42gdf, \u70b9\u5c42gdf</p> Source code in <code>src/gotrackit/netreverse/NetGen.py</code> <pre><code>@staticmethod\ndef create_node_from_link(link_gdf: gpd.GeoDataFrame, update_link_field_list: list[str] = None,\n                          using_from_to: bool = False, fill_dir: int = 0, plain_crs: str = 'EPSG:32650',\n                          ignore_merge_rule: bool = True, modify_minimum_buffer: float = 0.8,\n                          execute_modify: bool = True, auxiliary_judge_field: str = None,\n                          out_fldr: str = None, save_streets_before_modify_minimum: bool = False,\n                          save_streets_after_modify_minimum: bool = True, net_file_type: str = 'shp') -&gt; \\\n        tuple[gpd.GeoDataFrame, gpd.GeoDataFrame, gpd.GeoDataFrame]:\n    \"\"\"\u7c7b\u9759\u6001\u65b9\u6cd5create_node_from_link\uff1a\u521b\u5efa\u70b9\u5c42\n\n    \u751f\u4ea7\u70b9\u7ebf\u62d3\u6251\u5173\u8054, \u66f4\u65b0\u7ebf\u5c42\u4fe1\u606f, \u540c\u65f6\u751f\u4ea7\u70b9\u5c42\n\n    Args:\n        link_gdf: \u8def\u7f51\u7ebf\u5c42gdf\u6570\u636e\uff0c\u5fc5\u9700\u6570\u636e\n        out_fldr: \u8f93\u51fa\u6587\u4ef6\u7684\u5b58\u50a8\u76ee\u5f55\n        update_link_field_list: \u9700\u8981\u66f4\u65b0\u7684\u5b57\u6bb5\u5217\u8868, \u751f\u4ea7\u62d3\u6251\u5173\u8054\u540e\u9700\u8981\u66f4\u65b0\u7684\u7ebf\u5c42\u57fa\u672c\u5b57\u6bb5\uff0c\u4ece(link_id, from_node, to_node, dir, length)\u4e2d\u9009\u53d6\n        using_from_to: \u662f\u5426\u4f7f\u7528\u8f93\u5165\u7ebf\u5c42\u4e2d\u7684from_node\u5b57\u6bb5\u548cto_node\u5b57\u6bb5\n        fill_dir: \u7528\u4e8e\u586b\u5145dir\u65b9\u5411\u5b57\u6bb5\u7684\u503c\uff0c\u5982\u679cupdate_link_field_list\u4e2d\u5305\u542bdir\u5b57\u6bb5\uff0c\u90a3\u4e48\u8be5\u53c2\u6570\u9700\u8981\u4f20\u5165\u503c\uff0c\u5141\u8bb8\u7684\u503c\u4e3a1\u6216\u80050\n        plain_crs: \u6240\u4f7f\u7528\u7684\u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb\n        ignore_merge_rule: \u662f\u5426\u5ffd\u7565\u6781\u5c0f\u95f4\u9694\u4f18\u5316\u7684\u89c4\u5219\n        execute_modify: \u662f\u5426\u6267\u884c\u6781\u5c0f\u95f4\u9694\u8282\u70b9\u4f18\u5316\n        modify_minimum_buffer: \u6781\u5c0f\u95f4\u9694\u8282\u70b9\u4f18\u5316\u7684buffer, \u7c73\n        auxiliary_judge_field: \u7528\u4e8e\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5408\u5e76\u7684\u7ebf\u5c42\u5b57\u6bb5, \u53ea\u6709\u5f53ignore_merge_rule\u4e3aFalse\u624d\u8d77\u6548\n        save_streets_before_modify_minimum: \u662f\u5426\u5b58\u50a8\u6781\u5c0f\u95f4\u9694\u4f18\u5316\u524d\u7684\u6570\u636e\n        save_streets_after_modify_minimum: \u662f\u5426\u5b58\u50a8\u6781\u5c0f\u95f4\u9694\u4f18\u5316\u540e\u7684\u6570\u636e\n        net_file_type: \u8f93\u51fa\u8def\u7f51\u6587\u4ef6\u7684\u5b58\u50a8\u7c7b\u578b\uff0cshp\u6216\u8005geojson\n\n    Returns:\n        \u7ebf\u5c42gdf, \u70b9\u5c42gdf\n\n    \"\"\"\n    assert net_file_type in ['shp', 'geojson']\n    link_gdf, node_gdf, node_group_status_gdf = \\\n        generate_node_from_link(link_gdf=link_gdf,\n                                update_link_field_list=update_link_field_list,\n                                using_from_to=using_from_to,\n                                fill_dir=fill_dir, plain_prj=plain_crs,\n                                ignore_merge_rule=ignore_merge_rule,\n                                modify_minimum_buffer=modify_minimum_buffer,\n                                execute_modify=execute_modify,\n                                auxiliary_judge_field=auxiliary_judge_field,\n                                out_fldr=out_fldr,\n                                net_file_type=net_file_type,\n                                save_streets_after_modify_minimum=save_streets_after_modify_minimum,\n                                save_streets_before_modify_minimum=save_streets_before_modify_minimum)\n    return link_gdf, node_gdf, node_group_status_gdf\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5request_path\uff1a\u8bf7\u6c42\u8def\u5f84\u5b58\u50a8\u4e3a\u4e8c\u8fdb\u5236\u6587\u4ef6</p> <p>\u6784\u9020OD -&gt; \u8bf7\u6c42 -&gt; \u4e8c\u8fdb\u5236\u5b58\u50a8, \u8981\u6c42\u8f93\u5165\u7684\u9762\u57df\u5fc5\u987b\u4e3aEPSG:4326</p> <p>Parameters:</p> Name Type Description Default <code>binary_path_fldr</code> <code>str</code> <p>\u5b58\u50a8\u8bf7\u6c42\u8def\u5f84\u6e90\u6587\u4ef6\u7684\u76ee\u5f55</p> <code>'./'</code> <code>key_list</code> <code>list[str]</code> <p>\u5f00\u53d1\u8005key\u503c\u5217\u8868\uff0c\u5fc5\u9700\u53c2\u6570</p> required <code>wait_until_recovery</code> <code>bool</code> <p>\u5982\u679c\u914d\u989d\u8d85\u9650\uff0c\u662f\u5426\u4e00\u76f4\u7b49\u5f85\u76f4\u81f3\u914d\u989d\u6062\u590d</p> <code>False</code> <code>is_rnd_strategy</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u968f\u673a\u7b56\u7565</p> <code>False</code> <code>strategy</code> <code>str</code> <p>\u8def\u5f84\u89c4\u5212\u7b56\u7565\u7f16\u53f7\uff0c\u53d6\u503c\u8bf7\u8bbf\u95ee: https://lbs.amap.com/api/webservice/guide/api/newroute#s1</p> <code>'32'</code> <code>cache_times</code> <code>int</code> <p>\u8def\u5f84\u6587\u4ef6\u7f13\u5b58\u6570\uff0c\u5373\u6bcf\u8bf7\u6c42cache_times\u6b21\u7f13\u5b58\u4e00\u6b21\u6570\u636e\u5230binary_path_fldr\u4e0b</p> <code>300</code> <code>ignore_hh</code> <code>bool</code> <p>\u662f\u5426\u5ffd\u7565\u65f6\u6bb5\u9650\u5236\u8fdb\u884c\u8bf7\u6c42</p> <code>True</code> <code>remove_his</code> <code>bool</code> <p>\u662f\u5426\u5bf9\u5df2\u7ecf\u8bf7\u6c42\u7684OD\u91cd\u590d(\u6307\u7684\u662f\u5728\u8bf7\u6c42\u88ab\u610f\u5916\u4e2d\u65ad\u7684\u60c5\u51b5\u4e0b\uff0cod_id\u4e3a\u5224\u65ad\u4f9d\u636e)\u8bf7\u6c42</p> <code>True</code> <code>save_log_file</code> <code>bool</code> <p>\u662f\u5426\u4fdd\u5b58\u65e5\u5fd7\u6587\u4ef6</p> <code>False</code> <code>log_fldr</code> <code>str</code> <p>\u65e5\u5fd7\u6587\u4ef6\u7684\u5b58\u50a8\u76ee\u5f55</p> <code>None</code> <code>od_file_path</code> <code>str</code> <p>(2.OD\u6784\u9020\u53c2\u6570)\u7528\u4e8e\u8bf7\u6c42\u7684od\u6587\u4ef6\u8def\u5f84\uff0c\u53ef\u9009\u53c2\u6570</p> <code>None</code> <code>od_df</code> <code>DataFrame</code> <p>(2.OD\u6784\u9020\u53c2\u6570)\u7528\u4e8e\u8bf7\u6c42\u7684od\u6570\u636e\uff0c\u8be5\u53c2\u6570\u548cod_file_path\u4efb\u610f\u6307\u5b9a\u4e00\u4e2a\u5373\u53ef\uff0c\u53ef\u9009\u53c2\u6570</p> <code>None</code> <code>region_gdf</code> <code>GeoDataFrame</code> <p>(2.OD\u6784\u9020\u53c2\u6570)\u7528\u4e8e\u6784\u9020od\u7684\u9762\u57df\u6570\u636e</p> <code>None</code> <code>od_type</code> <p>(2.OD\u6784\u9020\u53c2\u6570)\u7528\u4e8e\u6784\u9020od\u7684\u65b9\u6cd5\uff0crand_od\u3001region_od\u3001diy_od</p> <code>'rand_od'</code> <code>min_lng</code> <code>float</code> <p>(2.OD\u6784\u9020\u53c2\u6570)\u77e9\u5f62\u533a\u57df\u7684\u5de6\u4e0b\u89d2\u7ecf\u5ea6</p> <code>None</code> <code>min_lat</code> <code>float</code> <p>(2.OD\u6784\u9020\u53c2\u6570)\u77e9\u5f62\u533a\u57df\u7684\u5de6\u4e0b\u89d2\u7eac\u5ea6</p> <code>None</code> <code>w</code> <code>float</code> <p>(2.OD\u6784\u9020\u53c2\u6570)\u77e9\u5f62\u533a\u57df\u7684\u5bbd\u5ea6\uff0c\u7c73</p> <code>2000</code> <code>h</code> <code>float</code> <p>(2.OD\u6784\u9020\u53c2\u6570)\u77e9\u5f62\u533a\u57df\u7684\u9ad8\u5ea6\uff0c\u7c73</p> <code>2000</code> <code>od_num</code> <code>int</code> <p>(2.OD\u6784\u9020\u53c2\u6570)\u8bf7\u6c42\u7684od\u6570\uff0cod\u6570\u8d8a\u591a\uff0c\u8bf7\u6c42\u7684\u8def\u5f84\u5c31\u8d8a\u591a\uff0c\u8def\u7f51\u8986\u76d6\u7387\u5c31\u8d8a\u5b8c\u6574\uff0c\u53ea\u6709od_type\u4e3arand_od\u65f6\u8d77\u6548</p> <code>100</code> <code>gap_n</code> <code>int</code> <p>(2.OD\u6784\u9020\u53c2\u6570)\u6a2a\u7eb5\u5411\u7f51\u683c\u4e2a\u6570\uff0c\u53ea\u6709od_type\u4e3arand_od\u65f6\u8d77\u6548</p> <code>1000</code> <code>min_od_length</code> <code>float</code> <p>(2.OD\u6784\u9020\u53c2\u6570)od\u4e4b\u95f4\u6700\u77ed\u76f4\u7ebf\u8ddd\u79bb\uff0c\u53ea\u6709od_type\u4e3arand_od\u65f6\u8d77\u6548</p> <code>1200.0</code> <code>boundary_buffer</code> <code>float</code> <p>(2.OD\u6784\u9020\u53c2\u6570)\u533a\u57df\u8fb9\u754cbuffer\uff0c\u7c73\uff0c</p> <code>2000</code> <p>Returns:</p> Type Description <code>tuple[bool, list[str]]</code> <p>if_end_request, new_file_list</p> Source code in <code>src/gotrackit/netreverse/NetGen.py</code> <pre><code>def request_path(self, key_list: list[str], binary_path_fldr: str = r'./',\n                 od_file_path: str = None, od_df: pd.DataFrame = None,\n                 region_gdf: gpd.GeoDataFrame = None, od_type='rand_od', boundary_buffer: float = 2000,\n                 cache_times: int = 300, ignore_hh: bool = True, remove_his: bool = True,\n                 log_fldr: str = None, save_log_file: bool = False,\n                 min_lng: float = None, min_lat: float = None, w: float = 2000, h: float = 2000,\n                 od_num: int = 100, gap_n: int = 1000, min_od_length: float = 1200.0,\n                 is_rnd_strategy: bool = False, strategy: str = '32', wait_until_recovery: bool = False) \\\n        -&gt; tuple[bool, list[str]]:\n    \"\"\"\u7c7b\u65b9\u6cd5request_path\uff1a\u8bf7\u6c42\u8def\u5f84\u5b58\u50a8\u4e3a\u4e8c\u8fdb\u5236\u6587\u4ef6\n\n    \u6784\u9020OD -&gt; \u8bf7\u6c42 -&gt; \u4e8c\u8fdb\u5236\u5b58\u50a8, \u8981\u6c42\u8f93\u5165\u7684\u9762\u57df\u5fc5\u987b\u4e3aEPSG:4326\n\n    Args:\n        binary_path_fldr: \u5b58\u50a8\u8bf7\u6c42\u8def\u5f84\u6e90\u6587\u4ef6\u7684\u76ee\u5f55\n        key_list: \u5f00\u53d1\u8005key\u503c\u5217\u8868\uff0c\u5fc5\u9700\u53c2\u6570\n        wait_until_recovery: \u5982\u679c\u914d\u989d\u8d85\u9650\uff0c\u662f\u5426\u4e00\u76f4\u7b49\u5f85\u76f4\u81f3\u914d\u989d\u6062\u590d\n        is_rnd_strategy: \u662f\u5426\u542f\u7528\u968f\u673a\u7b56\u7565\n        strategy: \u8def\u5f84\u89c4\u5212\u7b56\u7565\u7f16\u53f7\uff0c\u53d6\u503c\u8bf7\u8bbf\u95ee: https://lbs.amap.com/api/webservice/guide/api/newroute#s1\n        cache_times: \u8def\u5f84\u6587\u4ef6\u7f13\u5b58\u6570\uff0c\u5373\u6bcf\u8bf7\u6c42cache_times\u6b21\u7f13\u5b58\u4e00\u6b21\u6570\u636e\u5230binary_path_fldr\u4e0b\n        ignore_hh: \u662f\u5426\u5ffd\u7565\u65f6\u6bb5\u9650\u5236\u8fdb\u884c\u8bf7\u6c42\n        remove_his: \u662f\u5426\u5bf9\u5df2\u7ecf\u8bf7\u6c42\u7684OD\u91cd\u590d(\u6307\u7684\u662f\u5728\u8bf7\u6c42\u88ab\u610f\u5916\u4e2d\u65ad\u7684\u60c5\u51b5\u4e0b\uff0cod_id\u4e3a\u5224\u65ad\u4f9d\u636e)\u8bf7\u6c42\n        save_log_file: \u662f\u5426\u4fdd\u5b58\u65e5\u5fd7\u6587\u4ef6\n        log_fldr: \u65e5\u5fd7\u6587\u4ef6\u7684\u5b58\u50a8\u76ee\u5f55\n        od_file_path: (2.OD\u6784\u9020\u53c2\u6570)\u7528\u4e8e\u8bf7\u6c42\u7684od\u6587\u4ef6\u8def\u5f84\uff0c\u53ef\u9009\u53c2\u6570\n        od_df: (2.OD\u6784\u9020\u53c2\u6570)\u7528\u4e8e\u8bf7\u6c42\u7684od\u6570\u636e\uff0c\u8be5\u53c2\u6570\u548cod_file_path\u4efb\u610f\u6307\u5b9a\u4e00\u4e2a\u5373\u53ef\uff0c\u53ef\u9009\u53c2\u6570\n        region_gdf: (2.OD\u6784\u9020\u53c2\u6570)\u7528\u4e8e\u6784\u9020od\u7684\u9762\u57df\u6570\u636e\n        od_type: (2.OD\u6784\u9020\u53c2\u6570)\u7528\u4e8e\u6784\u9020od\u7684\u65b9\u6cd5\uff0crand_od\u3001region_od\u3001diy_od\n        min_lng: (2.OD\u6784\u9020\u53c2\u6570)\u77e9\u5f62\u533a\u57df\u7684\u5de6\u4e0b\u89d2\u7ecf\u5ea6\n        min_lat: (2.OD\u6784\u9020\u53c2\u6570)\u77e9\u5f62\u533a\u57df\u7684\u5de6\u4e0b\u89d2\u7eac\u5ea6\n        w: (2.OD\u6784\u9020\u53c2\u6570)\u77e9\u5f62\u533a\u57df\u7684\u5bbd\u5ea6\uff0c\u7c73\n        h: (2.OD\u6784\u9020\u53c2\u6570)\u77e9\u5f62\u533a\u57df\u7684\u9ad8\u5ea6\uff0c\u7c73\n        od_num: (2.OD\u6784\u9020\u53c2\u6570)\u8bf7\u6c42\u7684od\u6570\uff0cod\u6570\u8d8a\u591a\uff0c\u8bf7\u6c42\u7684\u8def\u5f84\u5c31\u8d8a\u591a\uff0c\u8def\u7f51\u8986\u76d6\u7387\u5c31\u8d8a\u5b8c\u6574\uff0c\u53ea\u6709od_type\u4e3arand_od\u65f6\u8d77\u6548\n        gap_n: (2.OD\u6784\u9020\u53c2\u6570)\u6a2a\u7eb5\u5411\u7f51\u683c\u4e2a\u6570\uff0c\u53ea\u6709od_type\u4e3arand_od\u65f6\u8d77\u6548\n        min_od_length: (2.OD\u6784\u9020\u53c2\u6570)od\u4e4b\u95f4\u6700\u77ed\u76f4\u7ebf\u8ddd\u79bb\uff0c\u53ea\u6709od_type\u4e3arand_od\u65f6\u8d77\u6548\n        boundary_buffer: (2.OD\u6784\u9020\u53c2\u6570)\u533a\u57df\u8fb9\u754cbuffer\uff0c\u7c73\uff0c\n\n    Returns:\n        if_end_request, new_file_list\n    \"\"\"\n    assert od_type in ['rand_od', 'region_od', 'diy_od']\n    fmod = FormatOD(plain_crs=self.plain_crs)\n    if od_type == 'rand_od':\n        if region_gdf is None or region_gdf.empty:\n            region_gdf = generate_region(min_lng=min_lng, min_lat=min_lat, w=w, h=h, plain_crs=self.plain_crs)\n\n        od_df = fmod.format_region_rnd_od(region_gdf=region_gdf, flag_name=self.flag_name, od_num=od_num,\n                                          gap_n=gap_n, length_limit=min_od_length,\n                                          boundary_buffer=boundary_buffer)\n        self.__region_gdf = region_gdf\n        od_file_path = None\n    elif od_type == 'region_od':\n        od_df = fmod.format_region_od(region_gdf=region_gdf)\n        od_file_path = None\n    elif od_type == 'diy_od':\n        if od_df is None or od_df.empty:\n            od_df = pd.read_csv(od_file_path)\n            od_file_path = None\n\n    self.__od_df = od_df\n\n    path_request_obj = CarPath(key_list=key_list, input_file_path=od_file_path, od_df=od_df,\n                               cache_times=cache_times, ignore_hh=ignore_hh, out_fldr=binary_path_fldr,\n                               file_flag=self.flag_name, log_fldr=log_fldr, save_log_file=save_log_file,\n                               wait_until_recovery=wait_until_recovery)\n\n    # \u662f\u5426\u7ed3\u675f\u8bf7\u6c42, \u65b0\u751f\u4ea7\u7684\u8def\u7f51\u6587\u4ef6\n    if_end_request, new_file_list = path_request_obj.get_path(remove_his=remove_his, strategy=strategy,\n                                                              is_rnd_strategy=is_rnd_strategy)\n\n    return if_end_request, new_file_list\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5modify_conn\uff1a\u8054\u901a\u6027\u4fee\u590d</p> <p>Parameters:</p> Name Type Description Default <code>link_gdf</code> <code>GeoDataFrame</code> <p>\u7ebf\u5c42gdf, \u8981\u6c42\u8f93\u5165\u5fc5\u987b\u4e3aEPSG:4326</p> required <code>node_gdf</code> <code>GeoDataFrame</code> <p>\u70b9\u5c42gdf, \u8981\u6c42\u8f93\u5165\u5fc5\u987b\u4e3aEPSG:4326</p> required <code>book_mark_name</code> <code>str</code> <p>\u7a7a\u95f4\u4e66\u7b7e\u540d\u79f0</p> <code>'test'</code> <code>generate_mark</code> <code>bool</code> <p>\u662f\u5426\u751f\u6210\u7a7a\u95f4\u4e66\u7b7e\uff0c\u5728net_out_fldr\u4e0b\u751f\u6210</p> <code>False</code> <code>link_name_field</code> <code>str</code> <p>\u53c2\u6570\u6682\u672a\u542f\u7528</p> <code>'road_name'</code> <p>Returns:</p> Type Description <code>tuple[GeoDataFrame, GeoDataFrame]</code> <p>\u7ebf\u5c42gdf, \u70b9\u5c42gdf, \u4fee\u590d\u70b9\u4f4d\u7a7a\u95f4\u4fe1\u606f</p> Source code in <code>src/gotrackit/netreverse/NetGen.py</code> <pre><code>def modify_conn(self, link_gdf: gpd.GeoDataFrame, node_gdf: gpd.GeoDataFrame,\n                book_mark_name: str = 'test', link_name_field: str = 'road_name', generate_mark: bool = False) -&gt; \\\n        tuple[gpd.GeoDataFrame, gpd.GeoDataFrame]:\n    \"\"\"\u7c7b\u65b9\u6cd5modify_conn\uff1a\u8054\u901a\u6027\u4fee\u590d\n\n    Args:\n        link_gdf: \u7ebf\u5c42gdf, \u8981\u6c42\u8f93\u5165\u5fc5\u987b\u4e3aEPSG:4326\n        node_gdf: \u70b9\u5c42gdf, \u8981\u6c42\u8f93\u5165\u5fc5\u987b\u4e3aEPSG:4326\n        book_mark_name: \u7a7a\u95f4\u4e66\u7b7e\u540d\u79f0\n        generate_mark: \u662f\u5426\u751f\u6210\u7a7a\u95f4\u4e66\u7b7e\uff0c\u5728net_out_fldr\u4e0b\u751f\u6210\n        link_name_field: \u53c2\u6570\u6682\u672a\u542f\u7528\n\n    Returns:\n        \u7ebf\u5c42gdf, \u70b9\u5c42gdf, \u4fee\u590d\u70b9\u4f4d\u7a7a\u95f4\u4fe1\u606f\n    \"\"\"\n    link_gdf, node_gdf = self.fix_minimum_gap(node_gdf=node_gdf, link_gdf=link_gdf)\n    net = Net(link_gdf=link_gdf, node_gdf=node_gdf, create_single=False, plane_crs=self.plain_crs,\n              delete_circle=False)\n    conn = Conn(net=net, check_buffer=self.conn_buffer)\n    link_gdf, node_gdf = conn.execute(out_fldr=self.net_out_fldr, file_name=book_mark_name,\n                                      generate_mark=generate_mark)\n    link_gdf.reset_index(inplace=True, drop=True)\n    node_gdf.reset_index(inplace=True, drop=True)\n    save_file(data_item=link_gdf, file_type=self.net_file_type, file_name='modifiedConnLink',\n              out_fldr=self.net_out_fldr)\n    save_file(data_item=node_gdf, file_type=self.net_file_type, file_name='modifiedConnNode',\n              out_fldr=self.net_out_fldr)\n    return link_gdf, node_gdf\n</code></pre> <p> </p> <p>\u7c7b\u9759\u6001\u65b9\u6cd5clean_link_geo\uff1a\u6e05\u6d17\u7ebf\u5c42</p> <p>\u53bb\u9664Z\u5750\u6807\u3001\u53bb\u9664multi\u7c7b\u578b\u3001\u62c6\u5206\u81ea\u76f8\u4ea4\u5bf9\u8c61\u3001\u53bb\u9664\u7ebf\u5c42\u91cd\u53e0\u6298\u70b9</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>GeoDataFrame</code> <p>\u7ebf\u5c42gdf</p> required <code>plain_crs</code> <code>str</code> <p>\u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb</p> <code>'EPSG:32650'</code> <code>l_threshold</code> <code>float</code> <p>\u91cd\u53e0\u6298\u70b9\u68c0\u6d4b\u9608\u503c, \u7c73</p> <code>0.5</code> <p>Returns:</p> Type Description <code>GeoDataFrame</code> <p>\u7ebf\u5c42gdf</p> Source code in <code>src/gotrackit/netreverse/NetGen.py</code> <pre><code>@staticmethod\ndef clean_link_geo(gdf: gpd.GeoDataFrame, plain_crs: str = 'EPSG:32650', l_threshold: float = 0.5) -&gt; gpd.GeoDataFrame:\n    \"\"\"\u7c7b\u9759\u6001\u65b9\u6cd5clean_link_geo\uff1a\u6e05\u6d17\u7ebf\u5c42\n\n    \u53bb\u9664Z\u5750\u6807\u3001\u53bb\u9664multi\u7c7b\u578b\u3001\u62c6\u5206\u81ea\u76f8\u4ea4\u5bf9\u8c61\u3001\u53bb\u9664\u7ebf\u5c42\u91cd\u53e0\u6298\u70b9\n\n    Args:\n        gdf: \u7ebf\u5c42gdf\n        plain_crs: \u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb\n        l_threshold: \u91cd\u53e0\u6298\u70b9\u68c0\u6d4b\u9608\u503c, \u7c73\n\n    Returns:\n        \u7ebf\u5c42gdf\n    \"\"\"\n    return clean_link_geo(gdf=gdf, plain_crs=plain_crs, l_threshold=l_threshold)\n</code></pre> <p> </p> <p>\u7c7b\u9759\u6001\u65b9\u6cd5remapping_link_node_id\uff1aid\u91cd\u6620\u5c04</p> <p>\u4e3alink\u3001node\u5c42\u6620\u5c04\u65b0\u7684ID\u7f16\u53f7, \u5728\u539f\u5bf9\u8c61\u4e0a\u76f4\u63a5\u4fee\u6539</p> <p>Parameters:</p> Name Type Description Default <code>link_gdf</code> <code>GeoDataFrame or DataFrame</code> <p>\u7ebf\u5c42gdf</p> required <code>node_gdf</code> <code>GeoDataFrame or DataFrame</code> <p>\u7ebf\u5c42gdf</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>src/gotrackit/netreverse/NetGen.py</code> <pre><code>@staticmethod\ndef remapping_link_node_id(link_gdf: gpd.GeoDataFrame or pd.DataFrame, node_gdf: gpd.GeoDataFrame or pd.DataFrame):\n    \"\"\"\u7c7b\u9759\u6001\u65b9\u6cd5remapping_link_node_id\uff1aid\u91cd\u6620\u5c04\n\n    \u4e3alink\u3001node\u5c42\u6620\u5c04\u65b0\u7684ID\u7f16\u53f7, \u5728\u539f\u5bf9\u8c61\u4e0a\u76f4\u63a5\u4fee\u6539\n\n    Args:\n        link_gdf: \u7ebf\u5c42gdf\n        node_gdf: \u7ebf\u5c42gdf\n\n    Returns:\n        None\n    \"\"\"\n    remapping_id(link_gdf=link_gdf, node_gdf=node_gdf)\n</code></pre> <p> </p> <p>\u7c7b\u9759\u6001\u65b9\u6cd5divide_links\uff1a\u5bf9\u6807\u51c6\u8def\u7f51\u6267\u884c\u5212\u5206(\u6253\u65ad)\u8def\u6bb5</p> <p>\u5c06\u957f\u5ea6\u5927\u4e8edivide_l\u7684\u8def\u6bb5\u8fdb\u884c\u5207\u5206\uff0c\u540c\u65f6\u66f4\u65b0\u70b9\u5c42</p> <p>Parameters:</p> Name Type Description Default <code>link_gdf</code> <code>GeoDataFrame</code> <p>\u7ebf\u5c42gdf, \u8981\u6c42\u8f93\u5165\u5fc5\u987b\u4e3aEPSG:4326</p> required <code>node_gdf</code> <code>GeoDataFrame</code> <p>\u70b9\u5c42gdf, \u8981\u6c42\u8f93\u5165\u5fc5\u987b\u4e3aEPSG:4326</p> required <code>plain_crs</code> <code>str</code> <p>\u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb</p> <code>'EPSG:3857'</code> <code>divide_l</code> <code>float</code> <p>\u6240\u6709\u957f\u5ea6(\u7c73)\u5927\u4e8edivide_l\u7684\u8def\u6bb5\u90fd\u5c06\u88ab\u6253\u65ad</p> <code>70.0</code> <code>min_l</code> <code>float</code> <p>\u67d0\u6b21\u6253\u65ad\u540e\u5982\u679c\u5269\u4e0b\u7684\u8def\u6bb5\u957f\u5ea6\u5c0f\u4e8emin_l, \u90a3\u4e48\u6b64\u6b21\u6253\u65ad\u5c06\u4e0d\u88ab\u5141\u8bb8</p> <code>1.0</code> <p>Returns:</p> Type Description <code>tuple[GeoDataFrame, GeoDataFrame]</code> <p>\u7ebf\u5c42gdf, \u70b9\u5c42gdf</p> Source code in <code>src/gotrackit/netreverse/NetGen.py</code> <pre><code>@staticmethod\ndef divide_links(link_gdf: gpd.GeoDataFrame, node_gdf: gpd.GeoDataFrame, plain_crs: str = 'EPSG:3857',\n                 divide_l: float = 70.0, min_l: float = 1.0) -&gt; tuple[gpd.GeoDataFrame, gpd.GeoDataFrame]:\n    \"\"\"\u7c7b\u9759\u6001\u65b9\u6cd5divide_links\uff1a\u5bf9\u6807\u51c6\u8def\u7f51\u6267\u884c\u5212\u5206(\u6253\u65ad)\u8def\u6bb5\n\n    \u5c06\u957f\u5ea6\u5927\u4e8edivide_l\u7684\u8def\u6bb5\u8fdb\u884c\u5207\u5206\uff0c\u540c\u65f6\u66f4\u65b0\u70b9\u5c42\n\n    Args:\n        link_gdf: \u7ebf\u5c42gdf, \u8981\u6c42\u8f93\u5165\u5fc5\u987b\u4e3aEPSG:4326\n        node_gdf: \u70b9\u5c42gdf, \u8981\u6c42\u8f93\u5165\u5fc5\u987b\u4e3aEPSG:4326\n        plain_crs: \u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb\n        divide_l: \u6240\u6709\u957f\u5ea6(\u7c73)\u5927\u4e8edivide_l\u7684\u8def\u6bb5\u90fd\u5c06\u88ab\u6253\u65ad\n        min_l: \u67d0\u6b21\u6253\u65ad\u540e\u5982\u679c\u5269\u4e0b\u7684\u8def\u6bb5\u957f\u5ea6\u5c0f\u4e8emin_l, \u90a3\u4e48\u6b64\u6b21\u6253\u65ad\u5c06\u4e0d\u88ab\u5141\u8bb8\n\n    Returns:\n        \u7ebf\u5c42gdf, \u70b9\u5c42gdf\n    \"\"\"\n    link_gdf = merge_double_link(link_gdf=link_gdf)\n    my_net = Net(link_gdf=link_gdf,\n                 node_gdf=node_gdf, create_single=False, plane_crs=plain_crs)\n\n    # \u6267\u884c\u5212\u5206\u8def\u7f51\n    # divide_l: \u6240\u6709\u957f\u5ea6\u5927\u4e8edivide_l\u7684\u8def\u6bb5\u90fd\u5c06\u6309\u7167divide_l\u8fdb\u884c\u5212\u5206\n    # min_l: \u5212\u5206\u540e\u5982\u679c\u5269\u4e0b\u7684\u8def\u6bb5\u957f\u5ea6\u5c0f\u4e8emin_l, \u90a3\u4e48\u6b64\u6b21\u5212\u5206\u5c06\u4e0d\u88ab\u5141\u8bb8\n    # is_init_link: \u5212\u5206\u540e\u662f\u5426\u91cd\u65b0\u521d\u59cb\u5316\u8def\u7f51\u5bf9\u8c61\n    # method: alpha \u6216\u8005 beta, \u524d\u4e00\u79cd\u65b9\u6cd5\u53ef\u4fdd\u7559\u4e0e\u5212\u5206\u524d\u7684link\u7684\u6620\u5c04\u5173\u7cfb(_parent_link\u5b57\u6bb5)\n    my_net.divide_links(divide_l=divide_l, min_l=min_l, is_init_link=False, method='alpha')\n    link, node = my_net.get_bilateral_link_data().reset_index(drop=True), my_net.get_node_data().reset_index(drop=True)\n    link = link.to_crs('EPSG:4326')\n    node = node.to_crs('EPSG:4326')\n    return link, node\n</code></pre> <p> </p> <p>\u7c7b\u9759\u6001\u65b9\u6cd5circle_process\uff1a\u5904\u7406\u6807\u51c6\u8def\u7f51\u91cc\u9762\u7684\u73af\u8def</p> <p>\u5c06\u73af\u8def\u8fdb\u884c\u6253\u65ad</p> <p>Parameters:</p> Name Type Description Default <code>link_gdf</code> <code>GeoDataFrame</code> <p>\u7ebf\u5c42gdf, \u8981\u6c42\u8f93\u5165\u5fc5\u987b\u4e3aEPSG:4326</p> required <code>node_gdf</code> <code>GeoDataFrame</code> <p>\u70b9\u5c42gdf, \u8981\u6c42\u8f93\u5165\u5fc5\u987b\u4e3aEPSG:4326</p> required <code>plain_crs</code> <code>str</code> <p>\u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb</p> <code>'EPSG:3857'</code> <p>Returns:</p> Type Description <code>tuple[GeoDataFrame, GeoDataFrame]</code> <p>\u7ebf\u5c42gdf, \u70b9\u5c42gdf</p> Source code in <code>src/gotrackit/netreverse/NetGen.py</code> <pre><code>@staticmethod\ndef circle_process(link_gdf: gpd.GeoDataFrame, node_gdf: gpd.GeoDataFrame, plain_crs: str = 'EPSG:3857') -&gt; \\\n        tuple[gpd.GeoDataFrame, gpd.GeoDataFrame]:\n    \"\"\"\u7c7b\u9759\u6001\u65b9\u6cd5circle_process\uff1a\u5904\u7406\u6807\u51c6\u8def\u7f51\u91cc\u9762\u7684\u73af\u8def\n\n    \u5c06\u73af\u8def\u8fdb\u884c\u6253\u65ad\n\n    Args:\n        link_gdf: \u7ebf\u5c42gdf, \u8981\u6c42\u8f93\u5165\u5fc5\u987b\u4e3aEPSG:4326\n        node_gdf: \u70b9\u5c42gdf, \u8981\u6c42\u8f93\u5165\u5fc5\u987b\u4e3aEPSG:4326\n        plain_crs: \u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb\n\n    Returns:\n        \u7ebf\u5c42gdf, \u70b9\u5c42gdf\n    \"\"\"\n    my_net = Net(link_gdf=link_gdf,\n                 node_gdf=node_gdf, create_single=False, delete_circle=False, plane_crs=plain_crs)\n    my_net.process_circle()\n    link, node = my_net.get_bilateral_link_data().reset_index(drop=True), my_net.get_node_data().reset_index(\n        drop=True)\n    link = link.to_crs('EPSG:4326')\n    node = node.to_crs('EPSG:4326')\n    return link, node\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5redivide_link_node\uff1a\u8def\u7f51\u91cd\u5851</p> <p>\u5bf9\u7ebf\u5c42\u6587\u4ef6\u8fdb\u884c\u91cd\u5851(\u6298\u70b9\u62c6\u5206 -&gt; \u62d3\u6251\u4f18\u5316 -&gt; \u91cd\u53e0\u8def\u6bb5\u5904\u7406 -&gt; \u8054\u901a\u6027\u4fee\u590d)</p> <p>Parameters:</p> Name Type Description Default <code>link_gdf</code> <code>GeoDataFrame</code> <p>\u7ebf\u5c42gdf</p> required <p>Returns:</p> Type Description <p>None, \u76f4\u63a5\u5728net_out_fldr\u4e0b\u751f\u6210\u8def\u7f51</p> Source code in <code>src/gotrackit/netreverse/NetGen.py</code> <pre><code>def redivide_link_node(self, link_gdf: gpd.GeoDataFrame):\n    \"\"\"\u7c7b\u65b9\u6cd5redivide_link_node\uff1a\u8def\u7f51\u91cd\u5851\n\n    \u5bf9\u7ebf\u5c42\u6587\u4ef6\u8fdb\u884c\u91cd\u5851(\u6298\u70b9\u62c6\u5206 -&gt; \u62d3\u6251\u4f18\u5316 -&gt; \u91cd\u53e0\u8def\u6bb5\u5904\u7406 -&gt; \u8054\u901a\u6027\u4fee\u590d)\n\n    Args:\n        link_gdf: \u7ebf\u5c42gdf\n\n    Returns:\n        None, \u76f4\u63a5\u5728net_out_fldr\u4e0b\u751f\u6210\u8def\u7f51\n    \"\"\"\n    link_gdf = link_gdf.to_crs('EPSG:4326')\n    link_gdf.dropna(axis=1, how='all', inplace=True)\n    if link_gdf.empty:\n        return None\n    if net_field.DIRECTION_FIELD not in link_gdf.columns:\n        print(rf'the link layer data lacks the dir field and is automatically filled with 0')\n        link_gdf[net_field.DIRECTION_FIELD] = 0\n    try:\n        link_gdf[net_field.DIRECTION_FIELD] = link_gdf[net_field.DIRECTION_FIELD].astype(int)\n    except Exception as e:\n        print(rf'{repr(e)}: the dir field has an empty value.')\n    try:\n        del link_gdf[net_field.FROM_NODE_FIELD]\n        del link_gdf[net_field.TO_NODE_FIELD]\n        del link_gdf[net_field.LINK_ID_FIELD]\n        del link_gdf[net_field.LENGTH_FIELD]\n    except Exception as e:\n        pass\n    assert set(link_gdf[net_field.DIRECTION_FIELD]).issubset({0, 1}), \\\n        'there are abnormal values in the dir field. Only 0 and 1 are allowed.'\n\n    # \u521b\u5efasingle_link\n    single_link_gdf = create_single_link(link_gdf=link_gdf)\n    if self.limit_col_name not in single_link_gdf.columns:\n        single_link_gdf[self.limit_col_name] = 'XX\u8def'\n    single_link_gdf = split_path(path_gdf=single_link_gdf)\n    single_link_gdf.drop(columns=['ft_loc'], axis=1, inplace=True)\n    del link_gdf\n    self._generate_net_from_split_path(split_path_gdf=single_link_gdf)\n</code></pre> <p> </p> <p>\u7c7b\u9759\u6001\u65b9\u6cd5merge_net\uff1a\u5408\u5e76\u6807\u51c6\u8def\u7f51</p> <p>\u5bf9\u591a\u4e2a\u6807\u51c6\u8def\u7f51\u8fdb\u884c\u5408\u5e76</p> <p>Parameters:</p> Name Type Description Default <code>net_list</code> <code>list[list[GeoDataFrame, GeoDataFrame]]</code> <p>\u5f85\u5408\u5e76\u7684\u8def\u7f51, crs\u5fc5\u987b\u4e3a: EPSG:4326</p> required <code>conn_buffer</code> <code>float</code> <p>\u5408\u5e76\u68c0\u6d4b\u9608\u503c(\u7c73)</p> <code>0.5</code> <code>out_fldr</code> <p>\u5b58\u50a8\u6587\u4ef6\u76ee\u5f55</p> <code>'./'</code> <code>plain_crs</code> <code>str</code> <p>\u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb</p> <code>'EPSG:3857'</code> <p>Returns:</p> Type Description <code>tuple[GeoDataFrame, GeoDataFrame]</code> <p>\u7ebf\u5c42gdf, \u70b9\u5c42gdf</p> Source code in <code>src/gotrackit/netreverse/NetGen.py</code> <pre><code>@staticmethod\ndef merge_net(net_list: list[list[gpd.GeoDataFrame, gpd.GeoDataFrame]],\n              conn_buffer: float = 0.5, out_fldr=r'./', plain_crs: str = 'EPSG:3857') -&gt; \\\n        tuple[gpd.GeoDataFrame, gpd.GeoDataFrame]:\n    \"\"\"\u7c7b\u9759\u6001\u65b9\u6cd5merge_net\uff1a\u5408\u5e76\u6807\u51c6\u8def\u7f51\n\n    \u5bf9\u591a\u4e2a\u6807\u51c6\u8def\u7f51\u8fdb\u884c\u5408\u5e76\n\n    Args:\n        net_list: \u5f85\u5408\u5e76\u7684\u8def\u7f51, crs\u5fc5\u987b\u4e3a: EPSG:4326\n        conn_buffer: \u5408\u5e76\u68c0\u6d4b\u9608\u503c(\u7c73)\n        out_fldr: \u5b58\u50a8\u6587\u4ef6\u76ee\u5f55\n        plain_crs: \u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb\n\n    Returns:\n        \u7ebf\u5c42gdf, \u70b9\u5c42gdf\n    \"\"\"\n    max_link, max_node = 0, 0\n    link_gdf, node_gdf = gpd.GeoDataFrame(), gpd.GeoDataFrame()\n    for _link, _node in net_list:\n        remapping_id(link_gdf=_link, node_gdf=_node, start_link_id=max_link + 1,\n                     start_node_id=max_node + 1)\n        link_gdf = pd.concat([link_gdf, _link])\n        node_gdf = pd.concat([node_gdf, _node])\n        max_link, max_node = link_gdf[net_field.LINK_ID_FIELD].max(), node_gdf[net_field.NODE_ID_FIELD].max()\n    link_gdf.reset_index(inplace=True, drop=True)\n    node_gdf.reset_index(inplace=True, drop=True)\n    n = Net(link_gdf=link_gdf, node_gdf=node_gdf, create_single=False, plane_crs=plain_crs)\n    conn = Conn(net=n, check_buffer=conn_buffer)\n    link, node = conn.execute(out_fldr=out_fldr,\n                              file_name='NetMerge', generate_mark=True)\n    save_file(out_fldr=out_fldr, file_name='MergeLink', file_type='shp', data_item=link)\n    save_file(out_fldr=out_fldr, file_name='MergeNode', file_type='shp', data_item=node)\n    return link, node\n</code></pre>"},{"location":"Func%26API/OnLineMapMatch/","title":"OnLineMapMatch","text":"<p>\u5b9e\u65f6\u8def\u5f84(\u5730\u56fe)\u5339\u914d\u7c7b \u8f68\u8ff9\u6570\u636e\u5b9e\u65f6\u5339\u914d\u7c7b, \u63d0\u4f9b\u4e86\u5355\u6838\u5339\u914d\u65b9\u6cd5</p> <p>Parameters:</p> Name Type Description Default <code>net</code> <code>Net</code> <p>\u8def\u7f51Net\u5bf9\u8c61</p> required <code>flag_name</code> <code>str</code> <p>\u6807\u8bb0\u5b57\u7b26\u540d\u79f0, \u4f1a\u7528\u4e8e\u6807\u8bb0\u8f93\u51fa\u7684\u53ef\u89c6\u5316\u6587\u4ef6</p> <code>'test'</code> <code>use_sub_net</code> <code>bool</code> <p>\u662f\u5426\u5728\u5b50\u7f51\u7edc\u4e0a\u8fdb\u884c\u8ba1\u7b97</p> <code>False</code> <code>dup_threshold</code> <code>float</code> <p>\u91cd\u590d\u70b9\u68c0\u6d4b\u9608\u503c, \u5229\u7528GPS\u8f68\u8ff9\u8ba1\u7b97sub_net\u65f6\u5148\u5bf9GPS\u70b9\u539f\u59cb\u8f68\u8ff9\u505a\u7b80\u5316</p> <code>10.0</code> <code>time_format</code> <code>str</code> <p>[1]\u65f6\u95f4\u5217\u6784\u5efa\u53c2\u6570 - GPS\u6570\u636e\u4e2d\u65f6\u95f4\u5217\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6a21\u677f</p> <code>'%Y-%m-%d %H:%M:%S'</code> <code>time_unit</code> <code>str</code> <p>[1]\u65f6\u95f4\u5217\u6784\u5efa\u53c2\u6570 - \u65f6\u95f4\u5355\u4f4d, gotrackit\u4f1a\u5148\u5c1d\u8bd5\u4f7f\u7528time_format\u8fdb\u884c\u65f6\u95f4\u5217\u6784\u5efa, \u5982\u679c\u5931\u8d25\u4f1a\u518d\u6b21\u5c1d\u8bd5\u4f7f\u7528time_unit\u8fdb\u884c\u65f6\u95f4\u5217\u6784\u5efa</p> <code>'s'</code> <code>gps_buffer</code> <code>float</code> <p>[2]\u5019\u9009\u89c4\u5219\u53c2\u6570 - GPS\u7684\u641c\u7d22\u534a\u5f84, \u5355\u4f4d\u7c73, \u610f\u4e3a\u53ea\u9009\u53d6\u6bcf\u4e2agps\u70b9\u9644\u8fd1gps_buffer\u7c73\u8303\u56f4\u5185\u7684\u8def\u6bb5\u4f5c\u4e3a\u521d\u6b65\u5019\u9009\u8def\u6bb5</p> <code>200.0</code> <code>gps_route_buffer_gap</code> <code>float</code> <p>[2]\u5019\u9009\u89c4\u5219\u53c2\u6570 - \u534a\u5f84\u589e\u91cf, gps_buffer + gps_route_buffer_gap \u7684\u534a\u5f84\u8303\u56f4\u7528\u4e8e\u8ba1\u7b97\u5b50\u7f51\u7edc</p> <code>15.0</code> <code>top_k</code> <code>int</code> <p>[2]\u5019\u9009\u89c4\u5219\u53c2\u6570 - \u9009\u53d6\u6bcf\u4e2aGPS\u70b9buffer\u8303\u56f4\u5185\u7684\u6700\u8fd1\u7684top_k\u4e2a\u8def\u6bb5</p> <code>20</code> <code>beta</code> <code>float</code> <p>[3]\u6982\u7387\u53c2\u6570 - \u8be5\u503c\u8d8a\u5927, \u72b6\u6001\u8f6c\u79fb\u6982\u7387\u5bf9\u4e8e\u8ddd\u79bb\u8d8a\u4e0d\u654f\u611f</p> <code>6.0</code> <code>gps_sigma</code> <code>float</code> <p>[3]\u6982\u7387\u53c2\u6570 - \u8be5\u503c\u8d8a\u5927, \u53d1\u5c04\u6982\u7387\u5bf9\u8ddd\u79bb\u8d8a\u4e0d\u654f\u611f</p> <code>30.0</code> <code>dis_para</code> <code>float</code> <p>[3]\u6982\u7387\u53c2\u6570 - \u8ddd\u79bb\u7684\u6298\u51cf\u7cfb\u6570</p> <code>0.1</code> <code>use_heading_inf</code> <code>bool</code> <p>[4]\u6982\u7387\u4fee\u6b63\u53c2\u6570 - \u662f\u5426\u5229\u7528GPS\u7684\u5dee\u5206\u65b9\u5411\u5411\u91cf\u4fee\u6b63\u53d1\u5c04\u6982\u7387, \u9002\u7528\u4e8e: \u4f4e\u5b9a\u4f4d\u8bef\u5dee GPS\u6570\u636e \u6216\u8005\u4f4e\u9891\u5b9a\u4f4d\u6570\u636e(\u914d\u5408\u52a0\u5bc6\u53c2\u6570)</p> <code>False</code> <code>heading_para_array</code> <code>ndarray</code> <p>[4]\u6982\u7387\u4fee\u6b63\u53c2\u6570 - \u5dee\u5206\u65b9\u5411\u4fee\u6b63\u53c2\u6570\u6570\u7ec4</p> <code>None</code> <code>omitted_l</code> <code>float</code> <p>[4]\u6982\u7387\u4fee\u6b63\u53c2\u6570 - \u5f53\u67d0GPS\u70b9\u4e0e\u524d\u540eGPS\u70b9\u7684\u5e73\u5747\u8ddd\u79bb\u5c0f\u4e8eomitted_l(m)\u65f6, \u8be5GPS\u70b9\u7684\u65b9\u5411\u9650\u5236\u4f5c\u7528\u88ab\u53d6\u6d88</p> <code>6.0</code> <code>del_dwell</code> <code>bool</code> <p>[5]\u505c\u7559\u70b9\u5904\u7406 - \u662f\u5426\u8fdb\u884c\u505c\u7559\u70b9\u8bc6\u522b\u5e76\u4e14\u5220\u9664\u505c\u7559\u70b9</p> <code>True</code> <code>dwell_l_length</code> <code>float</code> <p>[5]\u505c\u7559\u70b9\u5904\u7406 - \u505c\u7559\u70b9\u8bc6\u522b\u8ddd\u79bb\u9608\u503c</p> <code>5.0</code> <code>dwell_n</code> <code>int</code> <p>[5]\u505c\u7559\u70b9\u5904\u7406 - \u8d85\u8fc7\u8fde\u7eeddwell_n\u4e2a\u76f8\u90bbGPS\u70b9\u7684\u8ddd\u79bb\u5c0f\u4e8edwell_l_length\uff0c\u90a3\u4e48\u8fd9\u4e00\u7ec4\u70b9\u5c31\u4f1a\u88ab\u8bc6\u522b\u4e3a\u505c\u7559\u70b9</p> <code>2</code> <code>is_lower_f</code> <code>bool</code> <p>[6]\u8f68\u8ff9\u964d\u9891 - \u662f\u5426\u5bf9GPS\u6570\u636e\u8fdb\u884c\u6570\u636e\u964d\u9891\u7387, \u9002\u7528\u4e8e: \u9ad8\u9891-\u9ad8\u5b9a\u4f4d\u8bef\u5dee GPS\u6570\u636e</p> <code>False</code> <code>lower_n</code> <code>int</code> <p>[6]\u8f68\u8ff9\u964d\u9891 - \u9891\u7387\u500d\u7387</p> <code>2</code> <code>is_rolling_average</code> <code>bool</code> <p>[7]\u6ed1\u52a8\u7a97\u53e3\u5e73\u6ed1 - \u662f\u5426\u542f\u7528\u6ed1\u52a8\u7a97\u53e3\u5e73\u5747\u5bf9GPS\u6570\u636e\u8fdb\u884c\u964d\u566a</p> <code>False</code> <code>window</code> <code>int</code> <p>[7]\u6ed1\u52a8\u7a97\u53e3\u5e73\u6ed1 - \u6ed1\u52a8\u7a97\u53e3\u5927\u5c0f</p> <code>2</code> <code>dense_gps</code> <code>bool</code> <p>[7]\u6ed1\u52a8\u7a97\u53e3\u5e73\u6ed1 - \u662f\u5426\u5bf9GPS\u6570\u636e\u8fdb\u884c\u52a0\u5bc6</p> <code>True</code> <code>dense_interval</code> <code>float</code> <p>[8]\u8f68\u8ff9\u589e\u5bc6 - \u5f53\u524d\u540eGPS\u70b9\u7684\u76f4\u7ebf\u8ddd\u79bbl\u8d85\u8fc7dense_interval\u5373\u8fdb\u884c\u52a0\u5bc6, \u8fdb\u884c int(l / dense_interval) + 1 \u7b49\u5206\u52a0\u5bc6</p> <code>100.0</code> <code>out_fldr</code> <code>str</code> <p>[9]\u8f93\u51fa\u8bbe\u7f6e - \u4fdd\u5b58\u5339\u914d\u7ed3\u679c\u7684\u6587\u4ef6\u76ee\u5f55</p> <code>None</code> <code>instant_output</code> <code>bool</code> <p>[9]\u8f93\u51fa\u8bbe\u7f6e - \u662f\u5426\u6bcf\u5339\u914d\u5b8c\u4e00\u6761\u8f68\u8ff9\u5c31\u5b58\u50a8csv\u5339\u914d\u7ed3\u679c</p> <code>False</code> <code>user_field_list</code> <code>list[str]</code> <p>[9]\u8f93\u51fa\u8bbe\u7f6e - gps\u6570\u636e\u4e2d, \u7528\u6237\u60f3\u8981\u9644\u5e26\u5728\u5339\u914d\u7ed3\u679c\u8868\u4e2d\u8f93\u51fa\u7684\u989d\u5916\u5b57\u6bb5\u5217\u8868</p> <code>None</code> <code>export_html</code> <code>bool</code> <p>[10]HTML\u8f93\u51fa\u8bbe\u7f6e - \u662f\u5426\u8f93\u51fa\u7f51\u9875\u53ef\u89c6\u5316\u7ed3\u679chtml\u6587\u4ef6</p> <code>False</code> <code>use_gps_source</code> <code>bool</code> <p>[10]HTML\u8f93\u51fa\u8bbe\u7f6e - \u662f\u5426\u5728\u53ef\u89c6\u5316\u7ed3\u679c\u4e2d\u4f7f\u7528GPS\u6e90\u6570\u636e\u8fdb\u884c\u5c55\u793a</p> <code>False</code> <code>gps_radius</code> <code>float</code> <p>[10]HTML\u8f93\u51fa\u8bbe\u7f6e - HTML\u53ef\u89c6\u5316\u4e2dGPS\u70b9\u7684\u534a\u5f84\u5927\u5c0f\uff0c\u5355\u4f4d\u7c73</p> <code>6.0</code> <code>export_all_agents</code> <code>bool</code> <p>[10]HTML\u8f93\u51fa\u8bbe\u7f6e - \u662f\u5426\u5c06\u6240\u6709agent\u7684\u53ef\u89c6\u5316\u5b58\u50a8\u4e8e\u4e00\u4e2ahtml\u6587\u4ef6\u4e2d</p> <code>False</code> <code>visualization_cache_times</code> <code>int</code> <p>[10]HTML\u8f93\u51fa\u8bbe\u7f6e - \u6bcf\u5339\u914d\u5b8cvisualization_cache_times\u8f86\u8f66\u518d\u8fdb\u884c(html or geojson\u6587\u4ef6)\u7ed3\u679c\u7684\u7edf\u4e00\u5b58\u50a8</p> <code>5</code> <code>export_geo_res</code> <code>bool</code> <p>[11]GeoJSON\u8f93\u51fa\u8bbe\u7f6e - \u662f\u5426\u8f93\u51fa\u5339\u914d\u7ed3\u679c\u7684\u51e0\u4f55\u53ef\u89c6\u5316\u6587\u4ef6</p> <code>False</code> <code>heading_vec_len</code> <code>float</code> <p>[11]GeoJSON\u8f93\u51fa\u8bbe\u7f6e - \u5339\u914d\u822a\u5411\u5411\u91cf\u7684\u957f\u5ea6(\u63a7\u5236geojson\u6587\u4ef6\u4e2d\u7684\u53ef\u89c6\u5316)</p> <code>15.0</code> Source code in <code>src/gotrackit/MapMatch.py</code> <pre><code>def __init__(self, net: Net, flag_name: str = 'test', use_sub_net: bool = False,\n             time_format: str = \"%Y-%m-%d %H:%M:%S\", time_unit: str = 's',\n             gps_buffer: float = 200.0, gps_route_buffer_gap: float = 15.0,\n             beta: float = 6.0, gps_sigma: float = 30.0, dis_para: float = 0.1,\n             is_lower_f: bool = False, lower_n: int = 2,\n             use_heading_inf: bool = False, heading_para_array: np.ndarray = None,\n             dense_gps: bool = True, dense_interval: float = 100.0,\n             dwell_l_length: float = 5.0, dwell_n: int = 2, del_dwell: bool = True,\n             dup_threshold: float = 10.0,\n             is_rolling_average: bool = False, window: int = 2,\n             export_html: bool = False, use_gps_source: bool = False, out_fldr: str = None,\n             export_geo_res: bool = False, top_k: int = 20, omitted_l: float = 6.0,\n             link_width: float = 1.5, node_radius: float = 1.5,\n             match_link_width: float = 5.0, gps_radius: float = 6.0, export_all_agents: bool = False,\n             visualization_cache_times: int = 5, multi_core_save: bool = False, instant_output: bool = False,\n             user_field_list: list[str] = None, heading_vec_len: float = 15.0):\n    \"\"\"\u5b9e\u65f6\u8def\u5f84(\u5730\u56fe)\u5339\u914d\u7c7b\n    \u8f68\u8ff9\u6570\u636e\u5b9e\u65f6\u5339\u914d\u7c7b, \u63d0\u4f9b\u4e86\u5355\u6838\u5339\u914d\u65b9\u6cd5\n\n    Args:\n        net: \u8def\u7f51Net\u5bf9\u8c61\n        flag_name: \u6807\u8bb0\u5b57\u7b26\u540d\u79f0, \u4f1a\u7528\u4e8e\u6807\u8bb0\u8f93\u51fa\u7684\u53ef\u89c6\u5316\u6587\u4ef6\n        use_sub_net: \u662f\u5426\u5728\u5b50\u7f51\u7edc\u4e0a\u8fdb\u884c\u8ba1\u7b97\n        dup_threshold: \u91cd\u590d\u70b9\u68c0\u6d4b\u9608\u503c, \u5229\u7528GPS\u8f68\u8ff9\u8ba1\u7b97sub_net\u65f6\u5148\u5bf9GPS\u70b9\u539f\u59cb\u8f68\u8ff9\u505a\u7b80\u5316\n        time_format: [1]\u65f6\u95f4\u5217\u6784\u5efa\u53c2\u6570 - GPS\u6570\u636e\u4e2d\u65f6\u95f4\u5217\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6a21\u677f\n        time_unit: [1]\u65f6\u95f4\u5217\u6784\u5efa\u53c2\u6570 - \u65f6\u95f4\u5355\u4f4d, gotrackit\u4f1a\u5148\u5c1d\u8bd5\u4f7f\u7528time_format\u8fdb\u884c\u65f6\u95f4\u5217\u6784\u5efa, \u5982\u679c\u5931\u8d25\u4f1a\u518d\u6b21\u5c1d\u8bd5\u4f7f\u7528time_unit\u8fdb\u884c\u65f6\u95f4\u5217\u6784\u5efa\n        gps_buffer: [2]\u5019\u9009\u89c4\u5219\u53c2\u6570 - GPS\u7684\u641c\u7d22\u534a\u5f84, \u5355\u4f4d\u7c73, \u610f\u4e3a\u53ea\u9009\u53d6\u6bcf\u4e2agps\u70b9\u9644\u8fd1gps_buffer\u7c73\u8303\u56f4\u5185\u7684\u8def\u6bb5\u4f5c\u4e3a\u521d\u6b65\u5019\u9009\u8def\u6bb5\n        gps_route_buffer_gap: [2]\u5019\u9009\u89c4\u5219\u53c2\u6570 - \u534a\u5f84\u589e\u91cf, gps_buffer + gps_route_buffer_gap \u7684\u534a\u5f84\u8303\u56f4\u7528\u4e8e\u8ba1\u7b97\u5b50\u7f51\u7edc\n        top_k: [2]\u5019\u9009\u89c4\u5219\u53c2\u6570 - \u9009\u53d6\u6bcf\u4e2aGPS\u70b9buffer\u8303\u56f4\u5185\u7684\u6700\u8fd1\u7684top_k\u4e2a\u8def\u6bb5\n        beta: [3]\u6982\u7387\u53c2\u6570 - \u8be5\u503c\u8d8a\u5927, \u72b6\u6001\u8f6c\u79fb\u6982\u7387\u5bf9\u4e8e\u8ddd\u79bb\u8d8a\u4e0d\u654f\u611f\n        gps_sigma: [3]\u6982\u7387\u53c2\u6570 - \u8be5\u503c\u8d8a\u5927, \u53d1\u5c04\u6982\u7387\u5bf9\u8ddd\u79bb\u8d8a\u4e0d\u654f\u611f\n        dis_para: [3]\u6982\u7387\u53c2\u6570 - \u8ddd\u79bb\u7684\u6298\u51cf\u7cfb\u6570\n        use_heading_inf: [4]\u6982\u7387\u4fee\u6b63\u53c2\u6570 - \u662f\u5426\u5229\u7528GPS\u7684\u5dee\u5206\u65b9\u5411\u5411\u91cf\u4fee\u6b63\u53d1\u5c04\u6982\u7387, \u9002\u7528\u4e8e: \u4f4e\u5b9a\u4f4d\u8bef\u5dee GPS\u6570\u636e \u6216\u8005\u4f4e\u9891\u5b9a\u4f4d\u6570\u636e(\u914d\u5408\u52a0\u5bc6\u53c2\u6570)\n        heading_para_array: [4]\u6982\u7387\u4fee\u6b63\u53c2\u6570 - \u5dee\u5206\u65b9\u5411\u4fee\u6b63\u53c2\u6570\u6570\u7ec4\n        omitted_l: [4]\u6982\u7387\u4fee\u6b63\u53c2\u6570 - \u5f53\u67d0GPS\u70b9\u4e0e\u524d\u540eGPS\u70b9\u7684\u5e73\u5747\u8ddd\u79bb\u5c0f\u4e8eomitted_l(m)\u65f6, \u8be5GPS\u70b9\u7684\u65b9\u5411\u9650\u5236\u4f5c\u7528\u88ab\u53d6\u6d88\n        del_dwell: [5]\u505c\u7559\u70b9\u5904\u7406 - \u662f\u5426\u8fdb\u884c\u505c\u7559\u70b9\u8bc6\u522b\u5e76\u4e14\u5220\u9664\u505c\u7559\u70b9\n        dwell_l_length: [5]\u505c\u7559\u70b9\u5904\u7406 - \u505c\u7559\u70b9\u8bc6\u522b\u8ddd\u79bb\u9608\u503c\n        dwell_n: [5]\u505c\u7559\u70b9\u5904\u7406 - \u8d85\u8fc7\u8fde\u7eeddwell_n\u4e2a\u76f8\u90bbGPS\u70b9\u7684\u8ddd\u79bb\u5c0f\u4e8edwell_l_length\uff0c\u90a3\u4e48\u8fd9\u4e00\u7ec4\u70b9\u5c31\u4f1a\u88ab\u8bc6\u522b\u4e3a\u505c\u7559\u70b9\n        is_lower_f: [6]\u8f68\u8ff9\u964d\u9891 - \u662f\u5426\u5bf9GPS\u6570\u636e\u8fdb\u884c\u6570\u636e\u964d\u9891\u7387, \u9002\u7528\u4e8e: \u9ad8\u9891-\u9ad8\u5b9a\u4f4d\u8bef\u5dee GPS\u6570\u636e\n        lower_n: [6]\u8f68\u8ff9\u964d\u9891 - \u9891\u7387\u500d\u7387\n        is_rolling_average: [7]\u6ed1\u52a8\u7a97\u53e3\u5e73\u6ed1 - \u662f\u5426\u542f\u7528\u6ed1\u52a8\u7a97\u53e3\u5e73\u5747\u5bf9GPS\u6570\u636e\u8fdb\u884c\u964d\u566a\n        window: [7]\u6ed1\u52a8\u7a97\u53e3\u5e73\u6ed1 - \u6ed1\u52a8\u7a97\u53e3\u5927\u5c0f\n        dense_gps: [7]\u6ed1\u52a8\u7a97\u53e3\u5e73\u6ed1 - \u662f\u5426\u5bf9GPS\u6570\u636e\u8fdb\u884c\u52a0\u5bc6\n        dense_interval: [8]\u8f68\u8ff9\u589e\u5bc6 - \u5f53\u524d\u540eGPS\u70b9\u7684\u76f4\u7ebf\u8ddd\u79bbl\u8d85\u8fc7dense_interval\u5373\u8fdb\u884c\u52a0\u5bc6, \u8fdb\u884c int(l / dense_interval) + 1 \u7b49\u5206\u52a0\u5bc6\n        out_fldr: [9]\u8f93\u51fa\u8bbe\u7f6e - \u4fdd\u5b58\u5339\u914d\u7ed3\u679c\u7684\u6587\u4ef6\u76ee\u5f55\n        instant_output: [9]\u8f93\u51fa\u8bbe\u7f6e - \u662f\u5426\u6bcf\u5339\u914d\u5b8c\u4e00\u6761\u8f68\u8ff9\u5c31\u5b58\u50a8csv\u5339\u914d\u7ed3\u679c\n        user_field_list: [9]\u8f93\u51fa\u8bbe\u7f6e - gps\u6570\u636e\u4e2d, \u7528\u6237\u60f3\u8981\u9644\u5e26\u5728\u5339\u914d\u7ed3\u679c\u8868\u4e2d\u8f93\u51fa\u7684\u989d\u5916\u5b57\u6bb5\u5217\u8868\n        export_html: [10]HTML\u8f93\u51fa\u8bbe\u7f6e - \u662f\u5426\u8f93\u51fa\u7f51\u9875\u53ef\u89c6\u5316\u7ed3\u679chtml\u6587\u4ef6\n        use_gps_source: [10]HTML\u8f93\u51fa\u8bbe\u7f6e - \u662f\u5426\u5728\u53ef\u89c6\u5316\u7ed3\u679c\u4e2d\u4f7f\u7528GPS\u6e90\u6570\u636e\u8fdb\u884c\u5c55\u793a\n        gps_radius: [10]HTML\u8f93\u51fa\u8bbe\u7f6e - HTML\u53ef\u89c6\u5316\u4e2dGPS\u70b9\u7684\u534a\u5f84\u5927\u5c0f\uff0c\u5355\u4f4d\u7c73\n        export_all_agents: [10]HTML\u8f93\u51fa\u8bbe\u7f6e - \u662f\u5426\u5c06\u6240\u6709agent\u7684\u53ef\u89c6\u5316\u5b58\u50a8\u4e8e\u4e00\u4e2ahtml\u6587\u4ef6\u4e2d\n        visualization_cache_times: [10]HTML\u8f93\u51fa\u8bbe\u7f6e - \u6bcf\u5339\u914d\u5b8cvisualization_cache_times\u8f86\u8f66\u518d\u8fdb\u884c(html or geojson\u6587\u4ef6)\u7ed3\u679c\u7684\u7edf\u4e00\u5b58\u50a8\n        export_geo_res: [11]GeoJSON\u8f93\u51fa\u8bbe\u7f6e - \u662f\u5426\u8f93\u51fa\u5339\u914d\u7ed3\u679c\u7684\u51e0\u4f55\u53ef\u89c6\u5316\u6587\u4ef6\n        heading_vec_len: [11]GeoJSON\u8f93\u51fa\u8bbe\u7f6e - \u5339\u914d\u822a\u5411\u5411\u91cf\u7684\u957f\u5ea6(\u63a7\u5236geojson\u6587\u4ef6\u4e2d\u7684\u53ef\u89c6\u5316)\n    \"\"\"\n    MapMatch.__init__(self, flag_name=flag_name, net=net, use_sub_net=use_sub_net, time_format=time_format,\n                      time_unit=time_unit, gps_buffer=gps_buffer, gps_route_buffer_gap=gps_route_buffer_gap,\n                      beta=beta, gps_sigma=gps_sigma, dis_para=dis_para, is_lower_f=is_lower_f,\n                      lower_n=lower_n, use_heading_inf=use_heading_inf, heading_para_array=heading_para_array,\n                      dense_gps=dense_gps, dense_interval=dense_interval,\n                      dwell_l_length=dwell_l_length, dwell_n=dwell_n, del_dwell=del_dwell,\n                      dup_threshold=dup_threshold, is_rolling_average=is_rolling_average, window=window,\n                      export_html=export_html, use_gps_source=use_gps_source, out_fldr=out_fldr,\n                      export_geo_res=export_geo_res, top_k=top_k, omitted_l=omitted_l, gps_radius=gps_radius,\n                      link_width=link_width, node_radius=node_radius, match_link_width=match_link_width,\n                      export_all_agents=export_all_agents, visualization_cache_times=visualization_cache_times,\n                      multi_core_save=multi_core_save, instant_output=instant_output,\n                      user_field_list=user_field_list, heading_vec_len=heading_vec_len)\n    self.his_hmm_dict = dict()\n    self.his_gps = dict()\n    self.add_single_ft = [True]\n</code></pre> <p>\u8def\u5f84\u5339\u914d</p> <p>\u5bf9\u8f93\u5165\u7684gps\u6570\u636e\u6267\u884c\u5b9e\u65f6\u8def\u5f84\u5339\u914d\u5e76\u4e14\u8f93\u51fa\u5339\u914d\u7ed3\u679c</p> <p>Parameters:</p> Name Type Description Default <code>gps_df</code> <code>DataFrame | GeoDataFrame</code> <p>gps\u6570\u636e\u8868\u5bf9\u8c61, \u5fc5\u9700\u53c2\u6570</p> required <code>gps_already_plain</code> <code>bool</code> <p>\u4f20\u5165\u7684GPS\u6570\u636e\u662f\u5426\u662f\u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb</p> <code>False</code> <code>time_gap_threshold</code> <code>float</code> <p>\u65f6\u95f4\u9608\u503c\uff0c\u5982\u679c\u67d0agent\u7684\u5f53\u524d\u6279GPS\u6570\u636e\u7684\u6700\u65e9\u5b9a\u4f4d\u65f6\u95f4\uff0c\u548c\u4e0a\u6279\u6b21GPS\u6570\u636e\u7684\u6700\u665a\u5b9a\u4f4d\u65f6\u95f4\u7684\u5dee\u503c\u8d85\u8fc7\u8be5\u503c\uff0c\u5219\u4e0d\u53c2\u8003\u5386\u53f2\u6982\u7387\u94fe\u8fdb\u884c\u5339\u914d\u8ba1\u7b97</p> <code>1800.0</code> <code>dis_gap_threshold</code> <code>float</code> <p>\u8ddd\u79bb\u9608\u503c\uff0c\u5982\u679c\u67d0agent\u7684\u5f53\u524d\u6279GPS\u6570\u636e\u7684\u6700\u65e9\u5b9a\u4f4d\u70b9\uff0c\u548c\u4e0a\u6279\u6b21GPS\u6570\u636e\u7684\u6700\u665a\u5b9a\u4f4d\u70b9\u7684\u8ddd\u79bb\u8d85\u8fc7\u8be5\u503c\uff0c\u5219\u4e0d\u53c2\u8003\u5386\u53f2\u6982\u7387\u94fe\u8fdb\u884c\u5339\u914d\u8ba1\u7b97</p> <code>600.0</code> <code>overlapping_window</code> <code>int</code> <p>\u91cd\u53e0\u7a97\u53e3\u957f\u5ea6\uff0c\u548c\u5386\u53f2GPS\u6570\u636e\u7684\u91cd\u53e0\u7a97\u53e3</p> <code>3</code> <p>Returns:</p> Type Description <code>tuple[DataFrame, dict, list]</code> <p>\u5339\u914d\u7ed3\u679c\u8868(pd.DataFrame), \u8b66\u544a\u4fe1\u606f(dict), \u9519\u8bef\u4fe1\u606f(list)</p> Source code in <code>src/gotrackit/MapMatch.py</code> <pre><code>def execute(self, gps_df: pd.DataFrame | gpd.GeoDataFrame,\n            gps_already_plain: bool = False, time_gap_threshold: float = 1800.0,\n            dis_gap_threshold: float = 600.0,\n            overlapping_window: int = 3) -&gt; tuple[pd.DataFrame, dict, list]:\n    \"\"\"\u8def\u5f84\u5339\u914d\n\n    \u5bf9\u8f93\u5165\u7684gps\u6570\u636e\u6267\u884c\u5b9e\u65f6\u8def\u5f84\u5339\u914d\u5e76\u4e14\u8f93\u51fa\u5339\u914d\u7ed3\u679c\n\n    Args:\n        gps_df: gps\u6570\u636e\u8868\u5bf9\u8c61, \u5fc5\u9700\u53c2\u6570\n        gps_already_plain: \u4f20\u5165\u7684GPS\u6570\u636e\u662f\u5426\u662f\u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb\n        time_gap_threshold: \u65f6\u95f4\u9608\u503c\uff0c\u5982\u679c\u67d0agent\u7684\u5f53\u524d\u6279GPS\u6570\u636e\u7684\u6700\u65e9\u5b9a\u4f4d\u65f6\u95f4\uff0c\u548c\u4e0a\u6279\u6b21GPS\u6570\u636e\u7684\u6700\u665a\u5b9a\u4f4d\u65f6\u95f4\u7684\u5dee\u503c\u8d85\u8fc7\u8be5\u503c\uff0c\u5219\u4e0d\u53c2\u8003\u5386\u53f2\u6982\u7387\u94fe\u8fdb\u884c\u5339\u914d\u8ba1\u7b97\n        dis_gap_threshold: \u8ddd\u79bb\u9608\u503c\uff0c\u5982\u679c\u67d0agent\u7684\u5f53\u524d\u6279GPS\u6570\u636e\u7684\u6700\u65e9\u5b9a\u4f4d\u70b9\uff0c\u548c\u4e0a\u6279\u6b21GPS\u6570\u636e\u7684\u6700\u665a\u5b9a\u4f4d\u70b9\u7684\u8ddd\u79bb\u8d85\u8fc7\u8be5\u503c\uff0c\u5219\u4e0d\u53c2\u8003\u5386\u53f2\u6982\u7387\u94fe\u8fdb\u884c\u5339\u914d\u8ba1\u7b97\n        overlapping_window: \u91cd\u53e0\u7a97\u53e3\u957f\u5ea6\uff0c\u548c\u5386\u53f2GPS\u6570\u636e\u7684\u91cd\u53e0\u7a97\u53e3\n\n    Returns:\n        \u5339\u914d\u7ed3\u679c\u8868(pd.DataFrame), \u8b66\u544a\u4fe1\u606f(dict), \u9519\u8bef\u4fe1\u606f(list)\n    \"\"\"\n    # check and format\n    self.is_rolling_average = False\n    # self.del_dwell = False\n    user_field_list = GpsPointsGdf.check(gps_points_df=gps_df, user_field_list=self.user_field_list)\n    may_error_list = dict()\n    error_list = list()\n    match_res_df = pd.DataFrame()\n    hmm_res_list = []  # save hmm_res\n    gps_df.dropna(subset=[agent_id_field], inplace=True)\n    agent_num = len(gps_df[gps_field.AGENT_ID_FIELD].unique())\n    if agent_num == 0:\n        print('after removing the rows with empty values in the agent_id column, the gps data is empty...')\n        return match_res_df, may_error_list, error_list\n\n    # \u5bf9\u6bcf\u8f86\u8f66\u7684\u8f68\u8ff9\u8fdb\u884c\u5339\u914d\n    agent_count = 0\n    # self.add_single_ft = [True]\n\n    for agent_id, _gps_df in gps_df.groupby(gps_field.AGENT_ID_FIELD):\n        cor_with_his = False\n        agent_count += 1\n        if agent_id in self.his_hmm_dict.keys():\n            self.gps_buffer = self.his_hmm_dict[agent_id].gps_points.buffer\n        else:\n            if len(_gps_df) &lt;= 1 and agent_id not in self.his_gps.keys():\n                self.his_gps[agent_id] = _gps_df.copy()\n                continue\n            else:\n                if agent_id in self.his_gps.keys():\n                    _gps_df = pd.concat([self.his_gps[agent_id], _gps_df])\n                    del self.his_gps[agent_id]\n                _gps_df.reset_index(inplace=True, drop=True)\n\n        print(rf'- gotrackit ------&gt; No.{agent_count}: agent: {agent_id} ')\n        try:\n            gps_obj = GpsPointsGdf(gps_points_df=_gps_df, time_format=self.time_format,\n                                   buffer=self.gps_buffer, time_unit=self.time_unit,\n                                   plane_crs=self.plain_crs,\n                                   user_filed_list=user_field_list, already_plain=gps_already_plain)\n        except Exception as e:\n            print(f'error constructing GPS object: {repr(e)}')\n            error_list.append(agent_id)\n            continue\n        del _gps_df\n        # judge if the same chain with his agent\n        last_seq_list = list()\n        if agent_id in self.his_hmm_dict.keys():\n            cor_with_his, last_seq_list = gps_obj.merge_gps(\n                gps_obj=self.his_hmm_dict[agent_id].gps_points,\n                depth=overlapping_window,\n                dis_gap_threshold=dis_gap_threshold,\n                time_gap_threshold=time_gap_threshold)\n\n        # gps-process\n        try:\n            self.gps_reprocess(gps_obj=gps_obj,\n                               is_lower_f=self.is_lower_f, lower_n=self.lower_n,\n                               is_rolling_average=self.is_rolling_average, rolling_window=self.rolling_window,\n                               dense_gps=self.dense_gps, dense_interval=self.dense_interval,\n                               del_dwell=self.del_dwell, dwell_l_length=self.dwell_l_length, dwell_n=self.dwell_n)\n        except Exception as e:\n            print(rf'GPS data preprocessing error: {repr(e)}')\n            error_list.append(agent_id)\n            continue\n\n        if len(gps_obj.gps_gdf) &lt;= 1:\n            print(r'after data preprocessing, there are less than 2 GPS observation points.')\n            error_list.append(agent_id)\n            continue\n\n        # \u4f9d\u636e\u5f53\u524d\u7684GPS\u6570\u636e(\u6e90\u6570\u636e)\u505a\u4e00\u4e2a\u5b50\u7f51\u7edc\n        if self.use_sub_net:\n            print(rf'using sub net')\n            self.add_single_ft[0] = True\n            used_net = self.my_net.create_computational_net(\n                gps_array_buffer=gps_obj.get_gps_array_buffer(buffer=self.sub_net_buffer,\n                                                              dup_threshold=self.dup_threshold),\n                fmm_cache=self.my_net.fmm_cache, prj_cache=self.my_net.prj_cache,\n                weight_field=self.my_net.weight_field,\n                cache_path=self.my_net.cache_path, cache_id=self.my_net.cache_id,\n                not_conn_cost=self.my_net.not_conn_cost)\n            if used_net is None:\n                error_list.append(agent_id)\n                continue\n        else:\n            used_net = self.my_net\n            print(rf'using whole net')\n\n        hmm_obj = HiddenMarkov(net=used_net, gps_points=gps_obj, beta=self.beta,\n                               gps_sigma=self.gps_sigma,\n                               not_conn_cost=self.not_conn_cost,\n                               use_heading_inf=self.use_heading_inf,\n                               heading_para_array=self.heading_para_array,\n                               dis_para=self.dis_para,\n                               top_k=self.top_k, omitted_l=self.omitted_l,\n                               para_grid=self.para_grid,\n                               heading_vec_len=self.heading_vec_len, flag_name=self.flag_name,\n                               out_fldr=self.out_fldr)\n        his_emission = dict()\n        his_ft_idx_map = pd.DataFrame()\n        if cor_with_his:\n            his_emission = self.his_hmm_dict[agent_id].extract_emission(seq_list=last_seq_list)\n            his_ft_idx_map = self.his_hmm_dict[agent_id].get_ft_idx_map\n\n        is_success, _match_res_df = \\\n            hmm_obj.hmm_rt_execute(add_single_ft=self.add_single_ft, last_em_para=his_emission,\n                                   last_seq_list=last_seq_list, his_ft_idx_map=his_ft_idx_map)\n        if not is_success:\n            error_list.append(agent_id)\n            continue\n        hmm_obj.del_ft_trans()\n\n        self.his_hmm_dict[agent_id] = hmm_obj\n\n        if hmm_obj.is_warn:\n            may_error_list[agent_id] = hmm_obj.format_warn_info\n\n        if self.instant_output:\n            _match_res_df.to_csv(os.path.join(self.out_fldr, rf'{agent_id}_match_res.csv'),\n                                 encoding='utf_8_sig', index=False)\n        else:\n            match_res_df = pd.concat([match_res_df, _match_res_df])\n\n        # if export files\n        if self.export_html or self.export_geo_res:\n            hmm_res_list.append(hmm_obj)\n            if len(hmm_res_list) &gt;= self.visualization_cache_times or agent_count == agent_num:\n                export_visualization(hmm_obj_list=hmm_res_list, use_gps_source=self.use_gps_source,\n                                     export_geo=self.export_geo_res, export_html=self.export_html,\n                                     gps_radius=self.gps_radius, export_all_agents=self.export_all_agents,\n                                     out_fldr=self.out_fldr, flag_name=self.flag_name,\n                                     multi_core_save=self.multi_core_save, sub_net_buffer=self.sub_net_buffer,\n                                     dup_threshold=self.dup_threshold)\n                del hmm_res_list\n                hmm_res_list = []\n\n    if hmm_res_list:\n        export_visualization(hmm_obj_list=hmm_res_list, use_gps_source=self.use_gps_source,\n                             export_geo=self.export_geo_res, export_html=self.export_html,\n                             gps_radius=self.gps_radius, export_all_agents=self.export_all_agents,\n                             out_fldr=self.out_fldr, flag_name=self.flag_name,\n                             multi_core_save=self.multi_core_save, sub_net_buffer=self.sub_net_buffer,\n                             dup_threshold=self.dup_threshold)\n    return match_res_df, may_error_list, error_list\n</code></pre>"},{"location":"Func%26API/SampleTrip/","title":"SampleTrip","text":"<p>TripGeneration\u7c7b\u521d\u59cb\u5316</p> <p>Parameters:</p> Name Type Description Default <code>net</code> <code>Net</code> <p>\u8def\u7f51\u5bf9\u8c61</p> <code>None</code> <code>time_step</code> <code>float</code> <p>\u4eff\u771f\u6b65\u957f(s)</p> <code>0.1</code> <code>speed_miu</code> <code>float</code> <p>\u4eff\u771f\u901f\u5ea6\u5747\u503c(m/s)</p> <code>12.0</code> <code>speed_sigma</code> <code>float</code> <p>\u4eff\u771f\u901f\u5ea6\u6807\u51c6\u5dee(m/s)</p> <code>3.6</code> <code>save_gap</code> <code>int</code> <p>\u6bcf\u591a\u5c11\u4eff\u771f\u6b65\u4fdd\u5b58\u4e00\u6b21\u771f\u5b9e\u8f68\u8ff9\u6570\u636e\uff0c\u6574\u6570</p> <code>1</code> <code>loc_frequency</code> <code>float</code> <p>\u6bcf\u591a\u5c11s\u8fdb\u884c\u4e00\u6b21GPS\u5b9a\u4f4d\uff0c\u8be5\u503c\u5fc5\u987b\u5927\u4e8e\u4eff\u771f\u6b65\u957f</p> <code>2.0</code> <code>loc_error_sigma</code> <code>float</code> <p>\u5b9a\u4f4d\u8bef\u5dee\u6807\u51c6\u5dee(m)</p> <code>40.0</code> <code>loc_error_miu</code> <code>float</code> <p>\u5b9a\u4f4d\u8bef\u5dee\u5747\u503c(m)</p> <code>0.0</code> Source code in <code>src/gotrackit/generation/SampleTrip.py</code> <pre><code>def __init__(self, net: Net = None, time_step: float = 0.1, speed_miu: float = 12.0,\n             speed_sigma: float = 3.6, save_gap: int = 1, loc_frequency: float = 2.0,\n             loc_error_sigma: float = 40.0, loc_error_miu: float = 0.0):\n    \"\"\"TripGeneration\u7c7b\u521d\u59cb\u5316\n\n    Args:\n        net: \u8def\u7f51\u5bf9\u8c61\n        time_step: \u4eff\u771f\u6b65\u957f(s)\n        speed_miu: \u4eff\u771f\u901f\u5ea6\u5747\u503c(m/s)\n        speed_sigma: \u4eff\u771f\u901f\u5ea6\u6807\u51c6\u5dee(m/s)\n        save_gap: \u6bcf\u591a\u5c11\u4eff\u771f\u6b65\u4fdd\u5b58\u4e00\u6b21\u771f\u5b9e\u8f68\u8ff9\u6570\u636e\uff0c\u6574\u6570\n        loc_frequency: \u6bcf\u591a\u5c11s\u8fdb\u884c\u4e00\u6b21GPS\u5b9a\u4f4d\uff0c\u8be5\u503c\u5fc5\u987b\u5927\u4e8e\u4eff\u771f\u6b65\u957f\n        loc_error_sigma: \u5b9a\u4f4d\u8bef\u5dee\u6807\u51c6\u5dee(m)\n        loc_error_miu: \u5b9a\u4f4d\u8bef\u5dee\u5747\u503c(m)\n    \"\"\"\n    self.net = net\n    self.time_step = time_step\n    self.speed_miu = speed_miu\n    self.speed_sigma = speed_sigma\n    self.save_gap = save_gap\n    self.loc_frequency = loc_frequency\n    self.loc_error_sigma = loc_error_sigma\n    self.loc_error_miu = loc_error_miu\n</code></pre> <p> </p> <p>TripGeneration\u7684\u7c7b\u65b9\u6cd5\uff1agenerate_rand_trips\u51fd\u6570 - \u751f\u6210\u968f\u673a\u8def\u5f84\u7684trip</p> <p>Parameters:</p> Name Type Description Default <code>trip_num</code> <code>int</code> <code>10</code> <code>instant_output</code> <code>bool</code> <p>\u662f\u5426\u5373\u65f6\u8f93\u51fa\uff0c\u5373\u662f\u5426\u6bcf\u8ba1\u7b97\u5b8c\u4e00\u6b21\u884c\u7a0b\u5c31\u5b58\u50a8GPS\u6570\u636e\u6587\u4ef6\u3001\u9010\u5e27\u8f68\u8ff9\u6587\u4ef6</p> <code>False</code> <code>out_fldr</code> <code>str</code> <p>\u5b58\u50a8\u8f93\u51fa\u6587\u4ef6\u7684\u76ee\u5f55</p> <code>'./'</code> <code>time_format</code> <code>str</code> <p>\u8f93\u51faGPS\u6570\u636e\u7684\u65f6\u95f4\u5217\u7684\u683c\u5f0f</p> <code>'%Y-%m-%d %H:%M:%S'</code> <code>agent_flag</code> <code>str</code> <p>\u6807\u5fd7\u5b57\u7b26</p> <code>'agent'</code> <code>start_year</code> <code>int</code> <p>\u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u5e74</p> <code>2022</code> <code>start_month</code> <code>int</code> <p>\u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u6708</p> <code>5</code> <code>start_day</code> <code>int</code> <p>\u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u65e5</p> <code>15</code> <code>start_hour</code> <code>int</code> <p>\u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u5c0f\u65f6</p> <code>10</code> <code>start_minute</code> <code>int</code> <p>\u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u5206\u949f</p> <code>20</code> <code>start_second</code> <code>int</code> <p>\u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u79d2</p> <code>12</code> <code>file_type</code> <code>str</code> <p>\u8f93\u51fa\u6587\u4ef6\u7684\u7c7b\u578b\uff0cshp\u6216\u8005geojson</p> <code>'geojson'</code> <p>Returns:</p> Type Description <p>\u771f\u5b9e\u8f68\u8ff9\u6570\u636e\u8868\u3001GPS\u8f68\u8ff9\u6570\u636e\u8868\u3001\u6df7\u5408\u6570\u636e\u8868</p> Source code in <code>src/gotrackit/generation/SampleTrip.py</code> <pre><code>def generate_rand_trips(self, trip_num: int = 10, instant_output: bool = False,\n                        out_fldr: str = r'./', time_format: str = \"%Y-%m-%d %H:%M:%S\", agent_flag: str = 'agent',\n                        start_year: int = 2022, start_month: int = 5, start_day: int = 15, start_hour: int = 10,\n                        start_minute: int = 20, start_second: int = 12,\n                        file_type: str = 'geojson'):\n    \"\"\"TripGeneration\u7684\u7c7b\u65b9\u6cd5\uff1agenerate_rand_trips\u51fd\u6570\n    - \u751f\u6210\u968f\u673a\u8def\u5f84\u7684trip\n\n    Args:\n        trip_num:\n        instant_output: \u662f\u5426\u5373\u65f6\u8f93\u51fa\uff0c\u5373\u662f\u5426\u6bcf\u8ba1\u7b97\u5b8c\u4e00\u6b21\u884c\u7a0b\u5c31\u5b58\u50a8GPS\u6570\u636e\u6587\u4ef6\u3001\u9010\u5e27\u8f68\u8ff9\u6587\u4ef6\n        out_fldr: \u5b58\u50a8\u8f93\u51fa\u6587\u4ef6\u7684\u76ee\u5f55\n        time_format: \u8f93\u51faGPS\u6570\u636e\u7684\u65f6\u95f4\u5217\u7684\u683c\u5f0f\n        agent_flag: \u6807\u5fd7\u5b57\u7b26\n        start_year: \u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u5e74\n        start_month: \u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u6708\n        start_day: \u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u65e5\n        start_hour: \u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u5c0f\u65f6\n        start_minute: \u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u5206\u949f\n        start_second: \u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u79d2\n        file_type: \u8f93\u51fa\u6587\u4ef6\u7684\u7c7b\u578b\uff0cshp\u6216\u8005geojson\n\n    Returns:\n        \u771f\u5b9e\u8f68\u8ff9\u6570\u636e\u8868\u3001GPS\u8f68\u8ff9\u6570\u636e\u8868\u3001\u6df7\u5408\u6570\u636e\u8868\n    \"\"\"\n\n    return self.__generate_trips(trip_num=trip_num, instant_output=instant_output, out_fldr=out_fldr,\n                                 time_format=time_format, agent_flag=agent_flag, start_year=start_year,\n                                 start_month=start_month, start_day=start_day, start_hour=start_hour,\n                                 start_minute=start_minute, start_second=start_second, file_type=file_type)\n</code></pre> <p> </p> <p>TripGeneration\u7684\u7c7b\u65b9\u6cd5\uff1agenerate_od_trips\u51fd\u6570 - \u751f\u6210\u6307\u5b9aOD\u8def\u5f84\u7684trip</p> <p>Parameters:</p> Name Type Description Default <code>od_set</code> <code>list or tuple</code> <p>\u8d77\u59cb\u8282\u70b9OD\u5bf9\uff0c\u6309\u7167\u8d77\u59cb\u8282\u70b9\u8fdb\u884c\u8def\u5f84\u641c\u7d22\u540e\u751f\u6210trip\uff0c\u5f62\u5982[(o_node, d_node), \u2026] \u4f8b\u5982[(12, 23), (34, 111)]\uff0c\u8868\u793a\u751f\u62102\u4e2atrip\uff0c\u5206\u522b\u4e3a\u8282\u70b912\u5230\u8282\u70b923\u7684\u6700\u77ed\u8def\u5f84\u3001\u8282\u70b934\u5230\u8282\u70b9111\u7684\u6700\u77ed\u8def\u5f84</p> <code>None</code> <code>instant_output</code> <code>bool</code> <p>\u662f\u5426\u5373\u65f6\u8f93\u51fa\uff0c\u5373\u662f\u5426\u6bcf\u8ba1\u7b97\u5b8c\u4e00\u6b21\u884c\u7a0b\u5c31\u5b58\u50a8GPS\u6570\u636e\u6587\u4ef6\u3001\u9010\u5e27\u8f68\u8ff9\u6587\u4ef6</p> <code>False</code> <code>out_fldr</code> <code>str</code> <p>\u5b58\u50a8\u8f93\u51fa\u6587\u4ef6\u7684\u76ee\u5f55</p> <code>'./'</code> <code>time_format</code> <code>str</code> <p>\u8f93\u51faGPS\u6570\u636e\u7684\u65f6\u95f4\u5217\u7684\u683c\u5f0f</p> <code>'%Y-%m-%d %H:%M:%S'</code> <code>agent_flag</code> <code>str</code> <p>\u6807\u5fd7\u5b57\u7b26</p> <code>'agent'</code> <code>start_year</code> <code>int</code> <p>\u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u5e74</p> <code>2022</code> <code>start_month</code> <code>int</code> <p>\u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u6708</p> <code>5</code> <code>start_day</code> <code>int</code> <p>\u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u65e5</p> <code>15</code> <code>start_hour</code> <code>int</code> <p>\u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u5c0f\u65f6</p> <code>10</code> <code>start_minute</code> <code>int</code> <p>\u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u5206\u949f</p> <code>20</code> <code>start_second</code> <code>int</code> <p>\u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u79d2</p> <code>12</code> <code>file_type</code> <code>str</code> <p>\u8f93\u51fa\u6587\u4ef6\u7684\u7c7b\u578b\uff0cshp\u6216\u8005geojson</p> <code>'geojson'</code> <p>Returns:</p> Type Description <p>\u771f\u5b9e\u8f68\u8ff9\u6570\u636e\u8868\u3001GPS\u8f68\u8ff9\u6570\u636e\u8868\u3001\u6df7\u5408\u6570\u636e\u8868</p> Source code in <code>src/gotrackit/generation/SampleTrip.py</code> <pre><code>def generate_od_trips(self, od_set: list or tuple = None, instant_output: bool = False,\n                      out_fldr: str = r'./', time_format: str = \"%Y-%m-%d %H:%M:%S\", agent_flag: str = 'agent',\n                      start_year: int = 2022, start_month: int = 5, start_day: int = 15, start_hour: int = 10,\n                      start_minute: int = 20, start_second: int = 12,\n                      file_type: str = 'geojson'):\n    \"\"\"TripGeneration\u7684\u7c7b\u65b9\u6cd5\uff1agenerate_od_trips\u51fd\u6570\n    - \u751f\u6210\u6307\u5b9aOD\u8def\u5f84\u7684trip\n\n    Args:\n        od_set: \u8d77\u59cb\u8282\u70b9OD\u5bf9\uff0c\u6309\u7167\u8d77\u59cb\u8282\u70b9\u8fdb\u884c\u8def\u5f84\u641c\u7d22\u540e\u751f\u6210trip\uff0c\u5f62\u5982[(o_node, d_node), \u2026] \u4f8b\u5982[(12, 23), (34, 111)]\uff0c\u8868\u793a\u751f\u62102\u4e2atrip\uff0c\u5206\u522b\u4e3a\u8282\u70b912\u5230\u8282\u70b923\u7684\u6700\u77ed\u8def\u5f84\u3001\u8282\u70b934\u5230\u8282\u70b9111\u7684\u6700\u77ed\u8def\u5f84\n        instant_output: \u662f\u5426\u5373\u65f6\u8f93\u51fa\uff0c\u5373\u662f\u5426\u6bcf\u8ba1\u7b97\u5b8c\u4e00\u6b21\u884c\u7a0b\u5c31\u5b58\u50a8GPS\u6570\u636e\u6587\u4ef6\u3001\u9010\u5e27\u8f68\u8ff9\u6587\u4ef6\n        out_fldr: \u5b58\u50a8\u8f93\u51fa\u6587\u4ef6\u7684\u76ee\u5f55\n        time_format: \u8f93\u51faGPS\u6570\u636e\u7684\u65f6\u95f4\u5217\u7684\u683c\u5f0f\n        agent_flag: \u6807\u5fd7\u5b57\u7b26\n        start_year: \u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u5e74\n        start_month: \u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u6708\n        start_day: \u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u65e5\n        start_hour: \u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u5c0f\u65f6\n        start_minute: \u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u5206\u949f\n        start_second: \u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u79d2\n        file_type: \u8f93\u51fa\u6587\u4ef6\u7684\u7c7b\u578b\uff0cshp\u6216\u8005geojson\n\n    Returns:\n        \u771f\u5b9e\u8f68\u8ff9\u6570\u636e\u8868\u3001GPS\u8f68\u8ff9\u6570\u636e\u8868\u3001\u6df7\u5408\u6570\u636e\u8868\n    \"\"\"\n    if od_set is None or not od_set:\n        return None\n    return self.__generate_trips(od_set=od_set, instant_output=instant_output, out_fldr=out_fldr,\n                                 time_format=time_format, agent_flag=agent_flag, start_year=start_year,\n                                 start_month=start_month, start_day=start_day, start_hour=start_hour,\n                                 start_minute=start_minute, start_second=start_second, file_type=file_type)\n</code></pre> <p> </p> <p>TripGeneration\u7684\u7c7b\u65b9\u6cd5\uff1agenerate_destined_trips\u51fd\u6570 - \u751f\u6210\u6307\u5b9a\u8def\u5f84\u7684trip</p> <p>Parameters:</p> Name Type Description Default <code>node_paths</code> <code>list or tuple</code> <p>\u8def\u5f84\u8282\u70b9\u5e8f\u5217\uff0c\u5f62\u5982[[node1, node2, node3, \u2026], [node5, node7, node9, \u2026],\u2026] \u4f8b\u5982[(12, 90, 9012, 123), (3412, 23, 112, 23), (34, 344, 111)]\uff0c\u8868\u793a\u751f\u62103\u4e2atrip\uff0c\u6bcf\u4e2atrip\u7684\u8282\u70b9\u5e8f\u5217\u5df2\u7ecf\u6307\u5b9a\u597d</p> <code>None</code> <code>instant_output</code> <code>bool</code> <p>\u662f\u5426\u5373\u65f6\u8f93\u51fa\uff0c\u5373\u662f\u5426\u6bcf\u8ba1\u7b97\u5b8c\u4e00\u6b21\u884c\u7a0b\u5c31\u5b58\u50a8GPS\u6570\u636e\u6587\u4ef6\u3001\u9010\u5e27\u8f68\u8ff9\u6587\u4ef6</p> <code>False</code> <code>out_fldr</code> <code>str</code> <p>\u5b58\u50a8\u8f93\u51fa\u6587\u4ef6\u7684\u76ee\u5f55</p> <code>'./'</code> <code>time_format</code> <code>str</code> <p>\u8f93\u51faGPS\u6570\u636e\u7684\u65f6\u95f4\u5217\u7684\u683c\u5f0f</p> <code>'%Y-%m-%d %H:%M:%S'</code> <code>agent_flag</code> <code>str</code> <p>\u6807\u5fd7\u5b57\u7b26</p> <code>'agent'</code> <code>start_year</code> <code>int</code> <p>\u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u5e74</p> <code>2022</code> <code>start_month</code> <code>int</code> <p>\u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u6708</p> <code>5</code> <code>start_day</code> <code>int</code> <p>\u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u65e5</p> <code>15</code> <code>start_hour</code> <code>int</code> <p>\u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u5c0f\u65f6</p> <code>10</code> <code>start_minute</code> <code>int</code> <p>\u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u5206\u949f</p> <code>20</code> <code>start_second</code> <code>int</code> <p>\u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u79d2</p> <code>12</code> <code>file_type</code> <code>str</code> <p>\u8f93\u51fa\u6587\u4ef6\u7684\u7c7b\u578b\uff0cshp\u6216\u8005geojson</p> <code>'geojson'</code> <p>Returns:</p> Type Description <p>\u771f\u5b9e\u8f68\u8ff9\u6570\u636e\u8868\u3001GPS\u8f68\u8ff9\u6570\u636e\u8868\u3001\u6df7\u5408\u6570\u636e\u8868</p> Source code in <code>src/gotrackit/generation/SampleTrip.py</code> <pre><code>def generate_destined_trips(self, node_paths: list or tuple = None, instant_output: bool = False,\n                            out_fldr: str = r'./', time_format: str = \"%Y-%m-%d %H:%M:%S\",\n                            agent_flag: str = 'agent',\n                            start_year: int = 2022, start_month: int = 5, start_day: int = 15, start_hour: int = 10,\n                            start_minute: int = 20, start_second: int = 12,\n                            file_type: str = 'geojson'):\n    \"\"\"TripGeneration\u7684\u7c7b\u65b9\u6cd5\uff1agenerate_destined_trips\u51fd\u6570\n    - \u751f\u6210\u6307\u5b9a\u8def\u5f84\u7684trip\n\n    Args:\n        node_paths: \u8def\u5f84\u8282\u70b9\u5e8f\u5217\uff0c\u5f62\u5982[[node1, node2, node3, \u2026], [node5, node7, node9, \u2026],\u2026] \u4f8b\u5982[(12, 90, 9012, 123), (3412, 23, 112, 23), (34, 344, 111)]\uff0c\u8868\u793a\u751f\u62103\u4e2atrip\uff0c\u6bcf\u4e2atrip\u7684\u8282\u70b9\u5e8f\u5217\u5df2\u7ecf\u6307\u5b9a\u597d\n        instant_output: \u662f\u5426\u5373\u65f6\u8f93\u51fa\uff0c\u5373\u662f\u5426\u6bcf\u8ba1\u7b97\u5b8c\u4e00\u6b21\u884c\u7a0b\u5c31\u5b58\u50a8GPS\u6570\u636e\u6587\u4ef6\u3001\u9010\u5e27\u8f68\u8ff9\u6587\u4ef6\n        out_fldr: \u5b58\u50a8\u8f93\u51fa\u6587\u4ef6\u7684\u76ee\u5f55\n        time_format: \u8f93\u51faGPS\u6570\u636e\u7684\u65f6\u95f4\u5217\u7684\u683c\u5f0f\n        agent_flag: \u6807\u5fd7\u5b57\u7b26\n        start_year: \u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u5e74\n        start_month: \u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u6708\n        start_day: \u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u65e5\n        start_hour: \u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u5c0f\u65f6\n        start_minute: \u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u5206\u949f\n        start_second: \u8f66\u8f86\u51fa\u53d1\u7684\u8d77\u59cb\u79d2\n        file_type: \u8f93\u51fa\u6587\u4ef6\u7684\u7c7b\u578b\uff0cshp\u6216\u8005geojson\n\n    Returns:\n        \u771f\u5b9e\u8f68\u8ff9\u6570\u636e\u8868\u3001GPS\u8f68\u8ff9\u6570\u636e\u8868\u3001\u6df7\u5408\u6570\u636e\u8868\n    \"\"\"\n    if node_paths is None or not node_paths:\n        return None\n    return self.__generate_trips(node_paths=node_paths, instant_output=instant_output, out_fldr=out_fldr,\n                                 time_format=time_format, agent_flag=agent_flag, start_year=start_year,\n                                 start_month=start_month, start_day=start_day, start_hour=start_hour,\n                                 start_minute=start_minute, start_second=start_second, file_type=file_type)\n</code></pre>"},{"location":"Func%26API/StraightLineToArc/","title":"StraightLineToArc","text":"Source code in <code>src/gotrackit/tools/geo_process.py</code> <pre><code>def __init__(self):\n    pass\n</code></pre> <p>\u8ba1\u7b97\u5706\u5f27\u5bf9\u8c61 \u57fa\u4e8e\u76f4\u7ebf\u5bf9\u8c61\u751f\u6210\u5706\u5f27\u7ebf\u5bf9\u8c61</p> <p>Parameters:</p> Name Type Description Default <code>straight_line_obj</code> <code>LineString</code> <p>\u76f4\u7ebf\u5bf9\u8c61</p> required <code>r</code> <code>float</code> <p>\u66f2\u5ea6\u7cfb\u6570, \u5fc5\u987b\u5927\u4e8e0.72, \u503c\u8d8a\u5c0f, \u66f2\u5ea6\u8d8a\u5927</p> <code>1.0</code> <code>sample_num</code> <code>int</code> <p>\u91c7\u6837\u70b9\u6570\u76ee</p> <code>30</code> <p>Returns:</p> Type Description <code>LineString</code> <p>\u5706\u5f27\u66f2\u7ebf\u5bf9\u8c61</p> Source code in <code>src/gotrackit/tools/geo_process.py</code> <pre><code>@staticmethod\ndef arc_curve_line(straight_line_obj: LineString, r: float = 1.0, sample_num: int = 30) \\\n        -&gt; LineString:\n\n    \"\"\"\u8ba1\u7b97\u5706\u5f27\u5bf9\u8c61\n    \u57fa\u4e8e\u76f4\u7ebf\u5bf9\u8c61\u751f\u6210\u5706\u5f27\u7ebf\u5bf9\u8c61\n\n    Args:\n        straight_line_obj: \u76f4\u7ebf\u5bf9\u8c61\n        r: \u66f2\u5ea6\u7cfb\u6570, \u5fc5\u987b\u5927\u4e8e0.72, \u503c\u8d8a\u5c0f, \u66f2\u5ea6\u8d8a\u5927\n        sample_num: \u91c7\u6837\u70b9\u6570\u76ee\n\n    Returns:\n        \u5706\u5f27\u66f2\u7ebf\u5bf9\u8c61\n    \"\"\"\n    o_coord, d_coord = straight_line_obj.coords[0], straight_line_obj.coords[-1]\n    arc_line_cor = get_arrow(o_loc=o_coord, d_loc=d_coord, ratio=r, sample_num=sample_num)\n    return LineString(arc_line_cor)\n</code></pre> <p> </p> <p>\u8ba1\u7b97\u5706\u5f27\u5750\u6807 \u57fa\u4e8e\u8d77\u7ec8\u70b9\u5750\u6807\u751f\u6210\u5706\u5f27\u5750\u6807</p> <p>Parameters:</p> Name Type Description Default <code>o_loc</code> <code>list or tuple</code> <p>\u8d77\u70b9\u5750\u6807</p> <code>None</code> <code>d_loc</code> <code>list or tuple</code> <p>\u7ec8\u70b9\u5750\u6807</p> <code>None</code> <code>r</code> <code>float</code> <p>\u66f2\u5ea6\u7cfb\u6570, \u5fc5\u987b\u5927\u4e8e0.72, \u503c\u8d8a\u5c0f, \u66f2\u5ea6\u8d8a\u5927</p> <code>1.0</code> <code>sample_num</code> <code>int</code> <p>\u91c7\u6837\u70b9\u6570\u76ee</p> <code>30</code> <p>Returns:</p> Type Description <code>list</code> <p>\u5706\u5f27\u66f2\u7ebf\u5750\u6807\u70b9</p> Source code in <code>src/gotrackit/tools/geo_process.py</code> <pre><code>@staticmethod\ndef arc_curve_cor(o_loc: list or tuple = None, d_loc: list or tuple = None, r: float = 1.0,\n                  sample_num: int = 30) -&gt; list:\n    \"\"\"\u8ba1\u7b97\u5706\u5f27\u5750\u6807\n    \u57fa\u4e8e\u8d77\u7ec8\u70b9\u5750\u6807\u751f\u6210\u5706\u5f27\u5750\u6807\n\n    Args:\n        o_loc: \u8d77\u70b9\u5750\u6807\n        d_loc: \u7ec8\u70b9\u5750\u6807\n        r: \u66f2\u5ea6\u7cfb\u6570, \u5fc5\u987b\u5927\u4e8e0.72, \u503c\u8d8a\u5c0f, \u66f2\u5ea6\u8d8a\u5927\n        sample_num: \u91c7\u6837\u70b9\u6570\u76ee\n\n    Returns:\n        \u5706\u5f27\u66f2\u7ebf\u5750\u6807\u70b9\n    \"\"\"\n    arc_line_cor = get_arrow(o_loc=o_loc, d_loc=d_loc, ratio=r, sample_num=sample_num)\n    return list(arc_line_cor)\n</code></pre> <p> </p> <p>\u8ba1\u7b97\u8d1d\u585e\u5c14\u66f2\u7ebf\u5bf9\u8c61 \u57fa\u4e8e\u76f4\u7ebf\u5bf9\u8c61\u8ba1\u7b97\u5f97\u5230\u8d1d\u585e\u5c14\u66f2\u7ebf\u5bf9\u8c61</p> <p>Parameters:</p> Name Type Description Default <code>straight_line_obj</code> <code>LineString</code> <p>\u76f4\u7ebf\u5bf9\u8c61</p> required <code>r</code> <code>float</code> <p>\u66f2\u5ea6\u7cfb\u6570, \u503c\u8d8a\u5927, \u66f2\u5ea6\u8d8a\u5927</p> <code>5.0</code> <code>sample_num</code> <code>int</code> <p>\u91c7\u6837\u70b9\u6570\u76ee</p> <code>30</code> <code>right_side</code> <code>bool</code> <p>\u662f\u5426\u5728\u62d3\u6251\u524d\u8fdb\u65b9\u5411\u7684\u53f3\u4fa7\u751f\u6210\u66f2\u7ebf</p> <code>True</code> <p>Returns:</p> Type Description <code>LineString</code> <p>\u8d1d\u585e\u5c14\u66f2\u7ebf\u5bf9\u8c61</p> Source code in <code>src/gotrackit/tools/geo_process.py</code> <pre><code>@staticmethod\ndef bezier_curve_line(straight_line_obj: LineString, r: float = 5.0, sample_num: int = 30,\n                      right_side: bool = True) -&gt; LineString:\n    \"\"\"\u8ba1\u7b97\u8d1d\u585e\u5c14\u66f2\u7ebf\u5bf9\u8c61\n    \u57fa\u4e8e\u76f4\u7ebf\u5bf9\u8c61\u8ba1\u7b97\u5f97\u5230\u8d1d\u585e\u5c14\u66f2\u7ebf\u5bf9\u8c61\n\n    Args:\n        straight_line_obj: \u76f4\u7ebf\u5bf9\u8c61\n        r: \u66f2\u5ea6\u7cfb\u6570, \u503c\u8d8a\u5927, \u66f2\u5ea6\u8d8a\u5927\n        sample_num: \u91c7\u6837\u70b9\u6570\u76ee\n        right_side: \u662f\u5426\u5728\u62d3\u6251\u524d\u8fdb\u65b9\u5411\u7684\u53f3\u4fa7\u751f\u6210\u66f2\u7ebf\n\n    Returns:\n        \u8d1d\u585e\u5c14\u66f2\u7ebf\u5bf9\u8c61\n    \"\"\"\n    o_coord, d_coord = straight_line_obj.coords[0], straight_line_obj.coords[-1]\n    arc_line_cor = calc_bezier(o_loc=o_coord, d_loc=d_coord, sample_num=sample_num, r=r, right_side=right_side)\n    return LineString(arc_line_cor)\n</code></pre> <p> </p> <p>\u8ba1\u7b97\u8d1d\u585e\u5c14\u66f2\u7ebf\u5bf9\u8c61 \u57fa\u4e8e\u76f4\u7ebf\u5bf9\u8c61\u8ba1\u7b97\u5f97\u5230\u8d1d\u585e\u5c14\u66f2\u7ebf\u5bf9\u8c61</p> <p>Parameters:</p> Name Type Description Default <code>o_loc</code> <code>list or tuple</code> <p>\u8d77\u70b9\u5750\u6807</p> <code>None</code> <code>d_loc</code> <code>list or tuple</code> <p>\u7ec8\u70b9\u5750\u6807</p> <code>None</code> <code>r</code> <code>float</code> <p>\u66f2\u5ea6\u7cfb\u6570, \u503c\u8d8a\u5927, \u66f2\u5ea6\u8d8a\u5927</p> <code>1.0</code> <code>sample_num</code> <code>int</code> <p>\u91c7\u6837\u70b9\u6570\u76ee</p> <code>30</code> <code>right_side</code> <code>bool</code> <p>\u662f\u5426\u5728\u62d3\u6251\u524d\u8fdb\u65b9\u5411\u7684\u53f3\u4fa7\u751f\u6210\u66f2\u7ebf</p> <code>True</code> <p>Returns:</p> Type Description <code>list</code> <p>\u8d1d\u585e\u5c14\u66f2\u7ebf\u7684\u5750\u6807\u70b9</p> Source code in <code>src/gotrackit/tools/geo_process.py</code> <pre><code>@staticmethod\ndef bezier_curve_cor(o_loc: list or tuple = None, d_loc: list or tuple = None, r: float = 1.0,\n                     sample_num: int = 30, right_side: bool = True) -&gt; list:\n    \"\"\"\u8ba1\u7b97\u8d1d\u585e\u5c14\u66f2\u7ebf\u5bf9\u8c61\n    \u57fa\u4e8e\u76f4\u7ebf\u5bf9\u8c61\u8ba1\u7b97\u5f97\u5230\u8d1d\u585e\u5c14\u66f2\u7ebf\u5bf9\u8c61\n\n    Args:\n        o_loc: \u8d77\u70b9\u5750\u6807\n        d_loc: \u7ec8\u70b9\u5750\u6807\n        r: \u66f2\u5ea6\u7cfb\u6570, \u503c\u8d8a\u5927, \u66f2\u5ea6\u8d8a\u5927\n        sample_num: \u91c7\u6837\u70b9\u6570\u76ee\n        right_side: \u662f\u5426\u5728\u62d3\u6251\u524d\u8fdb\u65b9\u5411\u7684\u53f3\u4fa7\u751f\u6210\u66f2\u7ebf\n\n    Returns:\n        \u8d1d\u585e\u5c14\u66f2\u7ebf\u7684\u5750\u6807\u70b9\n    \"\"\"\n    arc_line_cor = calc_bezier(o_loc=o_loc, d_loc=d_loc, r=r, sample_num=sample_num, right_side=right_side)\n    return list(arc_line_cor)\n</code></pre>"},{"location":"Func%26API/SumoConvert/","title":"SumoConvert","text":"Source code in <code>src/gotrackit/netxfer/SumoConvert.py</code> <pre><code>def __init__(self):\n    pass\n</code></pre> <p>\u4ecenet.xml\u89e3\u6790\u5fae\u89c2\u8f66\u9053\u7ea7\u8def\u7f51 :param net_path: :param crs: :param core_num :param l_threshold :return:</p> Source code in <code>src/gotrackit/netxfer/SumoConvert.py</code> <pre><code>@function_time_cost\ndef get_net_shp(self, net_path: str = None, crs: str = None, core_num: int = 1, l_threshold: float = 1.0) -&gt; \\\n        tuple[gpd.GeoDataFrame, gpd.GeoDataFrame, gpd.GeoDataFrame, gpd.GeoDataFrame, pd.DataFrame]:\n    \"\"\"\n    \u4ecenet.xml\u89e3\u6790\u5fae\u89c2\u8f66\u9053\u7ea7\u8def\u7f51\n    :param net_path:\n    :param crs:\n    :param core_num\n    :param l_threshold\n    :return:\n    \"\"\"\n    core_num = os.cpu_count() if core_num &gt; os.cpu_count() else core_num\n    net_tree = ET.parse(net_path)\n\n    net_root = net_tree.getroot()\n    location_ele = net_root.findall('location')[0]\n    try:\n        prj4_str = location_ele.get('projParameter')\n    except:\n        prj4_str = None\n\n    if crs is None:\n        assert prj4_str is not None\n        crs = 'EPSG:' + prj4_2_crs(prj4_str=prj4_str)\n    try:\n        x_offset, y_offset = list(map(float, location_ele.get('netOffset').split(',')))\n    except:\n        x_offset, y_offset = 0, 0\n\n    all_edge_ele = list(net_root.findall('edge'))\n    all_junction_ele = list(net_root.findall('junction'))\n    all_conn_ele = list(net_root.findall('connection'))\n\n    if core_num &gt; 1:\n        # \u5206\u7ec4\n        edge_ele_group = cut_group(obj_list=all_edge_ele, n=core_num)\n        junction_ele_group = cut_group(obj_list=all_junction_ele, n=core_num)\n        conn_ele_group = cut_group(obj_list=all_conn_ele, n=core_num)\n\n        edge_ele_group_len, junction_ele_group_len, conn_ele_group_len = \\\n            len(edge_ele_group), len(junction_ele_group), len(conn_ele_group)\n\n        max_len = max([edge_ele_group_len, junction_ele_group_len, conn_ele_group_len])\n\n        junction_ele_group.extend([] * (max_len - junction_ele_group_len))\n        edge_ele_group.extend([] * (max_len - edge_ele_group_len))\n        conn_ele_group.extend([] * (max_len - conn_ele_group_len))\n\n        del all_edge_ele, all_junction_ele, all_conn_ele\n\n        pool = multiprocessing.Pool(processes=core_num)\n        result_list = []\n        for i in range(len(edge_ele_group)):\n            result = pool.apply_async(self.parse_elements,\n                                      args=(edge_ele_group[i], junction_ele_group[i], conn_ele_group[i], x_offset, y_offset))\n            result_list.append(result)\n        pool.close()\n        pool.join()\n\n        # \u8f66\u9053\u7ebf, edge\u4e2d\u5fc3\u7ebf, \u4ea4\u53c9\u53e3\u9762\u57df\n        lane_gdf, avg_edge_gdf, junction_gdf, conn_df = pd.DataFrame(), pd.DataFrame(), pd.DataFrame(), pd.DataFrame()\n\n        for res in result_list:\n            _lane_df, _avg_edge_df, _junction_df, _conn_df = res.get()\n            lane_gdf = pd.concat([lane_gdf, _lane_df])\n            avg_edge_gdf = pd.concat([avg_edge_gdf, _avg_edge_df])\n            junction_gdf = pd.concat([junction_gdf, _junction_df])\n            conn_df = pd.concat([_conn_df, conn_df])\n        lane_gdf.reset_index(inplace=True, drop=True)\n        avg_edge_gdf.reset_index(inplace=True, drop=True)\n        junction_gdf.reset_index(inplace=True, drop=True)\n        conn_df.reset_index(inplace=True)\n        del result_list\n    else:\n        lane_gdf, avg_edge_gdf, junction_gdf, conn_df = self.parse_elements(edge_ele_list=all_edge_ele,\n                                                                            junction_ele_list=all_junction_ele,\n                                                                            conn_ele_list=all_conn_ele,\n                                                                            x_offset=x_offset, y_offset=y_offset)\n\n    junction_gdf = gpd.GeoDataFrame(junction_gdf, geometry=geometry_field, crs=crs)\n    lane_gdf = gpd.GeoDataFrame(lane_gdf, geometry=geometry_field, crs=crs)\n    avg_edge_gdf.drop(index=avg_edge_gdf[avg_edge_gdf['function'] == 'internal'].index, axis=0, inplace=True)\n    avg_edge_gdf = gpd.GeoDataFrame(avg_edge_gdf, geometry=geometry_field, crs=crs)\n\n    try:\n        lane_gdf[geometry_field] = lane_gdf[geometry_field].remove_repeated_points(l_threshold)\n        avg_edge_gdf[geometry_field] = avg_edge_gdf[geometry_field].remove_repeated_points(l_threshold)\n    except:\n        lane_gdf[geometry_field] = lane_gdf[geometry_field].simplify(l_threshold / 5)\n        avg_edge_gdf[geometry_field] = avg_edge_gdf[geometry_field].simplify(l_threshold / 5)\n    try:\n        lane_gdf[geometry_field] = lane_gdf[geometry_field].simplify(1e-5)\n        avg_edge_gdf[geometry_field] = avg_edge_gdf[geometry_field].simplify(1e-5)\n    except:\n        pass\n\n    lane_polygon_gdf = lane_gdf[lane_gdf['function'] != 'internal'].copy()\n    lane_polygon_gdf[geometry_field] = \\\n        lane_polygon_gdf.apply(lambda item:\n                               get_off_polygon(l=item[geometry_field],\n                                               off_line_l=(item[\n                                                               LANE_WIDTH_KEY] - 0.01) / 2),\n                               axis=1)\n    conn_df = self.process_conn(pre_conn_df=conn_df)\n\n    conn_gdf = self.tess_lane(conn_df=conn_df, lane_gdf=lane_gdf)\n\n    avg_conn = conn_gdf.drop_duplicates(subset=['from_edge', 'to_edge'], keep='first')[['from_edge', 'to_edge']]\n    avg_edge_geo_map = {edge: geo for edge, geo in zip(avg_edge_gdf['edge_id'], avg_edge_gdf[geometry_field])}\n    avg_conn[geometry_field] = avg_conn.apply(\n        lambda row: LineString([list(avg_edge_geo_map[row['from_edge']].coords)[-1],\n                                list(avg_edge_geo_map[row['to_edge']].coords)[0]]), axis=1,\n        result_type='expand')\n    del avg_conn['from_edge'], avg_conn['to_edge']\n    avg_conn['function'] = 'conn'\n    avg_conn = gpd.GeoDataFrame(avg_conn, geometry=geometry_field, crs=avg_edge_gdf.crs)\n    avg_edge_gdf = pd.concat([avg_edge_gdf, avg_conn])\n    avg_edge_gdf.reset_index(inplace=True, drop=True)\n    return lane_gdf, junction_gdf, lane_polygon_gdf, avg_edge_gdf, conn_gdf\n</code></pre>"},{"location":"Func%26API/Trajectory/","title":"Trajectory","text":"<p>\u8f68\u8ff9\u7c7b</p> <p>\u63d0\u4f9b\u4e86\u5b9a\u4f4d\u6570\u636e\u7684\u76f8\u5173\u64cd\u4f5c\u65b9\u6cd5(\u6ee4\u6ce2\u3001\u964d\u9891\u3001\u7b80\u5316\u3001\u6ed1\u52a8\u7a97\u53e3\u5e73\u5747\u3001\u5220\u9664\u505c\u7559\u70b9\u3001\u5bfc\u51faHTML\u52a8\u753b)</p> <p>Parameters:</p> Name Type Description Default <code>gps_points_df</code> <code>DataFrame</code> <p>\u5b9a\u4f4d\u6570\u636e\u8868</p> required <code>time_format</code> <code>str</code> <p>\u65f6\u95f4\u5217\u5b57\u7b26\u4e32\u683c\u5f0f\u6a21\u677f</p> <code>'%Y-%m-%d %H:%M:%S'</code> <code>time_unit</code> <code>str</code> <p>\u65f6\u95f4\u5355\u4f4d</p> <code>'s'</code> <code>plain_crs</code> <code>str</code> <p>\u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb</p> <code>'EPSG:3857'</code> Source code in <code>src/gotrackit/gps/Trajectory.py</code> <pre><code>def __init__(self, gps_points_df: pd.DataFrame, time_format: str = '%Y-%m-%d %H:%M:%S', time_unit: str = 's',\n             plain_crs: str = 'EPSG:3857', already_plain: bool = False):\n    \"\"\"\u8f68\u8ff9\u7c7b\n\n    \u63d0\u4f9b\u4e86\u5b9a\u4f4d\u6570\u636e\u7684\u76f8\u5173\u64cd\u4f5c\u65b9\u6cd5(\u6ee4\u6ce2\u3001\u964d\u9891\u3001\u7b80\u5316\u3001\u6ed1\u52a8\u7a97\u53e3\u5e73\u5747\u3001\u5220\u9664\u505c\u7559\u70b9\u3001\u5bfc\u51faHTML\u52a8\u753b)\n\n    Args:\n        gps_points_df: \u5b9a\u4f4d\u6570\u636e\u8868\n        time_format: \u65f6\u95f4\u5217\u5b57\u7b26\u4e32\u683c\u5f0f\u6a21\u677f\n        time_unit: \u65f6\u95f4\u5355\u4f4d\n        plain_crs: \u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb\n\n    \"\"\"\n    self.time_format = time_format\n    self.time_unit = time_unit\n    user_field_list = list(set(gps_points_df.columns) - {agent_field, lng_field, lat_field, time_field,\n                                                         gps_field.POINT_SEQ_FIELD})\n    user_field_list = self.check(gps_points_df=gps_points_df, user_field_list=user_field_list)\n    GpsPointsGdf.__init__(self, gps_points_df=gps_points_df, time_format=time_format, time_unit=time_unit,\n                          plane_crs=plain_crs, already_plain=already_plain, multi_agents=True,\n                          user_filed_list=user_field_list)\n</code></pre> <p> </p> <p>\u589e\u5bc6</p> <p>\u5bf9\u5b9a\u4f4d\u70b9\u8fdb\u884c\u7ebf\u6027\u589e\u5bc6</p> <p>Parameters:</p> Name Type Description Default <code>dense_interval</code> <code>float</code> <p>\u589e\u5bc6\u9608\u503c(\u7c73), \u5f53\u76f8\u90bbGPS\u70b9\u7684\u7403\u9762\u8ddd\u79bbL\u8d85\u8fc7dense_interval\u5373\u8fdb\u884c\u589e\u5bc6, \u8fdb\u884c int(L / dense_interval) + 1 \u7b49\u5206\u52a0\u5bc6</p> <code>120.0</code> <p>Returns:</p> Type Description <p>self</p> Source code in <code>src/gotrackit/gps/LocGps.py</code> <pre><code>def dense(self, dense_interval: float = 120.0):\n    \"\"\"\u589e\u5bc6\n\n    \u5bf9\u5b9a\u4f4d\u70b9\u8fdb\u884c\u7ebf\u6027\u589e\u5bc6\n\n    Args:\n        dense_interval: \u589e\u5bc6\u9608\u503c(\u7c73), \u5f53\u76f8\u90bbGPS\u70b9\u7684\u7403\u9762\u8ddd\u79bbL\u8d85\u8fc7dense_interval\u5373\u8fdb\u884c\u589e\u5bc6, \u8fdb\u884c int(L / dense_interval) + 1 \u7b49\u5206\u52a0\u5bc6\n\n    Returns:\n        self\n    \"\"\"\n    if len(self.__gps_points_gdf) &lt;= 1:\n        return self\n    # \u65f6\u95f4\u5dee\u548c\u8ddd\u79bb\u5dee\n    self.calc_adj_dis_gap()\n    self.calc_adj_time_gap()\n    not_same_agent_idx = self.not_same_agent_idx()\n    choose_idx = (self.__gps_points_gdf[dis_gap_field] &gt; dense_interval) &amp; ~not_same_agent_idx\n    self.__gps_points_gdf['all_idx'] = [i for i in range(len(self.__gps_points_gdf))]\n    self.__gps_points_gdf[n_seg_field] = 0\n    should_be_dense_gdf = self.__gps_points_gdf[choose_idx].copy()\n    self.__gps_points_gdf.drop(columns=[next_time_field, next_p_field, time_gap_field, dis_gap_field], axis=1,\n                               inplace=True)\n    if should_be_dense_gdf.empty:\n        return self\n\n    should_be_dense_gdf[n_seg_field] = (0.001 + should_be_dense_gdf[dis_gap_field] / dense_interval).astype(\n        int) + 1\n    should_be_dense_gdf[n_seg_field] = should_be_dense_gdf[n_seg_field].apply(lambda n: [x for x in range(1, n)])\n    del should_be_dense_gdf[geometry_field]\n    should_be_dense_gdf = should_be_dense_gdf[[agent_field, n_seg_field, 'all_idx']].copy()\n    should_be_dense_gdf = should_be_dense_gdf.explode(column=n_seg_field, ignore_index=True)\n\n    self.__gps_points_gdf = pd.concat([self.__gps_points_gdf, should_be_dense_gdf])\n    self.__gps_points_gdf.sort_values(by=[agent_field, 'all_idx', n_seg_field], inplace=True)\n    self.__gps_points_gdf.reset_index(inplace=True, drop=True)\n    self.__gps_points_gdf[gps_field.POINT_SEQ_FIELD] = \\\n        self.__gps_points_gdf[gps_field.POINT_SEQ_FIELD].fillna(-1).astype(np.int64)\n\n    self.__gps_points_gdf[[time_field, 'prj_x', 'prj_y']] = self.__gps_points_gdf[\n        [time_field, 'prj_x', 'prj_y']].interpolate(method='linear')\n    del self.__gps_points_gdf['all_idx'], self.__gps_points_gdf[n_seg_field]\n\n    # must be plain\n    dense_idx = self.__gps_points_gdf[gps_field.POINT_SEQ_FIELD] == -1\n    self.__gps_points_gdf.loc[dense_idx, geometry_field] = gpd.points_from_xy(\n        self.__gps_points_gdf.loc[dense_idx, 'prj_x'],\n        self.__gps_points_gdf.loc[dense_idx, 'prj_y'], crs=self.plane_crs)\n\n    self.__gps_points_gdf[ori_seq_field] = self.__gps_points_gdf[gps_field.POINT_SEQ_FIELD]\n\n    # self.__gps_points_gdf = pd.concat([self.__gps_points_gdf, should_be_dense_gdf])\n    # self.__gps_points_gdf.sort_values(by=[agent_field, time_field], ascending=[True, True], inplace=True)\n    # self.__gps_points_gdf.reset_index(inplace=True, drop=True)\n    self.add_seq_field(gps_points_gdf=self.__gps_points_gdf, multi_agents=self.multi_agents)\n    #\n    if not self.__user_gps_info.empty:\n        self.__user_gps_info[ori_seq_field] = self.__user_gps_info[gps_field.POINT_SEQ_FIELD]\n        del self.__user_gps_info[gps_field.POINT_SEQ_FIELD]\n        self.__user_gps_info = pd.merge(self.__user_gps_info, self.__gps_points_gdf[\n            [ori_seq_field, gps_field.POINT_SEQ_FIELD, agent_field]], on=[ori_seq_field, agent_field],\n                                        how='left')\n        self.__user_gps_info[gps_field.POINT_SEQ_FIELD] = self.__user_gps_info[gps_field.POINT_SEQ_FIELD].fillna(\n            -1).astype(np.int64)\n        del self.__user_gps_info[ori_seq_field]\n    del self.__gps_points_gdf[ori_seq_field]\n    return self\n</code></pre> <p> </p> <p>\u964d\u9891</p> <p>\u5bf9\u5b9a\u4f4d\u6570\u636e\u8fdb\u884c\u964d\u9891\u91c7\u6837</p> <p>Parameters:</p> Name Type Description Default <code>lower_n</code> <code>int</code> <p>\u964d\u9891\u500d\u6570</p> <code>2</code> <code>multi_agents</code> <code>bool</code> <code>True</code> <p>Returns:</p> Type Description <p>self</p> Source code in <code>src/gotrackit/gps/LocGps.py</code> <pre><code>def lower_frequency(self, lower_n: int = 2, multi_agents: bool = True):\n    \"\"\"\u964d\u9891\n\n    \u5bf9\u5b9a\u4f4d\u6570\u636e\u8fdb\u884c\u964d\u9891\u91c7\u6837\n\n    Args:\n        lower_n: \u964d\u9891\u500d\u6570\n        multi_agents:\n\n    Returns:\n        self\n    \"\"\"\n    if multi_agents:\n        self.__gps_points_gdf['label'] = self.__gps_points_gdf.groupby(agent_field).cumcount() % lower_n\n        self.__gps_points_gdf = self.__gps_points_gdf[self.__gps_points_gdf['label'].eq(0)].copy()\n    else:\n        self.__gps_points_gdf['label'] = pd.Series([i for i in range(len(self.__gps_points_gdf))]) % lower_n\n        self.__gps_points_gdf = self.__gps_points_gdf[self.__gps_points_gdf['label'].eq(0)].copy()\n    del self.__gps_points_gdf['label']\n    return self\n</code></pre> <p> </p> <p>\u6ee4\u6ce2\u5e73\u6ed1</p> <p>\u4f7f\u7528\u5361\u5c14\u66fc\u6ee4\u6ce2\u5bf9\u8f68\u8ff9\u6570\u636e\u8fdb\u884c\u5e73\u6ed1</p> <p>Parameters:</p> Name Type Description Default <code>p_deviation</code> <code>list or float</code> <p>\u8fc7\u7a0b\u566a\u58f0\u7684\u6807\u51c6\u5dee</p> <code>0.01</code> <code>o_deviation</code> <code>list or float</code> <p>\u89c2\u6d4b\u566a\u58f0\u7684\u6807\u51c6\u5dee, \u8be5\u503c\u8d8a\u5c0f, \u5e73\u6ed1\u540e\u7684\u7ed3\u679c\u5c31\u8d8a\u63a5\u8fd1\u539f\u8f68\u8ff9</p> <code>0.1</code> <p>Returns:</p> Type Description <p>self</p> Source code in <code>src/gotrackit/gps/LocGps.py</code> <pre><code>def kf_smooth(self, p_deviation: list or float = 0.01, o_deviation: list or float = 0.1):\n    \"\"\"\u6ee4\u6ce2\u5e73\u6ed1\n\n    \u4f7f\u7528\u5361\u5c14\u66fc\u6ee4\u6ce2\u5bf9\u8f68\u8ff9\u6570\u636e\u8fdb\u884c\u5e73\u6ed1\n\n    Args:\n        p_deviation: \u8fc7\u7a0b\u566a\u58f0\u7684\u6807\u51c6\u5dee\n        o_deviation: \u89c2\u6d4b\u566a\u58f0\u7684\u6807\u51c6\u5dee, \u8be5\u503c\u8d8a\u5c0f, \u5e73\u6ed1\u540e\u7684\u7ed3\u679c\u5c31\u8d8a\u63a5\u8fd1\u539f\u8f68\u8ff9\n\n    Returns:\n        self\n    \"\"\"\n    tks = OffLineTrajectoryKF(trajectory_df=self.__gps_points_gdf,\n                              x_field=gps_field.PLAIN_X, y_field=gps_field.PLAIN_Y)\n    self.__gps_points_gdf = tks.execute(p_deviation=p_deviation, o_deviation=o_deviation)\n    # self.__gps_points_gdf[geometry_field] = self.__gps_points_gdf[[gps_field.PLAIN_X, gps_field.PLAIN_Y]].apply(\n    #     lambda x: Point(x), axis=1)\n    # print(self.__gps_points_gdf.crs)\n    self.__gps_points_gdf[geometry_field] = gpd.points_from_xy(self.__gps_points_gdf[gps_field.PLAIN_X],\n                                                               self.__gps_points_gdf[gps_field.PLAIN_Y],\n                                                               crs=self.__gps_points_gdf.crs)\n    # print(self.__gps_points_gdf.crs)\n    return self\n</code></pre> <p> </p> <p>\u6ed1\u52a8\u7a97\u53e3</p> <p>\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u5bf9\u5b9a\u4f4d\u6570\u636e\u8fdb\u884c\u5e73\u6ed1, \u53ea\u8981\u542f\u7528\u4e86\u8be5\u64cd\u4f5c, \u90a3\u4e48user_field_list\u81ea\u52a8\u5931\u6548</p> <p>Parameters:</p> Name Type Description Default <code>rolling_window</code> <code>int</code> <p>\u6ed1\u52a8\u7a97\u53e3\u5927\u5c0f</p> <code>2</code> <code>multi_agents</code> <code>bool</code> <code>True</code> <p>Returns:</p> Type Description <p>self</p> Source code in <code>src/gotrackit/gps/LocGps.py</code> <pre><code>def rolling_average(self, multi_agents: bool = True, rolling_window: int = 2):\n    \"\"\"\u6ed1\u52a8\u7a97\u53e3\n\n    \u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u5bf9\u5b9a\u4f4d\u6570\u636e\u8fdb\u884c\u5e73\u6ed1, \u53ea\u8981\u542f\u7528\u4e86\u8be5\u64cd\u4f5c, \u90a3\u4e48user_field_list\u81ea\u52a8\u5931\u6548\n\n    Args:\n        rolling_window: \u6ed1\u52a8\u7a97\u53e3\u5927\u5c0f\n        multi_agents:\n\n    Returns:\n        self\n    \"\"\"\n    # \u6ed1\u52a8\u7a97\u53e3\u6267\u884c\u540e\u4f1a\u91cd\u7f6e\u6240\u6709\u7684gps\u7684seq\u5b57\u6bb5\n    if len(self.__gps_points_gdf) &lt;= rolling_window:\n        return self\n\n    self.__gps_points_gdf[gps_field.TIME_FIELD] = self.__gps_points_gdf[gps_field.TIME_FIELD].apply(\n        lambda t: t.timestamp())\n    self.__gps_points_gdf.reset_index(inplace=True, drop=True)\n\n    self.__gps_points_gdf = \\\n        self.__gps_points_gdf.groupby(agent_field)[\n            [gps_field.PLAIN_X, gps_field.PLAIN_Y,\n             gps_field.TIME_FIELD]].rolling(window=rolling_window, min_periods=1).mean().reset_index(drop=False)\n    try:\n        del self.__gps_points_gdf['level_1']\n    except Exception as e:\n        print(repr(e))\n\n    self.__gps_points_gdf.dropna(subset=[gps_field.PLAIN_X, gps_field.PLAIN_Y,\n                                         gps_field.TIME_FIELD], inplace=True, how='any')\n    self.__gps_points_gdf.reset_index(inplace=True, drop=True)\n\n    self.add_seq_field(gps_points_gdf=self.__gps_points_gdf, multi_agents=multi_agents)\n\n    self.__gps_points_gdf[net_field.GEOMETRY_FIELD] = \\\n        self.__gps_points_gdf[[gps_field.PLAIN_X, gps_field.PLAIN_Y]].apply(lambda item: Point(item), axis=1)\n    self.__gps_points_gdf[gps_field.TIME_FIELD] = \\\n        pd.to_datetime(self.__gps_points_gdf[gps_field.TIME_FIELD], unit='s')\n    self.__gps_points_gdf = gpd.GeoDataFrame(self.__gps_points_gdf, geometry=gps_field.GEOMETRY_FIELD, crs=self.crs)\n    self.__user_gps_info = self.__gps_points_gdf[[gps_field.AGENT_ID_FIELD, gps_field.POINT_SEQ_FIELD]].copy()\n    self.__user_gps_info[gps_field.LOC_TYPE] = 's'\n    self.user_filed_list = []\n    return self\n</code></pre> <p> </p> <p>\u505c\u7559\u70b9\u8bc6\u522b</p> <p>\u57fa\u4e8e\u8ddd\u79bb\u9608\u503c\u5bf9\u505c\u7559\u70b9\u8fdb\u884c\u8bc6\u522b\u5e76\u4e14\u8fdb\u884c\u5220\u9664</p> <p>Parameters:</p> Name Type Description Default <code>dwell_l_length</code> <code>float</code> <p>\u505c\u7559\u70b9\u8bc6\u522b\u8ddd\u79bb\u9608\u503c(\u7c73)</p> <code>5.0</code> <code>dwell_n</code> <code>int</code> <p>\u8d85\u8fc7\u8fde\u7eeddwell_n\u4e2a\u76f8\u90bbGPS\u70b9\u7684\u8ddd\u79bb\u5c0f\u4e8edwell_l_length\uff0c\u90a3\u4e48\u8fd9\u4e00\u7ec4\u70b9\u5c31\u4f1a\u88ab\u8bc6\u522b\u4e3a\u505c\u7559\u70b9</p> <code>2</code> <p>Returns:</p> Type Description <p>self</p> Source code in <code>src/gotrackit/gps/LocGps.py</code> <pre><code>def del_dwell_points(self, dwell_l_length: float = 5.0, dwell_n: int = 2):\n    \"\"\"\u505c\u7559\u70b9\u8bc6\u522b\n\n    \u57fa\u4e8e\u8ddd\u79bb\u9608\u503c\u5bf9\u505c\u7559\u70b9\u8fdb\u884c\u8bc6\u522b\u5e76\u4e14\u8fdb\u884c\u5220\u9664\n\n    Args:\n        dwell_l_length: \u505c\u7559\u70b9\u8bc6\u522b\u8ddd\u79bb\u9608\u503c(\u7c73)\n        dwell_n: \u8d85\u8fc7\u8fde\u7eeddwell_n\u4e2a\u76f8\u90bbGPS\u70b9\u7684\u8ddd\u79bb\u5c0f\u4e8edwell_l_length\uff0c\u90a3\u4e48\u8fd9\u4e00\u7ec4\u70b9\u5c31\u4f1a\u88ab\u8bc6\u522b\u4e3a\u505c\u7559\u70b9\n\n    Returns:\n        self\n    \"\"\"\n    # add field = dis_gap_field\n    self.calc_adj_dis_gap()\n    del self.__gps_points_gdf[next_p_field]\n    self.__gps_points_gdf['dwell_label'] = \\\n        (self.__gps_points_gdf[dis_gap_field] &gt; dwell_l_length).astype(int)\n    del self.__gps_points_gdf[dis_gap_field]\n\n    not_same_agent_idx = self.not_same_agent_idx()\n    self.__gps_points_gdf.loc[not_same_agent_idx, 'dwell_label'] = 1\n    self.__gps_points_gdf.loc[self.__gps_points_gdf.tail(1).index, 'dwell_label'] = 1\n    self.__gps_points_gdf = self.del_consecutive_zero(df=self.__gps_points_gdf, col='dwell_label', n=dwell_n)\n    del self.__gps_points_gdf['dwell_label']\n    try:\n        self.__gps_points_gdf.drop(columns=[sub_group_field], axis=1, inplace=True)\n    except KeyError:\n        pass\n    return self\n</code></pre> <p> </p> <p>\u7b80\u5316\u8f68\u8ff9</p> <p>\u5229\u7528\u9053\u683c\u62c9\u65af-\u666e\u514b\u7b97\u6cd5\u5bf9\u8f68\u8ff9\u8fdb\u884c\u62bd\u7a00\u7b80\u5316</p> <p>Parameters:</p> Name Type Description Default <code>l_threshold</code> <code>float</code> <p>\u62bd\u7a00\u9608\u503c(\u7c73)</p> <code>5.0</code> <p>Returns:</p> Type Description <p>self</p> Source code in <code>src/gotrackit/gps/LocGps.py</code> <pre><code>def simplify_trajectory(self, l_threshold: float = 5.0):\n    \"\"\"\u7b80\u5316\u8f68\u8ff9\n\n    \u5229\u7528\u9053\u683c\u62c9\u65af-\u666e\u514b\u7b97\u6cd5\u5bf9\u8f68\u8ff9\u8fdb\u884c\u62bd\u7a00\u7b80\u5316\n\n    Args:\n        l_threshold: \u62bd\u7a00\u9608\u503c(\u7c73)\n\n    Returns:\n        self\n    \"\"\"\n    agent_count = self.__gps_points_gdf.groupby(agent_field)[[time_field]].count().rename(columns={time_field: 'c'})\n    one_agent = list(agent_count[agent_count['c'] &lt;= 1].index)\n    process_trajectory = self.__gps_points_gdf[~self.__gps_points_gdf[agent_field].isin(one_agent)].copy()\n\n    if not process_trajectory.empty:\n        process_trajectory.reset_index(inplace=True, drop=True)\n\n        no_process_gps = self.__gps_points_gdf[self.__gps_points_gdf[agent_field].isin(one_agent)].copy()\n\n        origin_crs = self.__gps_points_gdf.crs\n        del self.__gps_points_gdf\n\n        line_gdf = process_trajectory.groupby(agent_field)[[geometry_field]].agg(\n            {geometry_field: list}).reset_index(drop=False)\n        line_gdf[geometry_field] = line_gdf[geometry_field].apply(lambda p: LineString(p))\n        line_gdf = gpd.GeoDataFrame(line_gdf, geometry=geometry_field, crs=origin_crs)\n        line_gdf[geometry_field] = line_gdf[geometry_field].simplify(l_threshold)\n\n        p_simplify_line = pd.merge(process_trajectory[[gps_field.AGENT_ID_FIELD]],\n                                   line_gdf, on=gps_field.AGENT_ID_FIELD, how='left')\n        p_simplify_line = gpd.GeoSeries(p_simplify_line[geometry_field])\n\n        # origin point prj to simplify\n        prj_p_array = p_simplify_line.project(process_trajectory[geometry_field])\n\n        process_trajectory[geometry_field] = p_simplify_line.interpolate(prj_p_array)\n\n        if not no_process_gps.empty:\n            self.__gps_points_gdf = pd.concat([process_trajectory, no_process_gps])\n        self.__gps_points_gdf = process_trajectory\n        self.__gps_points_gdf.reset_index(inplace=True, drop=True)\n    return self\n</code></pre> <p> </p> <p>\u83b7\u53d6\u8f68\u8ff9</p> <p>\u83b7\u53d6\u5904\u7406\u540e\u7684\u8f68\u8ff9\u6570\u636e(\u652f\u6301DataFrame\u548cGeoDataFrame)</p> <p>Parameters:</p> Name Type Description Default <code>export_crs</code> <code>str</code> <p>\u8f93\u51fa\u7ed3\u679c\u7684\u5750\u6807\u7cfb</p> <code>'EPSG:4326'</code> <code>_type</code> <code>str</code> <p>\u8f93\u51fa\u7ed3\u679c\u7684\u7c7b\u578b, gdf\u6216\u8005df</p> <code>'gdf'</code> <p>Returns:</p> Type Description <code>GeoDataFrame or DataFrame</code> <p>\u8f68\u8ff9\u6570\u636e</p> Source code in <code>src/gotrackit/gps/LocGps.py</code> <pre><code>def trajectory_data(self, export_crs: str = 'EPSG:4326', _type: str = \"gdf\") -&gt; gpd.GeoDataFrame or pd.DataFrame:\n    \"\"\"\u83b7\u53d6\u8f68\u8ff9\n\n    \u83b7\u53d6\u5904\u7406\u540e\u7684\u8f68\u8ff9\u6570\u636e(\u652f\u6301DataFrame\u548cGeoDataFrame)\n\n    Args:\n        export_crs: \u8f93\u51fa\u7ed3\u679c\u7684\u5750\u6807\u7cfb\n        _type: \u8f93\u51fa\u7ed3\u679c\u7684\u7c7b\u578b, gdf\u6216\u8005df\n\n    Returns:\n        \u8f68\u8ff9\u6570\u636e\n    \"\"\"\n    export_trajectory = self.__gps_points_gdf.copy()\n    try:\n        del export_trajectory[gps_field.PLAIN_X], export_trajectory[gps_field.PLAIN_Y]\n    except Exception as e:\n        print(repr(e))\n    export_trajectory = export_trajectory.to_crs(export_crs)\n    export_trajectory = pd.merge(export_trajectory, self.__user_gps_info,\n                                 on=[agent_field, gps_field.POINT_SEQ_FIELD], how='left')\n    export_trajectory[gps_field.LOC_TYPE] = export_trajectory[gps_field.LOC_TYPE].fillna('d')\n    export_trajectory[lng_field] = export_trajectory[geometry_field].x\n    export_trajectory[lat_field] = export_trajectory[geometry_field].y\n    if _type == 'df':\n        del export_trajectory[geometry_field]\n        return export_trajectory\n    return export_trajectory\n</code></pre> <p> </p> <p>\u5bfc\u51faHTML</p> <p>\u5c06\u5904\u7406\u540e\u7684\u8f68\u8ff9\u5bfc\u51fa\u4e3aHTML\uff0c\u53ef\u52a8\u6001\u5c55\u793a\u5904\u7406\u524d\u540e\u7684\u8f68\u8ff9</p> <p>Parameters:</p> Name Type Description Default <code>out_fldr</code> <code>str</code> <p>\u5b58\u50a8\u76ee\u5f55</p> <code>'./'</code> <code>file_name</code> <code>str</code> <p>\u6587\u4ef6\u540d\u79f0</p> <code>'trajectory'</code> <code>radius</code> <code>float</code> <p>\u70b9\u7684\u534a\u5f84\u5927\u5c0f</p> <code>10.0</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>src/gotrackit/gps/Trajectory.py</code> <pre><code>def export_html(self, out_fldr: str = r'./', file_name: str = 'trajectory', radius: float = 10.0):\n    \"\"\"\u5bfc\u51faHTML\n\n    \u5c06\u5904\u7406\u540e\u7684\u8f68\u8ff9\u5bfc\u51fa\u4e3aHTML\uff0c\u53ef\u52a8\u6001\u5c55\u793a\u5904\u7406\u524d\u540e\u7684\u8f68\u8ff9\n\n    Args:\n        out_fldr: \u5b58\u50a8\u76ee\u5f55\n        file_name: \u6587\u4ef6\u540d\u79f0\n        radius: \u70b9\u7684\u534a\u5f84\u5927\u5c0f\n\n    Returns:\n        None\n    \"\"\"\n    if self.already_plain:\n        origin_tj_df = self.source_gps.to_crs(prj_const.PRJ_CRS)\n        origin_tj_df = origin_tj_df[[agent_field, time_field, geometry_field]].copy()\n        origin_tj_df[lng_field] = origin_tj_df[geometry_field].x\n        origin_tj_df[lat_field] = origin_tj_df[geometry_field].y\n        del origin_tj_df[geometry_field]\n    else:\n        origin_tj_df = self.source_gps[[agent_field, lng_field, lat_field, time_field]].copy()\n\n    tj_gdf = self.trajectory_data(export_crs=prj_const.PRJ_CRS, _type='df')\n    if {gps_field.X_SPEED_FIELD, gps_field.Y_SPEED_FIELD}.issubset(set(tj_gdf.columns)):\n        tj_df = tj_gdf[[agent_field, lng_field, lat_field,\n                        gps_field.X_SPEED_FIELD, gps_field.Y_SPEED_FIELD, time_field]].copy()\n    else:\n        tj_df = tj_gdf[[agent_field, lng_field, lat_field, time_field]].copy()\n    del tj_gdf\n    tj_df['type'] = 'process'\n    origin_tj_df['type'] = 'source'\n    tj_df[time_field] = tj_df[time_field].astype(origin_tj_df[time_field].dtype)\n    df = pd.concat([tj_df, origin_tj_df]).reset_index(drop=True, inplace=False)\n    for agent_id, _df in df.groupby(agent_field):\n        vis_df = pd.DataFrame(_df)\n        vis_df.sort_values(by='type', ascending=False, inplace=True)\n        cen_x, cen_y = vis_df[gps_field.LNG_FIELD].mean(), vis_df[gps_field.LAT_FIELD].mean()\n        # vis_df[gps_field.TIME_FIELD] = vis_df[gps_field.TIME_FIELD].astype(str)\n        try:\n            kv = KeplerVis(cen_loc=[cen_x, cen_y])\n            kv.add_point_layer(vis_df, lng_field=lng_field, lat_field=lat_field, time_format=self.time_format,\n                               time_unit=self.time_unit, set_avg_zoom=False, radius=radius,\n                               time_field=time_field, layer_id='trajectory', color=[65, 72, 88],\n                               color_field='type',\n                               color_list=['#438ECD', '#FFC300'])\n            kv.export_html(out_fldr=out_fldr, file_name=rf'{agent_id}_' + file_name)\n        except Exception as e:\n            print(repr(e))\n</code></pre>"},{"location":"Func%26API/grid/","title":"Grid","text":"<p>\u6e14\u7f51(\u6805\u683c)\u5212\u5206</p> <p>\u5bf9\u9762\u57df\u56fe\u5c42\u8fdb\u884c\u6805\u683c\u5212\u5206</p> <p>Parameters:</p> Name Type Description Default <code>polygon_gdf</code> <code>GeoDataFrame</code> <p>\u9762\u57dfGeoDataFrame</p> required <code>meter_step</code> <code>float</code> <p>\u6805\u683c\u8fb9\u957f(\u7c73)</p> <code>None</code> <code>is_geo_coord</code> <code>bool</code> <p>\u662f\u5426\u662f\u5730\u7406\u5750\u6807</p> <code>True</code> <code>generate_index</code> <code>bool</code> <p>\u662f\u5426\u751f\u6210\u884c\u5217\u7d22\u5f15</p> <code>True</code> <p>Returns:</p> Type Description <code>GeoDataFrame</code> <p>\u6805\u683cGeoDataFrame</p> Source code in <code>src/gotrackit/tools/grid.py</code> <pre><code>def get_grid_data(polygon_gdf: gpd.GeoDataFrame, meter_step: float = None, is_geo_coord: bool = True,\n                  generate_index: bool = True) -&gt; gpd.GeoDataFrame:\n    \"\"\"\u6e14\u7f51(\u6805\u683c)\u5212\u5206\n\n    \u5bf9\u9762\u57df\u56fe\u5c42\u8fdb\u884c\u6805\u683c\u5212\u5206\n\n    Args:\n        polygon_gdf: \u9762\u57dfGeoDataFrame\n        meter_step: \u6805\u683c\u8fb9\u957f(\u7c73)\n        is_geo_coord: \u662f\u5426\u662f\u5730\u7406\u5750\u6807\n        generate_index: \u662f\u5426\u751f\u6210\u884c\u5217\u7d22\u5f15\n\n    Returns:\n        \u6805\u683cGeoDataFrame\n    \"\"\"\n    crs = polygon_gdf.crs\n    geo_list = polygon_gdf[geometry_field].to_list()\n    polygon_obj = unary_union(geo_list)\n\n    # \u6839\u636e\u6805\u683c\u533a\u57df\u5927\u5c0f\u5bf9\u9762\u57df\u8fdb\u884c\u6805\u683c\u5212\u5206\n    grid_gdf = generate_mesh(polygon_obj=polygon_obj, meter_step=meter_step, is_geo_coord=is_geo_coord, crs=crs,\n                             generate_index=generate_index)\n\n    grid_gdf = gpd.GeoDataFrame(grid_gdf, geometry=geometry_field, crs=crs)\n    grid_gdf = gpd.sjoin(grid_gdf, polygon_gdf[[geometry_field]])\n    del grid_gdf['index_right']\n    grid_gdf.reset_index(inplace=True, drop=True)\n    if generate_index:\n        return grid_gdf[['grid_id', 'dx', 'dy', geometry_field]]\n    else:\n        return grid_gdf[['grid_id', geometry_field]]\n</code></pre>"},{"location":"UserGuide/GIS%E5%B7%A5%E5%85%B7/","title":"GIS\u5de5\u5177","text":""},{"location":"UserGuide/GIS%E5%B7%A5%E5%85%B7/#_1","title":"\u751f\u6210\u6e14\u7f51\u56fe\u5c42(\u5207\u5206\u6805\u683c)","text":"<p>\u4f20\u5165\u4e00\u4e2ageometry\u5217\u662fPolygon\u7c7b\u578b\u7684\u9762\u57dfGeoDataFrame\uff0cget_grid_data\u51fd\u6570\u53ef\u4ee5\u5e2e\u52a9\u4f60\u5207\u5206\u6805\u683c</p> <pre><code># 1. \u4ecegotrackit\u5bfc\u5165\u6805\u683c\u5207\u5206\u51fd\u6570\nfrom gotrackit.tools.grid import get_grid_data\nimport geopandas as gpd\n\nif __name__ == '__main__':\n    region_gdf = gpd.read_file(r'region.shp')\n    grid_gdf = get_grid_data(polygon_gdf=region_gdf, \n                             meter_step=100.0, is_geo_coord=True, generate_index=True)\n    grid_gdf.to_file(r'grid.shp', encoding='gbk')\n</code></pre> \u6805\u683c\u5316\u524d\u6805\u683c\u5316\u540e <p> </p> <p> </p>"},{"location":"UserGuide/GIS%E5%B7%A5%E5%85%B7/#_2","title":"\u5750\u6807\u8f6c\u6362","text":"<p>\u63d0\u4f9b\u4e86 GCJ-02\u3001wgs84\u3001\u767e\u5ea6 \u5750\u6807\u7cfb\u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362\u63a5\u53e3</p>"},{"location":"UserGuide/GIS%E5%B7%A5%E5%85%B7/#_3","title":"\u5355\u70b9\u8f6c\u6362","text":"<p>\u4f7f\u7528loc_convert\u51fd\u6570\uff1a</p> <pre><code>&gt;&gt;&gt; from gotrackit.tools.coord_trans import LngLatTransfer\n&gt;&gt;&gt; trans = LngLatTransfer()\n&gt;&gt;&gt; trans_x, trans_y = trans.loc_convert(lng=114.361, lat=22.362, con_type='bd-84')\n</code></pre>"},{"location":"UserGuide/GIS%E5%B7%A5%E5%85%B7/#_4","title":"\u591a\u70b9\u8f6c\u6362","text":"<p>\u4f7f\u7528loc_convert\u51fd\u6570\uff1a</p> <pre><code>&gt;&gt;&gt; from gotrackit.tools.coord_trans import LngLatTransfer\n&gt;&gt;&gt; trans = LngLatTransfer()\n&gt;&gt;&gt; trans_x, trans_y = trans.loc_convert(lng=np.array([114.361, 114.362]), lat=np.array([22.362, 33.361]), con_type='gc-84')\n</code></pre>"},{"location":"UserGuide/GIS%E5%B7%A5%E5%85%B7/#_5","title":"\u51e0\u4f55\u5bf9\u8c61\u8f6c\u6362","text":"<p>\u4f7f\u7528obj_convert\u51fd\u6570\uff1a</p> <pre><code>&gt;&gt;&gt; from gotrackit.tools.coord_trans import LngLatTransfer\n&gt;&gt;&gt; from shapely.geometry import LineString\n&gt;&gt;&gt; trans = LngLatTransfer()\n&gt;&gt;&gt; l = LineString([(114.325, 22.36), (114.66, 22.365), (114.321, 22.452)])\n&gt;&gt;&gt; trans_line = trans.obj_convert(geo_obj=l, con_type='gc-bd', ignore_z=True)\n</code></pre>"},{"location":"UserGuide/GIS%E5%B7%A5%E5%85%B7/#geodataframe","title":"GeoDataFrame\u8f6c\u6362","text":"<p>\u4f7f\u7528gdf_convert\u51fd\u6570\uff1a</p> <pre><code>&gt;&gt;&gt; from gotrackit.tools.coord_trans import LngLatTransfer\n&gt;&gt;&gt; import geopandas as gpd\n&gt;&gt;&gt; trans = LngLatTransfer()\n&gt;&gt;&gt; gdf = gpd.read_file(r'./data/XXX.geojson')\n&gt;&gt;&gt; gdf = gdf.to_crs('EPSG:4326')\n&gt;&gt;&gt; new_gdf = trans.geo_convert(gdf=gdf, ignore_z=True, con_type='84-gc')\n</code></pre>"},{"location":"UserGuide/GIS%E5%B7%A5%E5%85%B7/#_6","title":"\u6587\u4ef6\u8f6c\u6362","text":"<p>\u4f7f\u7528file_convert\u51fd\u6570\uff1a</p> <pre><code>&gt;&gt;&gt; from gotrackit.tools.coord_trans import LngLatTransfer\n&gt;&gt;&gt; trans = LngLatTransfer()\n&gt;&gt;&gt; trans.file_convert(file_path=r'./xxx.geojson', ignore_z=True, con_type='bd-gc', out_fldr=r'./', out_file_name=r'xfer', file_type='geojson')\n</code></pre>"},{"location":"UserGuide/GIS%E5%B7%A5%E5%85%B7/#_7","title":"\u76f4\u7ebf\u8f6c\u5f27\u7ebf","text":"<p>StraightLineToArc\u7c7b\u652f\u6301\u76f4\u7ebf\u8f6c\u5f27\u7ebf\u7684\u529f\u80fd\uff0c\u63d0\u4f9b\u5706\u5f27\u3001\u8d1d\u585e\u5c14\u5f27\u7ebf\u4e24\u79cd\u7c7b\u578b\u3002</p>"},{"location":"UserGuide/GIS%E5%B7%A5%E5%85%B7/#_8","title":"\u57fa\u4e8e\u8d77\u7ec8\u70b9\u5750\u6807\u5f97\u5230\u5706\u5f27\u5750\u6807","text":"<p>\u4f7f\u7528\u7c7b\u9759\u6001\u65b9\u6cd5arc_curve_cor:</p> <pre><code>&gt;&gt;&gt; from gotrackit.tools.geo_process import StraightLineToArc\n&gt;&gt;&gt; sla = StraightLineToArc()\n&gt;&gt;&gt; coords_list = sla.arc_curve_cor(o_loc=[114.212, 22.31], d_loc=[114.312, 22.131], r=1.2, sample_num=30)\n&gt;&gt;&gt; print(coords_list)\n</code></pre>"},{"location":"UserGuide/GIS%E5%B7%A5%E5%85%B7/#linestring","title":"\u57fa\u4e8eLineString\u5f97\u5230\u5706\u5f27\u7ebf\u5bf9\u8c61","text":"<p>\u4f7f\u7528\u7c7b\u9759\u6001\u65b9\u6cd5arc_curve_line\uff0c\u63a5\u6536LineString\u5bf9\u8c61\uff0c\u8fd4\u56de\u5706\u5f27\u7ebfLineString\u5bf9\u8c61</p> <pre><code>&gt;&gt;&gt; from gotrackit.tools.geo_process import StraightLineToArc\n&gt;&gt;&gt; sla = StraightLineToArc()\n&gt;&gt;&gt; l = LineString([(114.212, 22.31), (114.312, 22.131)])\n&gt;&gt;&gt; arc_line = sla.arc_curve_line(l, r=1.5, sample_num=30)\n&gt;&gt;&gt; print(arc_line)\n</code></pre>"},{"location":"UserGuide/GIS%E5%B7%A5%E5%85%B7/#_9","title":"\u57fa\u4e8e\u8d77\u7ec8\u70b9\u5750\u6807\u5f97\u5230\u8d1d\u585e\u5c14\u5f27\u7ebf\u5750\u6807","text":"<p>\u4f7f\u7528\u4f7f\u7528\u7c7b\u9759\u6001\u65b9\u6cd5bezier_curve_cor: <pre><code>&gt;&gt;&gt; from gotrackit.tools.geo_process import StraightLineToArc\n&gt;&gt;&gt; sla = StraightLineToArc()\n&gt;&gt;&gt; coords_list = sla.bezier_curve_cor(o_loc=[114.212, 22.31], d_loc=[114.312, 22.131], r=1.2, sample_num=30, right_side=True)\n&gt;&gt;&gt; print(coords_list)\n</code></pre></p>"},{"location":"UserGuide/GIS%E5%B7%A5%E5%85%B7/#linestring_1","title":"\u57fa\u4e8eLineString\u5f97\u5230\u8d1d\u585e\u5c14\u5f27\u7ebf\u5bf9\u8c61","text":"<p>\u4f7f\u7528\u7c7b\u9759\u6001\u65b9\u6cd5bezier_curve_line\uff0c\u63a5\u6536LineString\u5bf9\u8c61\uff0c\u8fd4\u56de\u8d1d\u585e\u5c14\u5f27\u7ebfLineString\u5bf9\u8c61 <pre><code>&gt;&gt;&gt; from gotrackit.tools.geo_process import StraightLineToArc\n&gt;&gt;&gt; sla = StraightLineToArc()\n&gt;&gt;&gt; bezier_line = sla.bezier_curve_line(LineString([(114.212, 22.31), (114.312, 22.131)]), r=1.5, sample_num=30, right_side=False)\n&gt;&gt;&gt; print(bezier_line)\n</code></pre></p>"},{"location":"UserGuide/GIS%E5%B7%A5%E5%85%B7/#_10","title":"\u5730\u7406\u914d\u51c6","text":""},{"location":"UserGuide/GoTrackIt%E7%AE%80%E4%BB%8B/","title":"GoTrackIt\u7b80\u4ecb","text":"<p>GoTrackIt\u662f\u4e00\u4e2a\u57fa\u4e8e\u6539\u8fdb\u9690\u9a6c\u5c14\u53ef\u592b\u6a21\u578b\u5b9e\u73b0\u7684\u5168\u6d41\u7a0b\u5730\u56fe\u5339\u914dpyhon\u5305\uff0c \u901a\u8fc7\u6982\u7387\u56fe\u5efa\u6a21\u7684\u65b9\u5f0f\u5c06\u8f66\u8f86\u7684GPS\u8f68\u8ff9\u6570\u636e\u5339\u914d\u5230\u9053\u8def\u8def\u7f51\uff0c \u83b7\u53d6\u8f66\u8f86\u7684\u6807\u51c6\u5316\u65f6\u7a7a\u8f68\u8ff9\uff0c \u53ef\u4ee5\u6709\u6548\u652f\u6491\u51fa\u884c\u5bfc\u822a\u3001\u4ea4\u901a\u76d1\u6d4b\u3001\u4ea4\u901a\u6cbb\u7406\u3001\u78b3\u6392\u6838\u7b97\u3001\u4ea4\u901a\u5efa\u6a21\u7b49\u65b9\u5411\u3002</p> <p>Note</p> <p>\u8fd9\u4e2a\u9879\u76ee\u6b63\u5904\u5728\u9891\u7e41\u7684\u5347\u7ea7\u8fed\u4ee3\u671f\uff0c \u5f53\u524d\u7248\u672cv0.3.14\uff0c \u8bf7\u7528\u6237\u53ca\u65f6\u66f4\u65b0.</p> \u5730\u56fe\u5339\u914d(\u8def\u5f84\u5339\u914d) \u8def\u5f84\u5339\u914d\u7684\u5e94\u7528\u573a\u666f"},{"location":"UserGuide/GoTrackIt%E7%AE%80%E4%BB%8B/#gotrackit_1","title":"GoTrackIt\u529f\u80fd\u7279\u70b9","text":"<p>\u672c\u5730\u56fe\u5339\u914d\u5305\u57fa\u4e8e\u9690\u9a6c\u5c14\u53ef\u592b\u6a21\u578b(HMM)\u5b9e\u73b0\u4e86\u8fde\u7eedGPS\u70b9\u4f4d\u7684\u6982\u7387\u5efa\u6a21\uff0c\u5229\u7528\u8fd9\u4e2a\u5305\u53ef\u4ee5\u8f7b\u677e\u5bf9GPS\u6570\u636e\u8fdb\u884c\u5730\u56fe\u5339\u914d\uff0c\u672c\u5f00\u6e90\u5305\u7684\u7279\u70b9\u5982\u4e0b:</p>"},{"location":"UserGuide/GoTrackIt%E7%AE%80%E4%BB%8B/#_1","title":"\ud83d\ude3b\u6570\u636e\u65e0\u5fe7","text":"<ul> <li> \u63d0\u4f9b\u8def\u7f51\u751f\u4ea7\u6a21\u5757(\u53ea\u9700\u63d0\u4f9b\u4e00\u4e2akey\u5373\u53ef\u83b7\u53d6\u8def\u7f51)\u4ee5\u53ca\u5927\u91cf\u8def\u7f51\u5904\u7406\u4f18\u5316\u5de5\u5177\uff0c\u60a8\u4e0d\u9700\u8981\u51c6\u5907\u4efb\u4f55\u8def\u7f51\u548cGPS\u6570\u636e\u5373\u53ef\u73a9\u8f6c\u5730\u56fe\u5339\u914d\uff1b</li> <li> \u63d0\u4f9bGPS\u6837\u4f8b\u6570\u636e\u751f\u4ea7\u6a21\u5757\uff0c\u89e3\u51b3\u6ca1\u6709GPS\u6570\u636e\u7684\u96be\u9898\uff1b</li> <li> \u63d0\u4f9bGPS\u6570\u636e\u6e05\u6d17\u63a5\u53e3\uff0c\u5305\u62ec\u884c\u7a0b\u5207\u5206\u3001\u6ee4\u6ce2\u5e73\u6ed1\u3001\u505c\u7559\u70b9\u8bc6\u522b\u7b49\u3002</li> </ul>"},{"location":"UserGuide/GoTrackIt%E7%AE%80%E4%BB%8B/#_2","title":"\u2611\ufe0f\u6587\u6863\u9f50\u5168","text":"<ul> <li> \u4e2d\u6587\u6587\u6863\uff0c\u6709\u8be6\u7ec6\u7684\u64cd\u4f5c\u6307\u5f15\uff1b</li> <li> \u7b97\u6cd5\u539f\u7406\u8bb2\u89e3\u90e8\u5206\u4e0d\u6d89\u53ca\u590d\u6742\u7684\u516c\u5f0f\u63a8\u5bfc\uff0c\u4f7f\u7528\u52a8\u753b\u5f62\u5f0f\u5256\u6790\u7b97\u6cd5\u539f\u7406\uff0c\u7b80\u6d01\u660e\u4e86\u3002</li> </ul>"},{"location":"UserGuide/GoTrackIt%E7%AE%80%E4%BB%8B/#_3","title":"\ud83d\ude80\u5339\u914d\u7b97\u6cd5\u4f18\u5316","text":"<ul> <li> \u652f\u6301\u57fa\u4e8e\u8def\u5f84\u9884\u8ba1\u7b97\u7684FastMapMatching\u3001\u652f\u6301\u591a\u6838\u5e76\u884c\u5339\u914d\u3001\u652f\u6301\u7f51\u683c\u53c2\u6570\u641c\u7d22\uff1b</li> <li> \u5bf9\u57fa\u4e8eHMM\u5339\u914d\u7684\u521d\u6b65\u8def\u5f84\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u5bf9\u4e8e\u4e0d\u8fde\u901a\u7684\u4f4d\u7f6e\u4f1a\u81ea\u52a8\u641c\u8def\u8865\u5168\uff0c\u5bf9\u4e8e\u5b9e\u9645\u8def\u7f51\u4e0d\u8fde\u901a\u7684\u4f4d\u7f6e\u4f1a\u8f93\u51fa\u8b66\u544a\u4fe1\u606f\uff0c\u65b9\u4fbf\u7528\u6237\u56de\u6eaf\u95ee\u9898\u3002</li> </ul>"},{"location":"UserGuide/GoTrackIt%E7%AE%80%E4%BB%8B/#_4","title":"\ud83c\udf08\u5339\u914d\u7ed3\u679c\u652f\u6301\u52a8\u753b\u53ef\u89c6\u5316","text":"<ul> <li> \u5339\u914d\u7ed3\u679c\u63d0\u4f9b\u4e09\u79cd\u8f93\u51fa\u5f62\u5f0f\uff1aGPS\u70b9\u5339\u914d\u7ed3\u679c\u8868(csv)\u3001\u5339\u914d\u7ed3\u679c\u77e2\u91cf\u5316\u56fe\u5c42\u3001\u77e2\u91cf\u56fe\u5c42\u5339\u914d\u52a8\u753b(HTML\u6587\u4ef6)\uff0cHTML\u52a8\u753b\u65b9\u4fbf\u7528\u6237\u76f4\u89c2\u5730\u611f\u53d7\u5339\u914d\u7ed3\u679c\uff0c\u540c\u65f6\u53ef\u4ee5\u63d0\u9ad8\u95ee\u9898\u6392\u67e5\u7684\u6548\u7387\u3002</li> </ul>"},{"location":"UserGuide/GoTrackIt%E7%AE%80%E4%BB%8B/#gotrackit_2","title":"GoTrackIt\u529f\u80fd\u6846\u67b6","text":"GoTrackIt\u529f\u80fd\u6846\u67b6"},{"location":"UserGuide/GoTrackIt%E7%AE%80%E4%BB%8B/#gotrackit_3","title":"GoTrackIt\u5339\u914d\u6548\u679c","text":"\u7a00\u758f\u8f68\u8ff9\u5339\u914d \u5e38\u89c4\u8f68\u8ff9\u5339\u914d \u5e38\u89c4\u8f68\u8ff9\u5339\u914d \u591a\u8f66\u5339\u914d\u53ef\u89c6\u5316 \u5339\u914d\u7ed3\u679cGeoJSON\u53ef\u89c6\u5316"},{"location":"UserGuide/GoTrackIt%E7%AE%80%E4%BB%8B/#gotrackit_4","title":"GoTrackIt\u89c6\u9891\u6559\u7a0b","text":"<ul> <li> <p> \u57fa\u4e8e\u9690\u9a6c\u5c14\u53ef\u592b\u6a21\u578b(HMM)\u7684\u5730\u56fe\u5339\u914d\u7b97\u6cd5\u52a8\u753b\u7248\uff01\u5b66\u4e0d\u4f1a\u4f60\u6765\u6253\u6211</p> </li> <li> <p> \u4e00\u4e2apython\u5305\u641e\u5b9a\u8def\u7f51\u83b7\u53d6+\u5730\u56fe\u5339\u914d</p> </li> <li> <p> gotrackit\u5730\u56fe\u5339\u914d\u5305\u53c2\u6570\u8be6\u89e3\u4e0e\u95ee\u9898\u6392\u67e5</p> </li> <li> <p> QGIS\u8def\u7f51\u62d3\u6251\u663e\u793a\u3001\u5e95\u56fe\u52a0\u8f7d\u3001\u6837\u5f0f\u590d\u7528\u3001map\u4fdd\u5b58</p> </li> </ul>"},{"location":"UserGuide/%E5%A6%82%E4%BD%95%E4%B8%8B%E8%BD%BD/","title":"\u5982\u4f55\u4e0b\u8f7d","text":""},{"location":"UserGuide/%E5%A6%82%E4%BD%95%E4%B8%8B%E8%BD%BD/#_2","title":"\u524d\u7f6e\u4f9d\u8d56\u5e93","text":"<p>gotrackit\u4f9d\u8d56\u4e8e\u4ee5\u4e0b\u5e93\uff0c\u62ec\u53f7\u4e2d\u4e3a\u4f5c\u8005\u4f7f\u7528\u7248\u672c(\u57fa\u4e8epython3.11)\uff0c\u4ec5\u4f9b\u53c2\u8003</p> <p>\u5b89\u88c5\u4e0a\u8ff0\u4f9d\u8d56\u63a8\u8350\u4f7f\u7528Anaconda\uff0c\u4f7f\u7528python3.11\u7248\u672c</p> <ul> <li>geopy(2.4.1)</li> <li>gdal(3.4.3 \u6216\u8005 3.8.4)</li> <li>shapely(2.0.3)</li> <li>fiona(1.9.5)</li> <li>pyproj(3.6.1)</li> <li>geopandas(0.14.3)</li> <li>networkx(3.2.1)</li> <li>pandas(2.0.3)</li> <li>numpy(1.26.2)</li> <li>keplergl(0.3.2)</li> <li>pykalman</li> </ul> <p>GDAL\u82e5\u5b89\u88c5\u5931\u8d25\uff0c\u63a8\u8350\u76f4\u63a5\u5b89\u88c5 GDAL-whl\u6587\u4ef6</p> <p></p> <p>\u9009\u62e9\u4e0e\u81ea\u5df1\u7cfb\u7edf\u548cpython\u7248\u672c\u5bf9\u5e94\u7684\u6587\u4ef6</p> <p>\u8fd9\u91cc\u7684\u6f14\u793a\u73af\u5883\u662fpython3.11\u7684\u73af\u5883\uff0c\u64cd\u4f5c\u7cfb\u7edf\u662fwin_amd64 \u6240\u4ee5\u9009\u62e9GDAL-3.8.4-cp311-cp311-win_amd64.whl\uff0c\u5927\u5bb6\u4f9d\u636e\u81ea\u5df1\u7684py\u7248\u672c\u548c\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u884c\u9009\u62e9</p>"},{"location":"UserGuide/%E5%A6%82%E4%BD%95%E4%B8%8B%E8%BD%BD/#_3","title":"\u4e00\u884c\u547d\u4ee4\u5feb\u901f\u5b89\u88c5","text":"<p>\u4f7f\u7528pip\u5b89\u88c5:</p> \u4f7f\u7528pip\u5b89\u88c5<pre><code>pip install -i https://pypi.org/simple/ gotrackit\n</code></pre> <p>\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u4e0a\u8ff0\u547d\u4ee4\u540e\uff0cpip\u4f1a\u81ea\u52a8\u5148\u5b89\u88c5gotrackit\u7684\u524d\u7f6e\u4f9d\u8d56\u5e93\uff0c\u5982\u679c\u5b89\u88c5\u5931\u8d25\uff0c\u8bf7\u5c1d\u8bd5\u4ece0\u5f00\u59cb\u914d\u7f6e\u65b0\u73af\u5883\uff0c\u518d\u5b89\u88c5gotrackit</p> \u5df2\u7ecf\u5b89\u88c5\u597dgotrackit\uff0c\u5347\u7ea7\u7248\u672c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4<pre><code>pip install --upgrade  -i https://pypi.org/simple/ gotrackit\n</code></pre> <p></p>"},{"location":"UserGuide/%E5%A6%82%E4%BD%95%E4%B8%8B%E8%BD%BD/#0","title":"\u4ece0\u5f00\u59cb\u914d\u7f6e\u65b0\u73af\u5883","text":"widowslinuxmac <pre><code># \u5148\u624b\u52a8\u914d\u7f6e\u8fd9\u4e9b\u5e93\npip install pandas -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install networkx -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install shapely==2.0.3 -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install fiona==1.9.5 -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install pyproj==3.6.1 -i https://pypi.tuna.tsinghua.edu.cn/simple\n\n# \u7136\u540e\u4f7f\u7528whl\u914d\u7f6eGDAL, \u76f4\u63a5\u628a\u4e0b\u8f7d\u597d\u7684whl\u6587\u4ef6\u62d6\u5230install\u547d\u4ee4\u884c\u5373\u53ef \npip install GDAL-3.8.4-cp311-cp311-win_amd64.whl\npip install geopandas -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install geopy -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install keplergl==0.3.2 -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install pykalman -i https://pypi.tuna.tsinghua.edu.cn/simple\n\n# pip\u7ee7\u7eed\u914d\u7f6e\uff0c\u5b8c\u6210\u5b89\u88c5\npip install -i  https://pypi.org/simple/ gotrackit\n</code></pre> <pre><code>pip install pandas -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install networkx -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install shapely==2.0.3 -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install fiona==1.9.5 -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install pyproj==3.6.1 -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install GDAL-3.8.4-cp311-cp311-win_amd64.whl\npip install geopandas -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install geopy -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install keplergl==0.3.2 -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install pykalman -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install -i  https://pypi.org/simple/ gotrackit\n</code></pre> <pre><code>pip install pandas -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install networkx -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install shapely==2.0.3 -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install fiona==1.9.5 -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install pyproj==3.6.1 -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install GDAL-3.8.4-cp311-cp311-win_amd64.whl\npip install geopandas -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install geopy -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install keplergl==0.3.2 -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install pykalman -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install -i  https://pypi.org/simple/ gotrackit\n</code></pre>"},{"location":"UserGuide/%E5%AE%9E%E6%97%B6%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/","title":"\u5b9e\u65f6\u8def\u5f84\u5339\u914d","text":""},{"location":"UserGuide/%E5%AE%9E%E6%97%B6%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#_2","title":"\u5b9e\u65f6\u5730\u56fe\u5339\u914d","text":""},{"location":"UserGuide/%E5%AE%9E%E6%97%B6%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#_3","title":"\u5b9e\u65f6\u4e0e\u79bb\u7ebf\u7684\u533a\u522b","text":"<p>\u5b9e\u65f6\u5361\u5c14\u66fc\u6ee4\u6ce2\uff1a</p> <p>.. image:: _static/images/online/\u5b9e\u65f6\u5361\u5c14\u66fc\u6ee4\u6ce2.png     :align: center</p> <p>\u5b9e\u65f6\u5339\u914d\uff1a</p> <p>.. image:: _static/images/online/\u5b9e\u65f6\u5339\u914d.png     :align: center</p>"},{"location":"UserGuide/%E5%AE%9E%E6%97%B6%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#_4","title":"\u5b9e\u65f6\u5361\u5c14\u66fc\u6ee4\u6ce2\u5668","text":"<p>\u5b9e\u65f6\u5361\u5c14\u66fc\u6ee4\u6ce2\u5668\u7684\u4f7f\u7528\uff0c\u9700\u8981\u5f15\u5165OnLineTrajectoryKF\u7c7b\uff0c\u8be5\u7c7b\u5c06agent_id\u4e00\u6837\u7684\u8f66\u8f86\u5b9a\u4f4d\u70b9\u89c6\u4e3a\u540c\u4e00\u6761\u6982\u7387\u94fe\uff0c\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b</p> <p>.. code-block:: python     :linenos:</p> <pre><code># 1. \u4ecegotrackit\u5bfc\u5165\u76f8\u5173\u6a21\u5757\nimport pandas as pd\nfrom gotrackit.tools.kf import OnLineTrajectoryKF\n\n# \u8fd9\u662f\u4e00\u4e2a\u63a5\u5165\u5b9e\u65f6GPS\u6570\u636e\u7684\u793a\u4f8b\u51fd\u6570\uff0c\u7528\u6237\u9700\u8981\u81ea\u5df1\u4f9d\u636e\u5b9e\u9645\u60c5\u51b5\u53bb\u5b9e\u73b0\u4ed6\ndef monitor_rt_gps(once_num: int = 2):\n    gps_df = pd.read_csv(r'./gps.csv')\n    num = len(gps_df)\n    gps_df.reset_index(inplace=True, drop=True)\n    c = 0\n    while c &lt; num:\n        yield gps_df.loc[c: c + once_num - 1, :].copy()\n        c += once_num\n\nif __name__ == '__main__':\n\n    ol_kf = OnLineTrajectoryKF()\n    res = pd.DataFrame()\n    for _gps_df in monitor_rt_gps(once_num=1):\n        if rt_gps_df.empty:\n            continue\n        ol_kf.renew_trajectory(trajectory_df=_gps_df)\n        _res = ol_kf.kf_smooth()\n        res = pd.concat([res, _res])\n    res.reset_index(inplace=True, drop=True)\n    res.to_csv(r'./online_smooth_gps.csv', encoding='utf_8_sig', index=False)\n</code></pre>"},{"location":"UserGuide/%E5%AE%9E%E6%97%B6%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#_5","title":"\u5b9e\u65f6\u5339\u914d\u63a5\u53e3","text":"<p>\u5b9e\u65f6\u5730\u56fe\u5339\u914d\u7684\u4f7f\u7528\uff0c\u9700\u8981\u5f15\u5165OnLineMapMatch\u7c7b\uff0c\u8be5\u7c7b\u5c06agent_id\u4e00\u6837\u7684\u8f66\u8f86\u5b9a\u4f4d\u70b9\u89c6\u4e3a\u540c\u4e00\u6761\u6982\u7387\u94fe\uff0c\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b</p> <p>.. code-block:: python     :linenos:</p> <pre><code># 1. \u4ecegotrackit\u5bfc\u5165\u76f8\u5173\u6a21\u5757\nimport pandas as pd\nimport geopandas as gpd\nfrom gotrackit.map.Net import Net\nfrom gotrackit.MapMatch import OnLineMapMatch\nfrom gotrackit.tools.kf import OnLineTrajectoryKF\n\n# \u8fd9\u662f\u4e00\u4e2a\u63a5\u5165\u5b9e\u65f6GPS\u6570\u636e\u7684\u793a\u4f8b\u51fd\u6570\uff0c\u7528\u6237\u9700\u8981\u81ea\u5df1\u4f9d\u636e\u5b9e\u9645\u60c5\u51b5\u53bb\u5b9e\u73b0\u5b83\ndef monitor_rt_gps(once_num: int = 2):\n    gps_df = pd.read_csv(r'./gps.csv')\n    num = len(gps_df)\n    gps_df.reset_index(inplace=True, drop=True)\n    c = 0\n    while c &lt; num:\n        yield gps_df.loc[c: c + once_num - 1, :].copy()\n        c += once_num\n\nif __name__ == '__main__':\n\n    link = gpd.read_file('Link.shp')\n    node = gpd.read_file('Node.shp')\n    my_net = Net(link_gdf=link, node_gdf=node)\n    my_net.init_net()\n\n    # \u65b0\u5efa\u4e00\u4e2a\u5b9e\u65f6\u5339\u914d\u7c7b\u522b\n    ol_mpm = OnLineMapMatch(net=my_net, gps_buffer=50,\n                            out_fldr=r'./data/output/match_visualization/real_time/')\n\n    # \u65b0\u5efa\u4e00\u4e2a\u5b9e\u65f6\u5361\u5c14\u66fc\u6ee4\u6ce2\u5668\n    ol_kf = OnLineTrajectoryKF()\n\n    c = 0\n    for rt_gps_df in monitor_rt_gps(once_num=2):\n        if rt_gps_df.empty:\n            continue\n        ol_mpm.flag_name = rf'real_time_{c}'\n\n        # \u66f4\u65b0\u5f53\u524d\u65f6\u523b\u63a5\u6536\u5230\u7684\u5b9a\u4f4d\u6570\u636e\n        ol_kf.renew_trajectory(trajectory_df=rt_gps_df)\n\n        # \u6ee4\u6ce2\u5e73\u6ed1\n        gps_df = ol_kf.kf_smooth(p_deviation=0.002)\n\n        # \u5b9e\u65f6\u5339\u914d\n        res, warn_info, error_info = ol_mpm.execute(gps_df=gps_df,  overlapping_window=3)\n</code></pre> <p>\u5b9e\u65f6\u5730\u56fe\u5339\u914d\u7684execute\u51fd\u6570\u53c2\u6570\u89e3\u91ca\u5982\u4e0b\uff1a</p> <ul> <li> <p>gps_df     gps\u6570\u636e</p> </li> <li> <p>time_gap_threshold     \u65f6\u95f4\u9608\u503c\uff0c\u9ed8\u8ba41800.0s\uff0c\u5982\u679c\u67d0agent\u7684 \u5f53\u524dGPS\u6570\u636e\u7684\u6700\u65e9\u5b9a\u4f4d\u65f6\u95f4 \u548c \u4e0a\u6279\u6b21GPS\u6570\u636e\u7684\u6700\u665a\u5b9a\u4f4d\u65f6\u95f4 \u7684\u5dee\u503c\u8d85\u8fc7\u8be5\u503c\uff0c\u5219\u4e0d\u53c2\u8003\u5386\u53f2\u6982\u7387\u94fe\u8fdb\u884c\u5339\u914d\u8ba1\u7b97</p> </li> <li> <p>dis_gap_threshold     \u8ddd\u79bb\u9608\u503c\uff0c\u9ed8\u8ba4600.0m\uff0c\u5982\u679c\u67d0agent\u7684 \u5f53\u524dGPS\u6570\u636e\u7684\u6700\u65e9\u5b9a\u4f4d\u70b9 \u548c \u4e0a\u6279\u6b21GPS\u6570\u636e\u7684\u6700\u665a\u5b9a\u4f4d\u70b9 \u7684\u8ddd\u79bb\u8d85\u8fc7\u8be5\u503c\uff0c\u5219\u4e0d\u53c2\u8003\u5386\u53f2\u6982\u7387\u94fe\u8fdb\u884c\u5339\u914d\u8ba1\u7b97</p> </li> <li> <p>overlapping_window     \u91cd\u53e0\u7a97\u53e3\u957f\u5ea6\uff0c\u9ed8\u8ba43\uff0c\u548c\u5386\u53f2GPS\u6570\u636e\u7684\u91cd\u53e0\u7a97\u53e3</p> </li> </ul>"},{"location":"UserGuide/%E6%95%B0%E6%8D%AE%E8%A6%81%E6%B1%82/","title":"\u6570\u636e\u8981\u6c42","text":""},{"location":"UserGuide/%E6%95%B0%E6%8D%AE%E8%A6%81%E6%B1%82/#_2","title":"\u6807\u51c6\u8def\u7f51\u6570\u636e","text":"<p>\u8def\u7f51\u7531\u7ebf\u5c42\u6587\u4ef6\u548c\u70b9\u5c42\u6587\u4ef6\u7ec4\u6210\uff0c\u4e24\u4e2a\u6587\u4ef6\u5b58\u5728\u5173\u8054\u5173\u7cfb\uff0c\u8fd9\u4e24\u4e2a\u6587\u4ef6\u4e00\u822c\u662f\u4ee5\u4e0b\u683c\u5f0f\uff1a</p> <ul> <li> shp\u683c\u5f0f\u3001geojson\u683c\u5f0f</li> <li> \u6216\u8005\u5176\u4ed6geopandas\u53ef\u4ee5\u8bfb\u53d6\u7684\u5730\u7406\u77e2\u91cf\u6587\u4ef6</li> </ul> <p>\u8def\u7f51\u6837\u4f8b\u6570\u636e\uff1a\u897f\u5b89\u6837\u4f8b\u8def\u7f51\u6570\u636e\u4e0b\u8f7d</p> <p>Note</p> <p>\u8fd9\u8def\u7f51\u70b9\u5c42\u6570\u636e\u548c\u7ebf\u5c42\u6570\u636e\u7684\u5750\u6807\u7cfb\u5fc5\u987b\u4e3a\uff1aEPSG:4326</p>"},{"location":"UserGuide/%E6%95%B0%E6%8D%AE%E8%A6%81%E6%B1%82/#-","title":"\u8def\u7f51-\u70b9\u5c42","text":"<p> \u8def\u7f51\u70b9\u5c42\u6587\u4ef6\u5b57\u6bb5\u8981\u6c42\u5982\u4e0b\uff1a</p> \u5b57\u6bb5\u540d\u79f0 \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u8bf4\u660e node_id <code>int</code> \u8282\u70b9\u552f\u4e00\u7f16\u7801\uff0c\u5927\u4e8e0\u7684\u6b63\u6574\u6570\uff0c\u5bf9\u5e94\u7ebf\u5c42\u8868\u7684from_node\u3001to_node geometry <code>geometry</code> \u8282\u70b9\u5750\u6807\u51e0\u4f55\u5217 <p>Note</p> <p>\u70b9\u5c42\u8868\u7684geometry\u5b57\u6bb5\u4e2d\u4e0d\u5141\u8bb8\u51fa\u73b0MultiPoint\u7c7b\u578b\uff0c\u4e0d\u652f\u6301\u4e09\u7ef4\u5750\u6807</p>"},{"location":"UserGuide/%E6%95%B0%E6%8D%AE%E8%A6%81%E6%B1%82/#-_1","title":"\u8def\u7f51-\u7ebf\u5c42","text":"<p>\u8def\u7f51\u7ebf\u5c42\u6587\u4ef6\u5b57\u6bb5\u8981\u6c42\u5982\u4e0b\uff1a</p> \u5b57\u6bb5\u540d\u79f0 \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u8bf4\u660e link_id <code>int</code> \u8def\u6bb5\u552f\u4e00\u7f16\u7801, \u4e00\u5b9a\u662f\u5927\u4e8e0\u7684\u6b63\u6574\u6570, \u5fc5\u9700\u5b57\u6bb5 from_node <code>int</code> \u8282\u8def\u6bb5\u62d3\u6251\u8d77\u70b9\u8282\u70b9\u7f16\u53f7, \u4e00\u5b9a\u662f\u5927\u4e8e0\u7684\u6b63\u6574\u6570, \u5fc5\u9700\u5b57\u6bb5 to_node <code>int</code> \u8def\u6bb5\u62d3\u6251\u7ec8\u70b9\u8282\u70b9\u7f16\u53f7, \u4e00\u5b9a\u662f\u5927\u4e8e0\u7684\u6b63\u6574\u6570, \u5fc5\u9700\u5b57\u6bb5 dir <code>int</code> \u8def\u6bb5\u65b9\u5411\uff0c0\u62161\uff0c 0\u4ee3\u8868\u53cc\u5411\u901a\u884c\uff0c1\u4ee3\u8868\u901a\u884c\u65b9\u5411\u4e3a\u8def\u6bb5\u62d3\u6251\u6b63\u5411, \u5fc5\u9700\u5b57\u6bb5 length <code>int</code> \u8def\u6bb5\u957f\u5ea6\uff0c\u5355\u4f4d\u7c73, \u5fc5\u9700\u5b57\u6bb5 geometry <code>int</code> \u8def\u6bb5\u51e0\u4f55\u7ebf\u578b, \u5fc5\u9700\u5b57\u6bb5 <p>Note</p> <p>\u7ebf\u5c42\u8868\u7684geometry\u5b57\u6bb5\u4e2d\u4e0d\u5141\u8bb8\u51fa\u73b0MultiLineString\u7c7b\u578b\uff0c\u53ea\u5141\u8bb8LineString\u7c7b\u578b\uff0c\u4e0d\u652f\u6301\u4e09\u7ef4\u5750\u6807</p>"},{"location":"UserGuide/%E6%95%B0%E6%8D%AE%E8%A6%81%E6%B1%82/#_3","title":"\u70b9\u5c42\u3001\u7ebf\u5c42\u5173\u8054\u5173\u7cfb","text":"<ul> <li> <p>\u7ebf\u5c42dir\u5b57\u6bb5\u4e0e\u62d3\u6251\u65b9\u5411     \u7ebf\u5c42\u7684\u7bad\u5934\u65b9\u5411\u4e3a\u62d3\u6251\u65b9\u5411(\u5373link\u5c42geometry\u4e2d\u6298\u70b9\u7684\u884c\u8fdb\u65b9\u5411)\uff0cdir\u5b57\u6bb5\u6240\u63cf\u8ff0\u7684\u884c\u8f66\u65b9\u5411\u5c31\u662f\u4e0e\u4e4b\u5173\u8054\u7684\uff0cdir\u4e3a1\u4ee3\u8868\u8be5\u6761link\u662f\u5355\u5411\u8def\u6bb5\uff0c\u884c\u8f66\u65b9\u5411\u4e0e\u62d3\u6251\u65b9\u5411\u4e00\u81f4\uff0cdir\u4e3a0\u4ee3\u8868\u8be5\u6761link\u662f\u53cc\u5411\u8def\u6bb5</p> </li> <li> <p>\u70b9\u5c42node_id\u4e0e\u7ebf\u5c42from_node\u3001to_node\u5173\u8054     Link\u5c42\u4e2d\uff1a\u4e00\u6761link\u7684from_node\u3001to_node\u5c5e\u6027\u5bf9\u5e94\u8282\u70b9\u5c42\u7684node_id</p> </li> </ul> <p>\u6807\u51c6\u8def\u7f51\u6570\u636e\u53ef\u4ee5\u5728QGIS\u6216\u8005TransCAD\u7b49\u5176\u4ed6GIS\u8f6f\u4ef6\u4e2d\u8fdb\u884c\u53ef\u89c6\u5316\uff1a</p> \u6807\u51c6\u8def\u7f51"},{"location":"UserGuide/%E6%95%B0%E6%8D%AE%E8%A6%81%E6%B1%82/#_4","title":"\u6807\u51c6\u8def\u7f51\u6837\u4f8b\u6570\u636e","text":"<p>\u8fd9\u91cc\u63d0\u4f9b\u4e86\u897f\u5b89\u5e02\u7684\u67d0\u7247\u533a\u7684\u7ebf\u5c42\u3001\u70b9\u5c42\u6837\u4f8b\u6570\u636e\uff1a</p> <ul> <li> \u6807\u51c6\u8def\u7f51\u6837\u4f8b\u6570\u636e-GitHub\u4e0b\u8f7d\u94fe\u63a5</li> <li> \u6807\u51c6\u8def\u7f51\u6837\u4f8b\u6570\u636e-\u767e\u5ea6\u7f51\u76d8\u4e0b\u8f7d\u94fe\u63a5</li> </ul> <p>\u5982\u679c\u60a8\u6ca1\u6709\u60f3\u8981\u7814\u7a76\u533a\u57df\u7684\u8def\u7f51\u6570\u636e\uff0c\u8bf7\u53c2\u8003gotrackit\u7684\u8def\u7f51\u751f\u4ea7\u6a21\u5757\u6216\u8005\u4f7f\u7528osmnx</p>"},{"location":"UserGuide/%E6%95%B0%E6%8D%AE%E8%A6%81%E6%B1%82/#gps","title":"GPS\u5b9a\u4f4d\u6570\u636e","text":"<p>GPS\u8f68\u8ff9\u6570\u636e\u5b57\u6bb5\u8981\u6c42\u5982\u4e0b\uff1a</p> \u5b57\u6bb5\u540d\u79f0 \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u8bf4\u660e agent_id <code>string</code> \u8f66\u8f86\u552f\u4e00\u7f16\u7801\uff0c\u51c6\u786e\u6765\u8bf4\u8fd9\u4e2a\u5b57\u6bb5\u6807\u6ce8\u7684\u662f\u8f66\u8f86\u7684\u67d0\u4e00\u6b21\u5b8c\u6574\u51fa\u884c lng <code>float</code> \u7ecf\u5ea6 lat <code>float</code> \u7eac\u5ea6 time <code>string</code> \u5b9a\u4f4d\u65f6\u95f4\u6233 \u5176\u4ed6\u975e\u5fc5\u9700\u5b57\u6bb5 <code>--</code> ----- <p>\u6ce8\u610f\u65f6\u95f4\u5217</p> <p>time\u5217\u7528\u4e8e\u786e\u5b9a\u70b9\u7684\u5148\u540e\u987a\u5e8f\uff0c\u4e0d\u5141\u8bb8\u6709\u91cd\u590d\u503c\uff0c\u672a\u6765\u7684\u7248\u672c\u4f1a\u4f7f\u7528time\u5217\u8ba1\u7b97\u901f\u5ea6\u7528\u4e8e\u63d0\u4f9bST-Matching</p> <p>\u5982\u679c\u4f60\u7684\u6570\u636e\u6ca1\u6709\u65f6\u95f4\u5217\uff0c\u8bf7\u81ea\u5df1\u8d4b\u4e88\u4e00\u4e2a\u65f6\u95f4\u5217\u4e14\u786e\u4fdd\u6ca1\u6709\u91cd\u590d\u503c</p>"},{"location":"UserGuide/%E6%95%B0%E6%8D%AE%E8%A6%81%E6%B1%82/#od","title":"\u5e26\u9014\u5f84\u70b9\u7684OD\u6570\u636e","text":"<p> \u5e26\u9014\u5f84\u70b9\u7684OD\u8868\u5b57\u6bb5\u8981\u6c42\u5982\u4e0b\uff1a</p> \u5b57\u6bb5\u540d\u79f0 \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u8bf4\u660e od_id <code>int</code> \u8f66\u8f86\u552f\u4e00\u7f16\u7801\uff0c\u51c6\u786e\u6765\u8bf4\u8fd9\u4e2a\u5b57\u6bb5\u6807\u6ce8\u7684\u662f\u8f66\u8f86\u7684\u67d0\u4e00\u6b21\u5b8c\u6574\u51fa\u884c o_x <code>float</code> \u8d77\u70b9\u7ecf\u5ea6\uff0c\u4e0d\u5141\u8bb8\u4e3a\u7a7a\uff0cGCJ-02\u5750\u6807 o_y <code>float</code> \u8d77\u70b9\u7eac\u5ea6\uff0c\u4e0d\u5141\u8bb8\u4e3a\u7a7a\uff0cGCJ-02\u5750\u6807\u7cfb d_x <code>floatg</code> \u7ec8\u70b9\u7ecf\u5ea6\uff0c\u4e0d\u5141\u8bb8\u4e3a\u7a7a\uff0cGCJ-02\u5750\u6807\u7cfb d_y <code>float</code> \u7ec8\u70b9\u7eac\u5ea6\uff0c\u4e0d\u5141\u8bb8\u4e3a\u7a7a\uff0cGCJ-02\u5750\u6807\u7cfb hh <code>int</code> \u8bf7\u6c42\u65f6\u6bb5(0~23), \u975e\u5fc5\u987b\u5b57\u6bb5 way_points <code>string</code> \u9014\u5f84\u70b9\u5750\u6807\u4e32\uff0c\u6700\u591a\u652f\u630110\u4e2a\u9014\u5f84\u70b9\uff0c\u5141\u8bb8\u4e3a\u7a7a\u503c(\u591a\u5750\u6807\u70b9\u4ee5 ; \u5206\u5272)"},{"location":"UserGuide/%E6%95%B0%E6%8D%AE%E8%A6%81%E6%B1%82/#hh","title":"\u5173\u4e8ehh\u5b57\u6bb5","text":"<ul> <li>\u5173\u4e8e\u5982\u679c\u5bf9OD\u6709\u5177\u4f53\u7684\u8bf7\u6c42\u65f6\u6bb5\u9650\u5236\uff0c\u8bf7\u786e\u4fdd\u6709hh\u5217\uff0c\u4e14\u5c06\u8bf7\u6c42\u53c2\u6570ignore_hh\u7f6e\u4e3aFalse\uff0c\u4e0d\u5141\u8bb8\u6709\u7a7a\u503c\uff1b\u5982\u679c\u6ca1\u6709\u65f6\u6bb5\u9650\u5236, \u8be5\u5217\u53ef\u4ee5\u4e0d\u63d0</li> </ul> <p>\u6837\u4f8bOD\u6570\u636e\u5982\u4e0b\uff1a</p> od_id o_x o_y d_x d_y way_points 1 120.73054 31.67264 120.73338 31.66751 120.73176,31.67052 2 120.73050 31.66643 120.74717 31.66991 120.73119,31.6669;120.7380,31.669 3 120.74229 31.66071 120.74250 31.65282"},{"location":"UserGuide/%E6%95%B0%E6%8D%AE%E8%A6%81%E6%B1%82/#_5","title":"\u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb","text":"<p> \u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb\u6709\u5f88\u591a\u79cd\uff0c\u8fd9\u91cc\u4ec5\u4ec5\u5217\u51fa\u5e73\u9762\u6295\u5f716\u5ea6\u5e26\u7684\u5212\u5206\uff0c\u6309\u7167\u7ecf\u5ea6\uff0c\u6bcf6\u5ea6\u5bf9\u5e94\u4e00\u4e2a\u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb\uff0c\u53ef\u4ee5\u6309\u7167\u7814\u7a76\u8303\u56f4\u7684\u4e2d\u5fc3\u70b9\u7ecf\u7eac\u5ea6\u53c2\u7167\u4e0b\u8868\u9009\u53d6</p> \u7ecf\u5ea6\u5212\u5206 -180 ~ -174 -174 ~ -168 ... 108 ~ 114 ... 174 ~ 180 \u5e73\u9762\u6295\u5f71CRS EPSG:32601 EPSG:32602 ... EPSG:32649 ... EPSG:32660 <p>\u5982\u679c\u4f60\u7684\u7814\u7a76\u533a\u57df\u662f\u4e16\u754c\u8303\u56f4\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4f7f\u7528EPSG:3857\uff0c\u8fd9\u4e2a\u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb\u9002\u7528\u4e8e\u5168\u7403\u4efb\u4f55\u5730\u533a\uff0c\u5173\u4e8e\u5750\u6807\u7684\u66f4\u591a\u77e5\u8bc6\u8bf7\u53c2\u8003epsg.io</p>"},{"location":"UserGuide/%E6%97%B6%E7%A9%BA%E5%8F%AF%E8%A7%86%E5%8C%96/","title":"\u65f6\u7a7a\u53ef\u89c6\u5316","text":"<p>gotrackit\u4e2d\u63d0\u4f9b\u4e86\u5bf9kepler\u90e8\u5206\u53ef\u89c6\u5316\u529f\u80fd\u7684\u5c01\u88c5\uff0c\u4f7f\u7528KeplerVis\u7c7b\u5373\u53ef\u8f7b\u677e\u8fdb\u884c\u7f51\u9875\u7aef\u7684\u52a8\u6001\u53ef\u89c6\u5316\uff0c\u8be5\u7c7b\u652f\u6301\u4e09\u79cd\u56fe\u5c42\uff1a</p> <ul> <li> \u70b9\u5c42 - add_point_layer</li> <li> \u51e0\u4f55\u56fe\u5c42 - add_geo_layer</li> <li> \u8f68\u8ff9 - add_trip_layer</li> </ul>"},{"location":"UserGuide/%E6%97%B6%E7%A9%BA%E5%8F%AF%E8%A7%86%E5%8C%96/#_2","title":"\u6dfb\u52a0\u70b9\u56fe\u5c42","text":"<p>\u4f7f\u7528KeplerVis\u7c7b\u63d0\u4f9b\u7684add_point_layer\u51fd\u6570\u5373\u53ef\u4e3a\u5e95\u56fe\u52a0\u4e0a\u4e00\u4e2a\u70b9\u5c42:</p> \u6dfb\u52a0\u70b9\u56fe\u5c42<pre><code># 1. \u4ecegotrackit\u5bfc\u5165\u76f8\u5173\u6a21\u5757\nimport pandas as pd\nfrom gotrackit.visualization import KeplerVis\n\nif __name__ == '__main__':\n\n    # \u8bfb\u53d6\u70b9\u5c42\u6587\u4ef6\u6570\u636e\n    point_df = pd.read_csv(r'p.csv')\n\n    # \u65b0\u5efaKeplerVis\u7c7b\n    kv = KeplerVis(map_style='dark')\n\n    # \u6dfb\u52a0\u70b9\u5c42\n    kv.add_point_layer(data=point_df, lng_field='lng', lat_field='lat', set_avg_zoom=True)\n\n    # \u8f93\u51faHTML\u5230\u672c\u5730\n    # \u6b64\u51fd\u6570\u4e5f\u4f1a\u8fd4\u56de\u4e00\u4e2amap\u5bf9\u8c61\uff0c\u53ef\u5728jupyter\u73af\u5883\u4e0b\u8fdb\u884c\u4ea4\u4e92\u5f0f\u64cd\u4f5c\n    map_obj = kv.export_html(height=600, out_fldr=r'./', file_name='point')\n</code></pre>"},{"location":"UserGuide/%E6%97%B6%E7%A9%BA%E5%8F%AF%E8%A7%86%E5%8C%96/#geo","title":"\u6dfb\u52a0geo\u56fe\u5c42","text":"<p>\u4f7f\u7528KeplerVis\u7c7b\u63d0\u4f9b\u7684add_geo_layer\u51fd\u6570\u5373\u53ef\u4e3a\u5e95\u56fe\u52a0\u4e0a\u4efb\u4f55\u4e00\u4e2a\u51e0\u4f55\u56fe\u5c42</p> \u6dfb\u52a0geo\u56fe\u5c42<pre><code># 1. \u4ecegotrackit\u5bfc\u5165\u76f8\u5173\u6a21\u5757\nimport geopandas as gpd\nfrom gotrackit.visualization import KeplerVis\n\nif __name__ == '__main__':\n\n    # \u8bfb\u53d6\u51e0\u4f55\u6587\u4ef6\n    region_df = gpd.read_file(r'region.shp')\n\n    # \u65b0\u5efaKeplerVis\u7c7b\n    kv = KeplerVis()\n\n    # \u6dfb\u52a0\u70b9\u5c42\n    kv.add_geo_layer(data=region_df, set_avg_zoom=True)\n\n    # \u8f93\u51faHTML\u5230\u672c\u5730\n    # \u6b64\u51fd\u6570\u4e5f\u4f1a\u8fd4\u56de\u4e00\u4e2amap\u5bf9\u8c61\uff0c\u53ef\u5728jupyter\u73af\u5883\u4e0b\u8fdb\u884c\u4ea4\u4e92\u5f0f\u64cd\u4f5c\n    map_obj = kv.export_html(height=600, out_fldr=r'./', file_name='region')\n</code></pre>"},{"location":"UserGuide/%E6%97%B6%E7%A9%BA%E5%8F%AF%E8%A7%86%E5%8C%96/#_3","title":"\u6dfb\u52a0\u8def\u5f84\u52a8\u753b\u56fe\u5c42","text":"<p>\u4f7f\u7528KeplerVis\u7c7b\u63d0\u4f9b\u7684add_trip_layer\u51fd\u6570\u5373\u53ef\u4e3a\u5e95\u56fe\u52a0\u4e0a\u4e00\u4e2a\u8def\u5f84\u52a8\u753b\u56fe\u5c42\uff0c\u6240\u9700\u6570\u636e\u9700\u8981\u6ee1\u8db3GPS\u5b9a\u4f4d\u6570\u636e\u7684\u8981\u6c42\uff1a</p> \u8def\u5f84\u52a8\u753b <ul> <li> \u8def\u5f84\u52a8\u753b\u6837\u4f8b\u6570\u636e</li> </ul> \u6dfb\u52a0\u8def\u5f84\u56fe\u5c42<pre><code># 1. \u4ecegotrackit\u5bfc\u5165\u76f8\u5173\u6a21\u5757\nimport pandas as pd\nfrom gotrackit.visualization import KeplerVis\n\nif __name__ == '__main__':\n\n    # \u8bfb\u53d6\u51e0\u4f55\u6587\u4ef6\n    trip_df = pd.read_csv(r'trip.csv')\n\n    # \u65b0\u5efaKeplerVis\u7c7b\n    kv = KeplerVis()\n\n    # \u6dfb\u52a0\u70b9\u5c42\n    kv.add_trip_layer(trip_df, lng_field='lng', lat_field='lat', \n                      time_format=\"%Y-%m-%d %H:%M:%S.%f\")\n\n    # \u8f93\u51faHTML\u5230\u672c\u5730\n    # \u6b64\u51fd\u6570\u4e5f\u4f1a\u8fd4\u56de\u4e00\u4e2amap\u5bf9\u8c61\uff0c\u53ef\u5728jupyter\u73af\u5883\u4e0b\u8fdb\u884c\u4ea4\u4e92\u5f0f\u64cd\u4f5c\n    map_obj = kv.export_html(height=600, out_fldr=r'./', file_name='trip')\n</code></pre>"},{"location":"UserGuide/%E6%97%B6%E7%A9%BA%E5%8F%AF%E8%A7%86%E5%8C%96/#_4","title":"\u56fe\u5c42\u53e0\u52a0\u4e0e\u5730\u56fe\u8f93\u51fa","text":"\u56fe\u5c42\u53e0\u52a0\u4e0e\u5730\u56fe\u8f93\u51fa<pre><code>import pandas as pd\nimport geopandas as gpd\nfrom gotrackit.visualization import KeplerVis\n\nif __name__ == '__main__':\n    point_df = pd.DataFrame()\n    region_gdf = gpd.GeoDataFrame()\n    trip_df = pd.DataFrame()\n    kv = KeplerVis()\n    kv.add_point_layer(point_df, lng_field='lng', lat_field='lat')\n    kv.add_geo_layer(region_gdf)\n    kv.add_trip_layer(trip_df, lng_field='lng', lat_field='lat')\n    map_obj = kv.export_html(height=600, out_fldr=r'./', file_name='map')\n</code></pre>"},{"location":"UserGuide/%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/","title":"\u8def\u5f84\u5339\u914d","text":"<p>\u4f7f\u7528\u8def\u5f84\u5339\u914d\u63a5\u53e3\uff0c\u4f60\u9700\u8981\u51c6\u5907\u8def\u7f51\u6570\u636e\u548cGPS\u6570\u636e\uff0c\u8def\u5f84\u5339\u914d\u7684\u53c2\u6570\u7531\u4e24\u5927\u90e8\u5206\u6784\u6210\uff1aNet\u53c2\u6570\u914d\u7f6e\u3001MapMatch\u53c2\u6570\u914d\u7f6e</p>"},{"location":"UserGuide/%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#_2","title":"\u5e38\u89c4\u5339\u914d","text":"<p>\u6267\u884c\u4e00\u6b21\u8def\u5f84\u5339\u914d\u7684\u8fc7\u7a0b\u5206\u4e3a\u56db\u4e2a\u6b65\u9aa4\uff1a</p> <ul> <li> <p> \u4ecegotrackit\u5f15\u5165\u76f8\u5173\u6a21\u5757\uff1a \u5f15\u5165\u76f8\u5173\u6a21\u5757<pre><code>import pandas as pd\nimport geopandas as gpd\nfrom gotrackit.map.Net import Net\nfrom gotrackit.MapMatch import MapMatch\n</code></pre></p> </li> <li> <p> \u4f9d\u636e\u8def\u7f51\u7ebf\u5c42\u548c\u8def\u7f51\u70b9\u5c42\u6784\u5efa\u4e00\u4e2aNet\uff0c\u5e76\u4e14\u8fdb\u884c\u76f8\u5e94\u7684Net\u53c2\u6570\u914d\u7f6e \u6784\u5efaNet\u5bf9\u8c61<pre><code># \u6784\u5efa\u4e00\u4e2anet, \u8981\u6c42\u8def\u7f51\u7ebf\u5c42\u548c\u8def\u7f51\u70b9\u5c42\u5fc5\u987b\u662fWGS-84, EPSG:4326 \u5730\u7406\u5750\u6807\u7cfb\n# \u8bf7\u7559\u610fshp\u6587\u4ef6\u7684\u7f16\u7801\uff0c\u53ef\u4ee5\u663e\u793a\u6307\u5b9aencoding\uff0c\u786e\u4fdd\u5b57\u6bb5\u6ca1\u6709\u4e71\u7801\nlink = gpd.read_file(r'./data/input/net/xian/modifiedConn_link.shp')\nnode = gpd.read_file(r'./data/input/net/xian/modifiedConn_node.shp')\nmy_net = Net(link_gdf=link, node_gdf=node, cut_off=1200.0)\nmy_net.init_net()  # net\u521d\u59cb\u5316\n</code></pre></p> </li> <li> <p> \u4f9d\u636eGPS\u6570\u636e\u8981\u6c42\u51c6\u5907gps(\u8f68\u8ff9)\u6570\u636e\u8868, \u5bf9gps\u6570\u636e\u8fdb\u884c\u76f8\u5e94\u7684\u8f68\u8ff9\u9884\u5904\u7406\uff1a \u8f68\u8ff9\u6570\u636e\u8bfb\u53d6\u548c\u5904\u7406<pre><code>gps_df = pd.read_csv(r'./data/output/gps/sample/example_gps.csv')\n# \u5bf9gps\u6570\u636e\u8fdb\u884c\u5404\u79cd\u9884\u5904\u7406\n# .........\n</code></pre></p> </li> <li> <p> \u57fa\u4e8eNet\u521d\u59cb\u5316\u4e00\u4e2aMapMatch\u7c7b\uff0c\u5e76\u4e14\u8fdb\u884c\u76f8\u5e94\u7684\u53c2\u6570\u914d\u7f6e\uff0c\u7136\u540e\u4f20\u5165gps\u6570\u636e\u6267\u884c\u5339\u914d\uff1a \u6267\u884c\u5339\u914d<pre><code>mpm = MapMatch(net=my_net, flag_name='xa_sample', \n               gps_buffer=100, dense_gps=False,\n               use_sub_net=True, use_heading_inf=True, omitted_l=6.0,\n               del_dwell=True, dwell_l_length=50.0, dwell_n=0,\n               export_html=True, export_geo_res=True, use_gps_source=True,\n               gps_radius=15.0, export_all_agents=False,\n               out_fldr=r'./data/output/match_visualization/xa_sample')\n\n# execute\u51fd\u6570\u8fd4\u56de\u4e09\u4e2a\u7ed3\u679c:\n# \u7b2c\u4e00\u4e2a\u662f\u5339\u914d\u7ed3\u679c\u8868\u3001\u7b2c\u4e8c\u4e2a\u662f\u8b66\u544a\u4fe1\u606f\u3001\u7b2c\u4e09\u4e2a\u662f\u9519\u8bef\u4fe1\u606f\nmatch_res, may_error_info, error_info = mpm.execute(gps_df=gps_df)\nmatch_res.to_csv(r'./data/output/match_res.csv', encoding='utf_8_sig', index=False)\n</code></pre></p> </li> </ul>"},{"location":"UserGuide/%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#_3","title":"\u5339\u914d\u7ed3\u679c\u89e3\u6790","text":""},{"location":"UserGuide/%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#_4","title":"\u5339\u914d\u7ed3\u679c\u8868","text":"\u5b57\u6bb5\u540d\u79f0 \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u8bf4\u660e agent_id <code>int</code> gps\u70b9\u6240\u5c5eagent_id seq <code>int</code> gps\u70b9\u7684\u5e8f\u5217ID sub_seq <code>int</code> gps\u70b9\u7684\u5b50\u5e8f\u5217ID, \u5982\u679c\u5b50\u5e8f\u5217&gt;0, \u8bf4\u660e\u8be5\u70b9\u662f\u5728\u5339\u914d\u540e\u8865\u51fa\u6765\u7684\u70b9, \u79f0\u4e4b\u4e3a\u540e\u8865\u70b9, \u4e0d\u4f1a\u53bb\u8ba1\u7b97\u5176\u5728\u76ee\u6807\u8def\u6bb5\u4e0a\u7684\u6295\u5f71\u70b9 time <code>string</code> gps\u5b9a\u4f4d\u65f6\u95f4 loc_type <code>string</code> gps\u70b9\u7c7b\u578b, \u4e09\u7c7b: s\uff1a\u6e90GPS\u70b9\u3001d\uff1a\u589e\u5bc6\u70b9\u3001c\uff1a\u540e\u8865\u70b9 link_id <code>int</code> gps\u5339\u914d\u8def\u6bb5\u7684link_id\uff0c\u5bf9\u5e94\u8def\u7f51\u7684link_id\u5b57\u6bb5 from_node <code>int</code> gps\u5339\u914d\u8def\u6bb5\u7684\u8d77\u59cb\u8282\u70b9(\u8868\u5f81\u884c\u8f66\u65b9\u5411\u8d77\u70b9) to_node <code>int</code> gps\u5339\u914d\u8def\u6bb5\u7684\u7ec8\u5230\u8282\u70b9(\u8868\u5f81\u884c\u8f66\u65b9\u5411\u7ec8\u70b9) lng <code>float</code> gps\u70b9\u7684\u7ecf\u5ea6, EPSG:4326 lat <code>float</code> gps\u70b9\u7684\u7eac\u5ea6, EPSG:4326 prj_lng <code>float</code> gps\u70b9\u5728\u5339\u914d\u8def\u6bb5\u4e0a\u5bf9\u5e94\u5339\u914d\u70b9\u7684\u7ecf\u5ea6, EPSG:4326, \u540e\u8865\u70b9\u7684\u8be5\u503c\u4e3a\u7a7a prj_lat <code>float</code> gps\u70b9\u5728\u5339\u914d\u8def\u6bb5\u4e0a\u5bf9\u5e94\u5339\u914d\u70b9\u7684\u7eac\u5ea6, EPSG:4326, \u540e\u8865\u70b9\u7684\u8be5\u503c\u4e3a\u7a7a match_heading <code>float</code> gps\u5339\u914d\u70b9\u7684\u822a\u5411\u89d2(\u4ece\u6b63\u5317\u65b9\u5411\u5f00\u59cb\u987a\u65f6\u9488\u626b\u8fc7\u7684\u89d2\u5ea6, 0~360\u5ea6), \u540e\u8865\u70b9\u7684\u8be5\u503c\u4e3a\u7a7a dis_to_next <code>float</code> gps\u6295\u5f71\u70b9\u4e0e\u540e\u5e8f\u76f8\u90bbgps\u6295\u5f71\u70b9\u7684\u8def\u5f84\u8ddd\u79bb(\u4e0d\u8003\u8651\u540e\u8865\u70b9), \u540e\u8865\u70b9\u7684\u8be5\u503c\u4e3a\u7a7a route_dis <code>float</code> gps\u5339\u914d\u70b9\u5728\u5339\u914d\u8def\u6bb5\u4e0a\u4e0e\u8def\u6bb5\u8d77\u70b9\u7684\u8def\u5f84\u8ddd\u79bb \u7528\u6237\u6307\u5b9a\u5b57\u6bb5 <code>user-diy</code> \u53c2\u7167\u53c2\u6570user_field_list <p>Note</p> <p>\u5bf9\u4e8edir\u4e3a0\u7684\u53cc\u5411\u8def\u6bb5\uff0c\u4f8b\uff1alink_id=12, from_node=2, to_node=3\uff0c\u5339\u914d\u7ed3\u679c\u4e2d\u5339\u914d\u5230link_id\u4e3a12\u65f6\uff0c\u5176(from_node, to_node) \u53ef\u80fd\u4e3a(2, 3) \u4e5f\u53ef\u80fd\u4e3a (3, 2), \u8fd9\u4e2a\u7531GPS\u7684\u5b9e\u9645\u884c\u8f66\u65b9\u5411\u51b3\u5b9a</p> sub_seq &gt;= 1\u7684\u5373\u4e3a\u540e\u8865\u70b9\uff0c\u65e0\u5b9e\u9645\u610f\u4e49\uff0c\u4ec5\u4e3a\u4e86\u8f93\u51fa\u683c\u5f0f\u7684\u5de5\u6574"},{"location":"UserGuide/%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#_5","title":"\u8b66\u544a\u4fe1\u606f","text":"<ul> <li>\u53d1\u751f\u8b66\u544a\u7684agent\uff0c\u5176\u5339\u914d\u7ed3\u679c\uff0c\u8fde\u540c\u6ca1\u6709\u4efb\u4f55\u8b66\u544a\u7684agent\uff0c\u4f1a\u4e00\u8d77\u4f1a\u8f93\u51fa\u5728\u5339\u914d\u7ed3\u679c\u8868\u4e2d</li> <li>\u8b66\u544a\u4fe1\u606f<code>may_error_info</code>\u7684\u6570\u636e\u7ed3\u6784\u662f\u5b57\u5178\uff1a\u952e\u8868\u793aagent_id\uff0c\u503c\u662f\u4e00\u4e2a\u8868\uff0c\u8bb0\u5f55\u4e86\u8be5agent\u5728\u5339\u914d\u8fc7\u7a0b\u4e2d\u53d1\u751f\u8b66\u544a\u7684\u8def\u6bb5\u4fe1\u606f(\u53ef\u5728HTML\u4e2d\u53ef\u89c6\u5316\u67e5\u770b)</li> </ul> <p>\u6211\u4eec\u53ef\u4ee5\u6765\u770b\u4e00\u4e2a\u8fd4\u56de\u7684\u8b66\u544a\u4fe1\u606f\u7684\u793a\u4f8b\uff0c\u4ee5\u4e0b\u9762\u7684\u8b66\u544a\u4fe1\u606f\u7684\u7b2c\u4e00\u884c\u4e3a\u4f8b\uff0c\u4e00\u884c\u4ee3\u8868\u4e86\u4e00\u6b21\u8b66\u544a\uff0c\u6211\u4eec\u53ea\u7528\u5173\u5fc3<code>from_ft</code>\u5217\u3001<code>to_ft</code>\u5217\u503c\u7684\u7b2c2~3\u4e2a\u5143\u7d20(\u8def\u6bb5\u7684\u8d77\u59cb\u8282\u70b9)\uff0c\u5339\u914d<code>link(60, 59)</code> \u5230 \u5339\u914d<code>link(98, 25)</code> \u4e4b\u95f4\u4e0d\u8fde\u901a\uff0c\u8868\u660e\u4e86\u53ef\u80fd\u5b58\u5728\u8def\u6bb5\u7f3a\u5931</p> <pre><code>UserWarning: gps seq: 10 -&gt; 11 \u72b6\u6001\u8f6c\u79fb\u51fa\u73b0\u95ee\u9898, from_link:(60, 59) -&gt; to_link:(98, 25)\nUserWarning: gps seq: 111 -&gt; 112 \u72b6\u6001\u8f6c\u79fb\u51fa\u73b0\u95ee\u9898, from_link:(15, 38) -&gt; to_link:(78, 26)\n</code></pre> from_ft to_ft from_single to_single ft_gps (8,60,59,seq:10-11) (7,98,25,seq:10-11) 8 7 seq:10-11 (18,15,38,seq:10-11) (3,78,26,seq:10-11) 18 3 seq:10-11"},{"location":"UserGuide/%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#_6","title":"\u9519\u8bef\u4fe1\u606f","text":"<p><code>error_info</code>\u7684\u6570\u636e\u7c7b\u578b\u662f\u5217\u8868\uff0c\u8bb0\u5f55\u7684\u662f\u5339\u914d\u53d1\u751f\u9519\u8bef\u7684agent_id\uff0c\u4e00\u822c\u662fGPS\u6570\u636e\u5173\u8054\u4e0d\u5230\u4efb\u4f55\u8def\u7f51\u3001\u6216\u8005GPS\u6570\u636e\u70b9\u4e0d\u8db3\u4e24\u4e2a\u3001\u6216\u8005\u8def\u7f51\u7ebf\u5c42\u6709\u91cd\u53e0\u6298\u70b9\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u9519\u8befgotrackit\u90fd\u4f1a\u8f93\u51fa\u62a5\u9519\u4fe1\u606f\u7136\u540e\u8df3\u8fc7\u8be5\u6b21\u5339\u914d</p>"},{"location":"UserGuide/%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#html","title":"HTML\u53ef\u89c6\u5316","text":"<ul> <li>\u5730\u56fe\u5339\u914d\u7c7bMapMatch\u7684\u521d\u59cb\u5316\u53c2\u6570<code>export_html</code>\u63a7\u5236\u662f\u5426\u8f93\u51faHTML\u52a8\u753b(\u8f83\u4e3a\u8017\u65f6)\uff0c\u82e5\u6307\u5b9a\u4e3aTrue\uff0c\u5339\u914d\u7ed3\u675f\u540e\uff0c\u5728<code>out_fldr</code>\u4e0b\u4f1a\u751f\u6210HTML\u6587\u4ef6</li> <li>HTML\u53ef\u89c6\u5316\u9700\u8981\u8fde\u63a5\u7f51\u7edc(\u4e2d\u56fd\u5883\u5185\u53ef\u80fd\u9700\u8981\u79d1\u5b66\u4e0a\u7f51)\uff0c\u4f7f\u7528\u6d4f\u89c8\u5668\u6253\u5f00\u751f\u6210\u7684html\u6587\u4ef6\uff0c\u6309\u7167\u4e0b\u56fe\u70b9\u5f00\u65f6\u95f4\u8f74\u64ad\u653e\u5668</li> </ul> HTML\u53ef\u89c6\u5316 HTML\u53ef\u89c6\u5316 <p>html\u53ef\u89c6\u5316\u6587\u4ef6\u662f\u6211\u4eec\u5bf9\u5339\u914d\u7ed3\u679c\u8fdb\u884c\u6392\u67e5\u7684\u91cd\u8981\u6587\u4ef6\uff0c\u5b83\u53ef\u4ee5\u6e05\u6670\u7684\u5c55\u793a\u5339\u914d\u8fc7\u7a0b</p>"},{"location":"UserGuide/%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#geojson","title":"GeoJSON\u53ef\u89c6\u5316","text":"<p>\u5730\u56fe\u5339\u914d\u63a5\u53e3\u4e2d\u7684\u53c2\u6570<code>export_geo_res</code>\u63a7\u5236\u662f\u5426\u8f93\u51fa\u5339\u914d\u7ed3\u679cgeojson\u77e2\u91cf\u56fe\u5c42(\u8f83\u4e3a\u8017\u65f6)\uff0c\u4e00\u4e2aagent\u7684\u5339\u914d\u77e2\u91cf\u7ed3\u679c\u7531\u56db\u4e2a\u6587\u4ef6\u7ec4\u6210\uff1a</p> <ul> <li><code>flag_name</code>-<code>agent_id</code>-gps.geojson\uff1agps\u70b9\u77e2\u91cf\u56fe\u5c42</li> <li><code>flag_name</code>-<code>agent_id</code>-match_link.geojson\uff1a\u5339\u914dlink\u77e2\u91cf\u56fe\u5c42</li> <li><code>flag_name</code>-<code>agent_id</code>-prj_l.geojson\uff1a\u6295\u5f71\u7ebf\u77e2\u91cf\u56fe\u5c42</li> <li><code>flag_name</code>-<code>agent_id</code>-prj_p.geojson\uff1a\u8def\u6bb5\u5339\u914d\u70b9\u77e2\u91cf\u56fe\u5c42</li> <li><code>flag_name</code>-<code>agent_id</code>-heading_vec.geojson\uff1a\u8def\u6bb5\u5339\u914d\u70b9\u822a\u5411\u5411\u91cf</li> </ul> <p>\u53ef\u4f7f\u7528GIS\u8f6f\u4ef6\u5bf9geojson\u8fdb\u884c\u53ef\u89c6\u5316\uff0c\u5982QGIS</p> GeoJSON\u53ef\u89c6\u5316"},{"location":"UserGuide/%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#_7","title":"\u52a0\u901f\u5339\u914d","text":"<p>\u52a0\u901f\u5339\u914d\u7684\u65b9\u6cd5\uff0cgotrackit\u63d0\u4f9b\u4e86\u56db\u79cd\u4e0d\u540c\u7684\u601d\u8def\uff1a</p> <ul> <li>\u5339\u914d\u5f00\u59cb\u524d\uff0c\u5bf9\u8def\u7f51\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u8fdb\u884c\u9884\u8ba1\u7b97\uff0c\u5e76\u4e14\u8def\u5f84\u7ed3\u679c\u5b58\u4e8e\u5185\u5b58\u4e2d\uff0c\u4ece\u800c\u51cf\u5c11\u5339\u914d\u8fc7\u7a0b\u4e2d\u7684\u6700\u77ed\u8def\u8ba1\u7b97\u7684\u65f6\u95f4\u5f00\u9500(\u5bf9\u5185\u5b58\u8981\u6c42\u8f83\u9ad8)</li> <li>\u5bf9\u5b9a\u4f4d\u6570\u636e\u6309\u7167agent_id\u5206\u7ec4\uff0c\u4f7f\u7528\u591a\u4e2aCPU\u6838\u5fc3\u5bf9\u4e0d\u540c\u7684\u6570\u636e\u7ec4\u540c\u65f6\u8fdb\u884c\u5e76\u884c\u5339\u914d(\u5bf9\u5185\u5b58\u8981\u6c42\u8f83\u9ad8)</li> <li>\u5bf9\u8def\u7f51\u7684\u7ebf\u578b\u8fdb\u884c\u7b80\u5316\uff0c\u4ece\u800c\u51cf\u5c11\u5339\u914d\u8fc7\u7a0b\u4e2d\u6295\u5f71\u53c2\u6570\u8ba1\u7b97\u7684\u65f6\u95f4\u5f00\u9500</li> <li>\u4f7f\u7528\u7a7a\u95f4\u5206\u5c42\u5173\u8054\u7b56\u7565\uff0c\u51cf\u5c11\u7a7a\u95f4\u5173\u8054\u7684\u65f6\u95f4\u5f00\u9500</li> </ul>"},{"location":"UserGuide/%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#_8","title":"\u5982\u4f55\u542f\u7528\u52a0\u901f\u7b56\u7565","text":"<p>\u4ee5\u4e0b\u662f\u4e0d\u540c\u52a0\u901f\u7b56\u7565\u7684\u4f7f\u7528\u65b9\u6cd5\uff0c\u9ad8\u4eae\u7684\u4ee3\u7801\u8868\u660e\u4e86\u5176\u4e0e\u5e38\u89c4\u5339\u914d\u4ee3\u7801\u76f8\u6bd4\uff0c\u9700\u8981\u505a\u54ea\u4e9b\u53c2\u6570\u914d\u7f6e\uff1b\u60a8\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u52a0\u901f\u7b56\u7565\u8fdb\u884c\u53e0\u52a0\u4f7f\u7528\u3002</p> \u5e38\u89c4\u5339\u914d\u542f\u7528\u8def\u5f84\u9884\u8ba1\u7b97\u542f\u7528\u591a\u6838\u5e76\u884c\u5339\u914d\u7b80\u5316\u8def\u7f51\u7ebf\u578b\u4f7f\u7528\u7a7a\u95f4\u5206\u5c42\u5173\u8054 <pre><code>link = gpd.read_file(r'./data/input/modifiedConn_link.shp')\nnode = gpd.read_file(r'./data/input/modifiedConn_node.shp')\nmy_net = Net(link_gdf=link, node_gdf=node)\nmy_net.init_net()  # net\u521d\u59cb\u5316\n\ngps_df = pd.read_csv(r'./data/input/example_gps.csv')\n\nmpm = MapMatch(net=my_net, flag_name='xa_sample', \n               gps_buffer=100, dense_gps=False,\n               use_sub_net=True, use_heading_inf=True, omitted_l=6.0,\n               del_dwell=True, dwell_l_length=50.0, dwell_n=0,\n               export_html=True, export_geo_res=True, use_gps_source=True,\n               gps_radius=15.0, export_all_agents=False,\n               out_fldr=r'./data/output/match')\n# execute\u51fd\u6570\u8fd4\u56de\u4e09\u4e2a\u7ed3\u679c:\n# \u7b2c\u4e00\u4e2a\u662f\u5339\u914d\u7ed3\u679c\u8868\u3001\u7b2c\u4e8c\u4e2a\u662f\u8b66\u544a\u4fe1\u606f\u3001\u7b2c\u4e09\u4e2a\u662f\u9519\u8bef\u4fe1\u606f\nmatch_res, may_error_info, error_info = mpm.execute(gps_df=gps_df)\nmatch_res.to_csv(r'./data/output/match_res.csv', encoding='utf_8_sig', index=False)\n</code></pre> <pre><code>link = gpd.read_file(r'./data/input/modifiedConn_link.shp')\nnode = gpd.read_file(r'./data/input/modifiedConn_node.shp')\nmy_net = Net(link_gdf=link, node_gdf=node, \n             fmm_cache=True, fmm_cache_fldr=r'./data/input/', recalc_cache=False)\nmy_net.init_net()  # net\u521d\u59cb\u5316\n\ngps_df = pd.read_csv(r'./data/input/example_gps.csv')\n\nmpm = MapMatch(net=my_net, flag_name='xa_sample', \n               gps_buffer=100, dense_gps=False,\n               use_sub_net=True, use_heading_inf=True, omitted_l=6.0,\n               del_dwell=True, dwell_l_length=50.0, dwell_n=0,\n               export_html=True, export_geo_res=True, use_gps_source=True,\n               gps_radius=15.0, export_all_agents=False,\n               out_fldr=r'./data/output/match')\n# execute\u51fd\u6570\u8fd4\u56de\u4e09\u4e2a\u7ed3\u679c:\n# \u7b2c\u4e00\u4e2a\u662f\u5339\u914d\u7ed3\u679c\u8868\u3001\u7b2c\u4e8c\u4e2a\u662f\u8b66\u544a\u4fe1\u606f\u3001\u7b2c\u4e09\u4e2a\u662f\u9519\u8bef\u4fe1\u606f\nmatch_res, may_error_info, error_info = mpm.execute(gps_df=gps_df)\nmatch_res.to_csv(r'./data/output/match_res.csv', encoding='utf_8_sig', index=False)\n</code></pre> <pre><code>link = gpd.read_file(r'./data/input/modifiedConn_link.shp')\nnode = gpd.read_file(r'./data/input/modifiedConn_node.shp')\nmy_net = Net(link_gdf=link, node_gdf=node)\nmy_net.init_net()  # net\u521d\u59cb\u5316\n\ngps_df = pd.read_csv(r'./data/gps/example_gps.csv')\n\nmpm = MapMatch(net=my_net, flag_name='xa_sample', \n               gps_buffer=100, dense_gps=False,\n               use_sub_net=True, use_heading_inf=True, omitted_l=6.0,\n               del_dwell=True, dwell_l_length=50.0, dwell_n=0,\n               export_html=True, export_geo_res=True, use_gps_source=True,\n               gps_radius=15.0, export_all_agents=False,\n               out_fldr=r'./data/output/match')\n# execute\u51fd\u6570\u8fd4\u56de\u4e09\u4e2a\u7ed3\u679c:\n# \u7b2c\u4e00\u4e2a\u662f\u5339\u914d\u7ed3\u679c\u8868\u3001\u7b2c\u4e8c\u4e2a\u662f\u8b66\u544a\u4fe1\u606f\u3001\u7b2c\u4e09\u4e2a\u662f\u9519\u8bef\u4fe1\u606f\nmatch_res, may_error_info, error_info = mpm.multi_core_execute(gps_df=gps_df, core_num=2)\nmatch_res.to_csv(r'./data/output/match_res.csv', encoding='utf_8_sig', index=False)\n</code></pre> <pre><code>link = gpd.read_file(r'./data/input/modifiedConn_link.shp')\nnode = gpd.read_file(r'./data/input/modifiedConn_node.shp')\n\n# \u9002\u5f53\u7b80\u5316\u7ebf\u578b\uff0csimplify(x)\u4e2d\u7684x\u5355\u4f4d\u4e3am\uff0c\u8be5\u63a5\u53e3\u4f1a\u4f7f\u7528\u9053\u683c\u62c9\u65af-\u666e\u514b\u7b97\u6cd5\u5bf9\u7ebf\u578b\u8fdb\u884c\u7b80\u5316\uff0c\u8be5\u503c\u5982\u9009\u53d6\u7684\u8fc7\u5927\u4f1a\u5bfc\u81f4\u6240\u6709link\u90fd\u9000\u5316\u4e3a\u76f4\u7ebf\nlink = link.to_crs('\u4f60\u9009\u5b9a\u7684\u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb')\nlink['geometry'] = link['geometry'].simplify(1.0)  # \u5207\u8bb0\u4e0d\u53ef\u5728\u5730\u7406(\u7ecf\u7eac\u5ea6)\u5750\u6807\u7cfb\u4e0b\u6309\u71671.0\u4e2a\u5355\u4f4d\u8fdb\u884csimplify\uff0c1\u4e2a\u7ecf\u7eac\u5ea6\u5355\u4f4d\u7684\u5b9e\u9645\u8ddd\u79bb\u4e3a110km\u5de6\u53f3\nlink = link.to_crs('EPSG:4326')\n\nmy_net = Net(link_gdf=link, node_gdf=node)\nmy_net.init_net()  # net\u521d\u59cb\u5316\n\ngps_df = pd.read_csv(r'./data/input/example_gps.csv')\n\nmpm = MapMatch(net=my_net, flag_name='xa_sample', \n               gps_buffer=100, dense_gps=False,\n               use_sub_net=True, use_heading_inf=True, omitted_l=6.0,\n               del_dwell=True, dwell_l_length=50.0, dwell_n=0,\n               export_html=True, export_geo_res=True, use_gps_source=True,\n               gps_radius=15.0, export_all_agents=False,\n               out_fldr=r'./data/output/match')\n# execute\u51fd\u6570\u8fd4\u56de\u4e09\u4e2a\u7ed3\u679c:\n# \u7b2c\u4e00\u4e2a\u662f\u5339\u914d\u7ed3\u679c\u8868\u3001\u7b2c\u4e8c\u4e2a\u662f\u8b66\u544a\u4fe1\u606f\u3001\u7b2c\u4e09\u4e2a\u662f\u9519\u8bef\u4fe1\u606f\nmatch_res, may_error_info, error_info = mpm.execute(gps_df=gps_df)\nmatch_res.to_csv(r'./data/output/match_res.csv', encoding='utf_8_sig', index=False)\n</code></pre> <pre><code>link = gpd.read_file(r'./data/input/modifiedConn_link.shp')\nnode = gpd.read_file(r'./data/input/modifiedConn_node.shp')\nmy_net = Net(link_gdf=link, node_gdf=node, \n             is_hierarchical=True)\nmy_net.init_net()  # net\u521d\u59cb\u5316\n\ngps_df = pd.read_csv(r'./data/input/example_gps.csv')\n\nmpm = MapMatch(net=my_net, flag_name='xa_sample', \n               gps_buffer=100, dense_gps=False,\n               use_sub_net=True, use_heading_inf=True, omitted_l=6.0,\n               del_dwell=True, dwell_l_length=50.0, dwell_n=0,\n               export_html=True, export_geo_res=True, use_gps_source=True,\n               gps_radius=15.0, export_all_agents=False,\n               out_fldr=r'./data/output/match')\n# execute\u51fd\u6570\u8fd4\u56de\u4e09\u4e2a\u7ed3\u679c:\n# \u7b2c\u4e00\u4e2a\u662f\u5339\u914d\u7ed3\u679c\u8868\u3001\u7b2c\u4e8c\u4e2a\u662f\u8b66\u544a\u4fe1\u606f\u3001\u7b2c\u4e09\u4e2a\u662f\u9519\u8bef\u4fe1\u606f\nmatch_res, may_error_info, error_info = mpm.execute(gps_df=gps_df)\nmatch_res.to_csv(r'./data/output/match_res.csv', encoding='utf_8_sig', index=False)\n</code></pre>"},{"location":"UserGuide/%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#_9","title":"\u6ce8\u610f\u4e8b\u9879","text":"<p>\u5bf9\u4e8e\u4e0d\u540c\u7684\u52a0\u901f\u7b56\u7565\uff0c\u60a8\u5e94\u8be5\u77e5\u6653\u5176\u9002\u7528\u573a\u666f\u4ee5\u53ca\u76f8\u5173\u6ce8\u610f\u4e8b\u9879\uff1a</p>"},{"location":"UserGuide/%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#_10","title":"\u591a\u6838\u5e76\u884c\u5339\u914d","text":"<ul> <li>\u5bf9\u4e8e\u591a\u6838\u5e76\u884c\u5339\u914d\uff1a\u5b9e\u9645\u4e0agotrackit\u4f7f\u7528\u7684\u662f\u591a\u8fdb\u7a0b\uff0c\u5f00\u542fN\u4e2a\u6838\u4f1a\u5bfc\u81f4\u5185\u5b58\u5360\u7528\u53d8\u4e3a\u539f\u6765\u7684N\u500d\uff0c\u5185\u5b58\u5360\u7528\u8fc7\u9ad8\u4f1a\u6709\u6ea2\u51fa\u7684\u98ce\u9669</li> <li>\u542f\u7528\u591a\u6838\u5339\u914d\u540e\uff0cgotrackit\u4f1a\u6309\u7167agent_id\u5bf9\u8f66\u8f86\u8fdb\u884c\u5206\u7ec4\uff0c\u5982\u679c\u60a8\u7684agent\u6570\u8f83\u5c0f\uff0c\u542f\u7528\u591a\u6838\u4e0d\u4f1a\u6709\u660e\u663e\u7684\u52a0\u901f\u6548\u679c</li> </ul>"},{"location":"UserGuide/%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#_11","title":"\u542f\u7528\u8def\u5f84\u9884\u8ba1\u7b97","text":"<ul> <li>\u82e5\u542f\u7528\u8def\u5f84\u9884\u8ba1\u7b97\uff0c\u5982\u679c\u7f51\u7edc\u8f83\u5927\uff0c\u5219\u5bf9\u7535\u8111\u7684\u5185\u5b58\u5927\u5c0f\u6709\u8f83\u9ad8\u7684\u8981\u6c42\uff0c\u5982\u679c\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u5185\u5b58\u6ea2\u51fa\uff0c\u8bf7\u5c1d\u8bd5\u63d0\u9ad8\u521d\u59cb\u5316Net\u65f6\u7684cache_cn\u3001cache_slice\uff0c\u6216\u8005\u964d\u4f4ecut_off</li> <li>\u53ea\u8981\u8def\u7f51\u53d1\u751f\u4e86\u4efb\u4f55\u53d8\u5316,\u8bf7\u91cd\u65b0\u8fdb\u884c\u8def\u5f84\u9884\u8ba1\u7b97</li> <li>\u8ba1\u7b97\u8def\u5f84\u7f13\u5b58,\u8bf7\u786e\u4fdd\u4f60\u7684\u8def\u6bb5\u7ebf\u578b\u6ca1\u6709\u91cd\u590d\u70b9,\u4f60\u53ef\u4ee5\u4f7f\u7528\u8def\u7f51\u4f18\u5316-\u6e05\u6d17\u7ebf\u5c42\u6570\u636e</li> </ul> <p>\u4ee5\u4e0a\u7684\u8def\u7f51\u6784\u5efa\u7684\u4ee3\u7801\u6267\u884c\u7ed3\u675f\u540e, \u4f1a\u5728<code>r'./data/input/net/xian/'</code>\u4e0b\u751f\u6210\u4e24\u4e2a\u9884\u8ba1\u7b97\u7ed3\u679c\u6587\u4ef6, \u7b14\u8005\u7528\u6df1\u5733\u7684\u8def\u7f51(9w\u6761link, 8w\u4e2a\u8282\u70b9), \u9884\u8ba1\u7b97\u7684\u65f6\u95f4\u5927\u6982\u4e3a\u4e24\u5206\u949f, \u5728\u4f7f\u7528\u7684\u8def\u7f51\u6ca1\u6709\u4efb\u4f55\u53d8\u5316\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0b\u6b21\u4f7f\u7528\u8be5\u8def\u7f51\u8fdb\u884c\u5339\u914d\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a\u9884\u8ba1\u7b97\u7ed3\u679c\u7684\u8def\u5f84\u5373\u53ef, \u6b64\u65f6\u76f4\u63a5\u6307\u5b9a<code>recalc_cache=False</code>, \u610f\u601d\u4e3a\u76f4\u63a5\u4ece<code>fmm_cache_fldr</code>\u4e2d\u8bfb\u53d6\u9884\u8ba1\u7b97\u7ed3\u679c, \u4e0d\u518d\u91cd\u590d\u9884\u8ba1\u7b97\u7684\u8fc7\u7a0b</p>"},{"location":"UserGuide/%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#_12","title":"\u4f7f\u7528\u7a7a\u95f4\u5206\u5c42\u5173\u8054","text":"<ul> <li>\u9002\u7528\u4e8e\u8d85\u5927\u89c4\u6a21\u7f51\u7edc\u4e0b\u7684\u957f\u8f68\u8ff9\u5339\u914d\uff0c\u53ef\u4ee5\u51cf\u5c11\u5b50\u7f51\u7edc\u7684\u7a7a\u95f4\u5173\u8054\u65f6\u95f4\u5f00\u9500</li> </ul>"},{"location":"UserGuide/%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#_13","title":"\u7f51\u683c\u53c2\u6570\u641c\u7d22","text":"<p>gotrackit\u652f\u6301\u5bf9\u5730\u56fe\u5339\u914d\u63a5\u53e3\u4e2d\u7684\u56db\u4e2a\u53c2\u6570\u6267\u884c\u7f51\u683c\u641c\u7d22\uff1a <code>beta</code>\u3001<code>gps_sigma</code>\u3001<code>omitted_l</code>\u3001<code>use_heading_inf</code></p> <p>\u5373gotrackit\u53ef\u4ee5\u904d\u5386\u8fd9\u56db\u4e2a\u53c2\u6570\u53ef\u80fd\u7684\u7ec4\u5408\uff0c\u76f4\u5230\u5339\u914d\u7ed3\u679c\u6ca1\u6709\u8b66\u544a\uff0c\u5982\u679c\u6240\u6709\u7684\u53c2\u6570\u7ec4\u5408\u90fd\u6709\u8b66\u544a\uff0c\u90a3\u4e48\u5c06\u8f93\u51fa\u6700\u540e\u4e00\u6b21\u53c2\u6570\u7ec4\u5408\u7684\u5339\u914d\u7ed3\u679c\uff0c\u5339\u914d\u7ed3\u679c\u8fd8\u5c06\u8fd4\u56de\u53c2\u6570\u7ec4\u5408\u5bf9\u5e94\u7684\u5339\u914d\u8b66\u544a\u6570\u91cf</p> <p>\u4f7f\u7528\u7f51\u683c\u53c2\u6570\u641c\u7d22\uff0c\u4f60\u53ea\u9700\u8981\u6784\u5efa\u4e00\u4e2a\u7f51\u683c\u53c2\u6570\u7c7b\uff0c\u5e76\u4e14\u6307\u5b9a\u5404\u53c2\u6570\u7684\u53d6\u503c\u5217\u8868\u5373\u53ef</p> <pre><code>import pandas as pd\nimport geopandas as gpd\nfrom gotrackit.map.Net import Net\nfrom gotrackit.MapMatch import MapMatch\nfrom gotrackit.model.Para import ParaGrid\n\nif __name__ == '__main__':\n\n    gps_df = gpd.read_file(r'./data/input/gps.geojson')\n\n    # \u8bf7\u7559\u610fshp\u6587\u4ef6\u7684\u7f16\u7801\uff0c\u53ef\u4ee5\u663e\u793a\u6307\u5b9aencoding\uff0c\u786e\u4fdd\u5b57\u6bb5\u6ca1\u6709\u4e71\u7801\n    link = gpd.read_file(r'./data/input/modifiedConn_link.shp')\n    node = gpd.read_file(r'./data/input/modifiedConn_node.shp')\n    my_net = Net(link_gdf=link, node_gdf=node, fmm_cache=True,\n             recalc_cache=False, fmm_cache_fldr=r'./data/input/net/xian')\n    my_net.init_net()\n\n\n    # 3. \u65b0\u5efa\u4e00\u4e2a\u7f51\u683c\u53c2\u6570\u5bf9\u8c61\n    # \u6307\u5b9a\u53c2\u6570\u7684\u53d6\u503c\u8303\u56f4\u5217\u8868, \u53ef\u6307\u5b9a\u56db\u4e2a\u53c2\u6570\u5217\u8868\n    pgd = ParaGrid(use_heading_inf_list=[False, True], beta_list=[0.1, 1.0], gps_sigma_list=[1.0, 5.0])\n\n    # 4. \u5339\u914d\n    # \u4f20\u5165\u7f51\u683c\u53c2\u6570\uff1ause_para_grid=True, para_grid=pgd\n    mpm = MapMatch(net=my_net, is_rolling_average=True, window=2, flag_name='dense_example',\n               export_html=True, export_geo_res=True,\n               gps_buffer=400,\n               out_fldr=r'./data/output/match_visualization/dense_example',\n               dense_gps=True,\n               use_sub_net=True, dense_interval=50.0, use_gps_source=False, use_heading_inf=True,\n               gps_radius=15.0, use_para_grid=True, para_grid=pgd)\n    res, warn_info, error_info = mpm.execute(gps_df=gps_df)\n\n    res.to_csv(r'./data/output/match_visualization/dense_example/match_res.csv', encoding='utf_8_sig', index=False)\n\n    # \u53ef\u4ee5\u67e5\u770b\u4e0d\u540c\u7684\u53c2\u6570\u7ec4\u5408\u4e0b\uff0c\u5339\u914d\u8fc7\u7a0b\u4e2d\u7684\u8b66\u544a\u6570\u91cf\n    print(pd.DataFrame(pgd.search_res))\n</code></pre> <p>\u4f7f\u7528\u53c2\u6570\u7f51\u683c\u8fdb\u884c\u5339\u914d\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u7ec4\u5408\u53c2\u6570\uff0c\u5e76\u4e14\u8f93\u51fa\u4e0d\u540c\u53c2\u6570\u7ec4\u5408\u4e0b\u7684\u8b66\u544a\u6570\uff1a</p> \u7f51\u683c\u53c2\u6570\u641c\u7d22"},{"location":"UserGuide/%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#_14","title":"\u5339\u914d\u7ed3\u679c\u8def\u5f84\u589e\u5bc6","text":"<p>\u7531\u4e8eGPS\u6570\u636e\u7684\u8d70\u5411\u5e76\u4e0d\u4f1a\u4e25\u683c\u548c\u5339\u914d\u8def\u6bb5\u7684\u8d70\u5411\u4e00\u6a21\u4e00\u6837\uff0c\u5f53\u6211\u4eec\u4f7f\u7528\u5339\u914d\u7ed3\u679c\u7684\u6295\u5f71\u70b9\u53bb\u6784\u9020\u8def\u5f84\u52a8\u753b\u65f6\uff0c\u8def\u5f84\u52a8\u753b\u4e0d\u80fd\u4e25\u683c\u8d34\u5408\u8def\u6bb5\u7ebf\u578b</p> <p>gotrackit\u63d0\u4f9b\u4e86\u8def\u5f84\u589e\u5bc6\u51fd\u6570dense_res_based_on_net\uff0c\u4f9d\u636e\u5339\u914d\u7ed3\u679c\u8868\u4e2d\u7684<code>agent_id\u3001seq\u3001sub_seq\u3001link_id\u3001from_node\u3001to_node\u3001prj_lng\u3001prj_lat\u3001time\u3001route_dis</code>\u5b57\u6bb5\u5bf9\u5339\u914d\u7ed3\u679c\u6309\u7167\u8def\u6bb5\u8fdb\u884c\u589e\u5bc6\uff0c\u589e\u5bc6\u540e\u7684\u6570\u636e\u6240\u751f\u6210\u7684\u8f68\u8ff9\u548c\u8def\u6bb5\u7ebf\u578b\u7684\u8d34\u5408\u5ea6\u5927\u5927\u63d0\u5347\uff0c\u53ef\u4ee5\u63d0\u5347\u5c55\u793a\u6548\u679c</p> \u5bf9\u5339\u914d\u7ed3\u679c\u8fdb\u884c\u8def\u5f84\u589e\u5bc6 <p>\u4f7f\u7528dense_res_based_on_net\u51fd\u6570\u53ef\u8fdb\u884c\u8def\u5f84\u589e\u5bc6\uff1a <pre><code>&gt;&gt;&gt; from gotrackit.MatchResAna import dense_res_based_on_net\n&gt;&gt;&gt; dense_match_res = dense_res_based_on_net(net=my_net, match_res_df=match_res_df)\n</code></pre></p>"},{"location":"UserGuide/%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#_15","title":"\u6392\u67e5\u8b66\u544a","text":"<p>\u4e00\u822c\u6765\u8bf4\uff0c\u5339\u914d\u63a5\u53e3\u8fd4\u56de\u7684<code>warn_info</code>(\u5373[execute]\u51fd\u6570\u8fd4\u56de\u7684\u7b2c\u4e8c\u4e2a\u4fe1\u606f)\u610f\u5473\u7740\u72b6\u6001\u8f6c\u79fb\u7684\u5931\u8d25\uff0c\u5927\u6982\u7387\u8bf4\u660e\u4f60\u7684\u8def\u7f51\u5b58\u5728\u4e0d\u8fde\u901a\u7684\u4f4d\u7f6e\uff0c\u5982\u4f55\u5c06\u8fd9\u6837\u7684\u4fe1\u606f\u5feb\u901f\u5bfc\u5165QGIS\u4e2d\u8fdb\u884c\u4fbf\u6377\u67e5\u770b\u3001\u6838\u5b9e\uff0c\u4ece\u800c\u5bf9\u8def\u7f51\u8fdb\u884c\u624b\u52a8\u4fee\u590d\u5462\uff1f</p> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528gotrackit\u7684[generate_check_file]\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536<code>warn_info</code>\u548cNet\u5bf9\u8c61\u540e\u5e2e\u4f60\u8f93\u51fa\u4e00\u4e2a\u7a7a\u95f4\u4e66\u7b7e\u6587\u4ef6(xml\u6587\u4ef6)\u548c\u8b66\u544a\u8def\u6bb5shp\u6587\u4ef6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528QGIS\u5bf9\u95ee\u9898\u8def\u6bb5\u8fdb\u884c\u5feb\u901f\u7684\u6392\u67e5</p> <pre><code>from gotrackit.MatchResAna import generate_check_file\nif __name__ == '__main__':\n\n    # \u505a\u5b8c\u5339\u914d\u540e #\n    match_res, warn_info, error_info = mpm.execute(gps_df=gps_df)\n\n    # my_net\u662fnet\u8def\u7f51\u5bf9\u8c61\n    generate_check_file(my_net, warn_info_dict=warn_info,\n                        out_fldr=r'./data/output/match_visualization/0614BUG/',\n                        file_name='check_net')\n</code></pre> \u4f7f\u7528QGIS\u7684\u7a7a\u95f4\u4e66\u7b7e <p>\u5982\u56fe\u6240\u793a\uff0c\u5728QGIS\u7684\u5de6\u4fa7\u6d4f\u89c8\u7a97\u53e3 - Spatial Bookmarks - User Bookmarks\u53f3\u952e - \u65b0\u5efa\u7a7a\u95f4\u4e66\u7b7e\u540e\uff0c\u9009\u62e9.xml\u7a7a\u95f4\u4e66\u7b7e\u6587\u4ef6\u5bfc\u5165\uff0c\u5373\u53ef\u770b\u5230\u4e66\u7b7e\u6587\u4ef6\u5939\uff0c\u5c55\u5f00\u4e66\u7b7e\u6587\u4ef6\u5939\u540e\u901a\u8fc7\u70b9\u51fb\u4e66\u7b7e\u53ef\u4ee5\u5feb\u901f\u5b9a\u4f4d\u95ee\u9898\u8def\u6bb5</p>"},{"location":"UserGuide/%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#_16","title":"\u8c03\u53c2\u65b9\u6cd5","text":"<ul> <li> <p>\u7a0b\u5e8f\u63d0\u793a-\u9884\u5904\u7406\u540eGPS\u70b9\u4e0d\u8db3\u4e24\u4e2a,\u65e0\u6cd5\u5339\u914d\uff1a</p> <ul> <li>\u53ef\u80fd\u505c\u7559\u70b9\u8bc6\u522b\u53c2\u6570\u4e0d\u5408\u7406\uff0c\u53ef\u80fd\u4f60\u7684GPS\u6570\u636e\u662f\u9ad8\u9891\u5b9a\u4f4d\u6570\u636e, \u76f8\u90bb\u70b9\u7684\u95f4\u8ddd\u5c0f\u4e8e<code>dwell_l_length</code>, \u6b64\u65f6\u6070\u597d\u4f60\u5f00\u4e86\u505c\u7559\u70b9\u8bc6\u522b\u529f\u80fd, \u6240\u6709\u7684GPS\u6570\u636e\u88ab\u5f53\u4f5c\u505c\u7559\u70b9\u5220\u9664\u4e86, \u4f60\u9700\u8981\u5173\u6389\u505c\u7559\u70b9\u8bc6\u522b\u7684\u5f00\u5173, \u518d\u6253\u5f00\u6570\u636e\u964d\u9891, \u5b8f\u89c2\u8def\u7f51\u5339\u914d\u4e0d\u9700\u8981\u8fd9\u4e48\u9ad8\u9891\u7684GPS\u5b9a\u4f4d</li> <li>\u53ef\u80fd\u662f<code>gps_buffer</code>\u8bbe\u7f6e\u7684\u592a\u5c0f\uff1a\u5927\u90e8\u5206GPS\u6570\u636e\u5728<code>gps_buffer</code>\u5185\u6ca1\u6709\u5173\u8054\u5230\u4efb\u4f55\u8def\u7f51, \u90a3\u4e48\u8fd9\u90e8\u5206GPS\u6570\u636e\u4f1a\u88ab\u5220\u9664</li> <li>\u53ef\u80fd\u662f\u6e90\u6570\u636e\u95ee\u9898\uff1a\u53ef\u80fd\u662f\u6b64\u8f86\u8f66\u7684GPS\u6570\u636e\u70b9\u672c\u8eab\u5c31\u4e0d\u8db3\u4e24\u4e2a</li> </ul> </li> <li> <p>\u5728html\u53ef\u89c6\u5316\u7ed3\u679c\u4e2d\u770b\u5230\u5339\u914d\u8def\u5f84\u4e0d\u8fde\u7eed</p> <ul> <li>\u53ef\u80fd\u662f<code>gps_buffer</code>\u548c<code>top_k</code>\u7684\u503c\u5c0f\u4e86(70%\u7684\u9519\u8bef\u53ef\u80fd\u662f\u8fd9\u4e2a\u539f\u56e0)</li> <li>\u6bcf\u4e2aGPS\u70b9\u4f9d\u636e\u6307\u5b9a\u7684<code>gps_buffer</code>\u5efa\u7acb\u5706\u5f62\u7f13\u51b2\u533a\uff0c\u7f13\u51b2\u533a\u5185\u5173\u8054\u5230\u7684\u8def\u6bb5\u4e3a\u8be5GPS\u70b9\u7684\u521d\u6b65\u5019\u9009\u8def\u6bb5\uff0c\u7136\u540e\u4f9d\u636e<code>top_k</code>\u53c2\u6570\uff0c\u4ece\u521d\u6b65\u5019\u9009\u8def\u6bb5\u4e2d\u9009\u53d6\u79bb\u8be5GPS\u70b9\u6700\u8fd1\u7684<code>top_k</code>\u4e2a\u8def\u6bb5\u4f5c\u4e3a\u6700\u7ec8\u5019\u9009\u8def\u6bb5\uff0c</li> <li>\u5982\u679cGPS\u672c\u8eab\u5b9a\u4f4d\u8bef\u5dee\u8f83\u5927\uff0c\u4e14\u8fd9\u4e24\u4e2a\u503c\u8bbe\u5b9a\u7684\u6bd4\u8f83\u5c0f\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6b63\u786e\u7684\u8def\u6bb5\u6ca1\u6709\u88ab\u9009\u4e3a\u6700\u7ec8\u5019\u9009\u8def\u6bb5, \u4ece\u800c\u5bfc\u81f4\u5339\u914d\u8def\u5f84\u4e0d\u8fde\u7eed</li> <li>\u5982\u679c\u542f\u7528\u4e86\u589e\u5bc6\u53c2\u6570\uff0c\u4e00\u822c\u6765\u8bb2\uff0c\u6700\u597d\u8981\u589e\u5927<code>gps_buffer</code>\u548c<code>top_k</code>\u7684\u503c</li> <li>\u53ef\u80fd\u662f\u6e90\u8f68\u8ff9\u70b9\u8f83\u4e3a\u7a00\u758f(\u76f8\u90bbGPS\u70b9\u95f4\u8ddd\u5927\u4e8e1000m), \u4f46\u662f\u6ca1\u6709\u542f\u7528\u8f68\u8ff9\u70b9\u81ea\u52a8\u589e\u5bc6</li> <li>\u53ef\u80fd\u662f<code>cut_off</code>\u9009\u5c0f\u4e86\uff1a<code>cut_off</code>\u662f\u8def\u5f84\u641c\u7d22\u622a\u65ad\u503c, \u9ed8\u8ba41200m</li> <li>\u53ef\u80fd\u662f\u8def\u7f51\u672c\u8eab\u4e0d\u8fde\u901a\uff1a\u68c0\u67e5\u5728\u8def\u5f84\u65ad\u5f00\u7684\u4f4d\u7f6e, \u8def\u7f51\u662f\u5426\u8054\u901a, \u68c0\u67e5\u8054\u901a\u6027\u8981\u68c0\u67e5\u7ebf\u5c42\u6587\u4ef6\u7684<code>from_node\u3001to_node</code>\u5b57\u6bb5\u503c</li> <li>\u53ef\u80fd\u662fGPS\u6570\u636e\u7684\u65f6\u95f4\u5217\u95ee\u9898\uff1a\u53ef\u80fd\u662f\u4f60\u7684GPS\u6570\u636e\u5b9a\u4f4d\u65f6\u95f4\u7cbe\u5ea6\u4e0d\u591f\uff0c\u5982\u524d\u540e\u4e24\u4e2a\u70b9\u7684\u5b9a\u4f4d\u65f6\u95f4\u90fd\u662f<code>2023-11-12 17:30:55</code>\uff0c\u672c\u5305\u5728\u6784\u5efaGPS\u5bf9\u8c61\u65f6\uff0c\u4f1a\u6309\u7167\u65f6\u95f4\u5217\u6392\u5e8f\uff0c\u76f8\u540c\u7684\u5b9a\u4f4d\u65f6\u95f4\u53ef\u80fd\u5bfc\u81f4\u4e24\u4e2a\u70b9\u7684\u5b9e\u9645\u524d\u540e\u987a\u5e8f\u98a0\u5012\uff0c\u4ece\u800c\u5f71\u54cd\u5339\u914d\uff0c\u6240\u4ee5\u786e\u4fdd\u4f60\u7684GPS\u6570\u636e\u7684\u5b9a\u4f4d\u65f6\u95f4\u6ca1\u6709\u76f8\u540c\u503c</li> <li>\u53ef\u80fd\u662f\u505c\u7559\u70b9\u8bc6\u522b\u53c2\u6570\u8bbe\u7f6e\u4e0d\u5408\u7406\uff1a\u5bfc\u81f4\u4e00\u4e9b\u6b63\u5e38\u5b9a\u4f4d\u70b9\u88ab\u8bc6\u522b\u4e3a\u505c\u7559\u70b9\uff0c\u7136\u540e\u88ab\u5220\u9664\u4e86</li> <li>\u53ef\u80fd\u662f<code>gps_sigma</code>\u3001<code>beta</code>\u8bbe\u5b9a\u4e0d\u5408\u7406\uff0c\u6211\u4eec\u5c06GPS\u70b9\u5230\u5019\u9009\u8def\u6bb5\u7684\u8ddd\u79bb\u79f0\u4e3aprj_dis\uff0cbeta\u8868\u5f81\u7684\u662f\u5bf9\u5339\u914d\u8def\u5f84\u4e0d\u8fde\u7eed\u7684\u60e9\u7f5a\u529b\u5ea6\uff0c\u8fd9\u4e2a\u503c\u8d8a\u5927\uff0c\u60e9\u7f5a\u529b\u5ea6\u8d8a\u5c0f\uff0c \u5728GPS\u6570\u636e\u8bef\u5dee\u8f83\u5927\u65f6\uff0c\u6709\u53ef\u80fd\u51fa\u73b0\u8def\u5f84\u4e0d\u8fde\u7eed\u7684\u60c5\u51b5\uff0c\u6b64\u65f6\u53ef\u4ee5\u8c03\u5c0f<code>beta</code>\uff0c\u589e\u52a0\u5bf9\u4e0d\u8fde\u7eed\u60c5\u51b5\u7684\u60e9\u7f5a\uff0c\u8c03\u5927<code>gps_sigma</code>(<code>gps_sigma</code>\u8868\u5f81\u7684\u662f\u5bf9prj_dis\u7684\u60e9\u7f5a\uff0cgps_sigma\u503c\u8d8a\u5c0f\uff0c\u5bf9prj_dis\u7684\u60e9\u7f5a\u529b\u5ea6\u8d8a\u5927)\uff0c\u5f31\u5316GPS\u70b9\u5b9a\u4f4d\u8bef\u5dee\u7684\u5f71\u54cd\uff0c\u8c03\u5c0f<code>beta</code>, \u8c03\u5927<code>gps_sigma</code>\uff0c\u5373\u589e\u52a0 <code>gps_sigma/beta</code>\uff1a\u76f4\u89c2\u610f\u4e49\u5728\u4e8e\u66f4\u52a0\u770b\u91cd\u8def\u5f84\u7684\u8fde\u7eed\u6027\uff0c\u53ef\u4ee5\u5bb9\u5fcd\u8f83\u5927\u7684<code>prj_dis</code>(\u5373\u8f83\u5927\u7684\u5b9a\u4f4d\u8bef\u5dee)\uff0c\u8c03\u5927<code>beta</code>, \u8c03\u5c0f<code>gps_sigma</code>\uff0c\u5373\u51cf\u5c0f <code>gps_sigma/beta</code>\uff1a\u76f4\u89c2\u610f\u4e49\u5728\u4e8e\u7b97\u6cd5\u503e\u5411\u4e8e\u9009\u62e9<code>prj_dis</code>\u5c0f\u7684\u8def\u6bb5\u4f5c\u4e3a\u5339\u914d\u7ed3\u679c\uff0c\u800c\u4e0d\u770b\u91cd\u5339\u914d\u7ed3\u679c\u7684\u8def\u5f84\u8fde\u7eed\u6027\uff0c\u5f53<code>gps_sigma</code>\u8d8b\u8fd1\u4e8e0\uff0c<code>beta</code>\u8d8b\u8fd1\u4e8e\u65e0\u7a77\u5927\u65f6\uff0c\u5339\u914d\u7b97\u6cd5\u5c31\u9000\u5316\u4e3a\u6700\u8fd1\u90bb\u5339\u914d\uff0c\u6ce8\u610f\uff1a<code>gps_sigma\u3001beta</code>\u7684\u5927\u5c0f\u662f\u76f8\u5bf9\u7684\uff0c\u4e00\u822c\u60c5\u51b5\u9ed8\u8ba4\u7684<code>gps_sigma\u3001beta</code>\u662f\u5408\u7406\u7684\uff0c<code>beta</code>\u4e0d\u5b9c\u5c0f\u4e8e3\uff0c<code>gps_sigma</code>\u4e0d\u5b9c\u5c0f\u4e8e15</li> <li>\u53ef\u80fd\u662f\u521d\u59cb\u5316net\u65f6\u7684<code>not_conn_cost</code>\u503c\u5c0f\u4e86\uff1a\u8fd9\u4e2a\u8868\u5f81\u7684\u662f\u5bf9\u4e8e\u8def\u5f84\u4e0d\u8fde\u7eed\u7684\u60e9\u7f5a\u529b\u5ea6, \u503c\u8d8a\u5927, \u60e9\u7f5a\u529b\u5ea6\u8d8a\u5927, \u8d8a\u4e0d\u53ef\u80fd\u8f6c\u79fb\u5230\u4e0d\u8fde\u7eed\u7684\u8def\u6bb5\u4e0a</li> <li>\u8def\u5f84\u7f13\u5b58\u672a\u66f4\u65b0\uff1a\u542f\u7528\u4e86\u8def\u5f84\u7f13\u5b58\uff0c\u5728\u8def\u7f51\u7ed3\u6784\u53d8\u5316\u540e\uff0c\u6ca1\u6709\u91cd\u65b0\u8ba1\u7b97\u8def\u5f84\u7f13\u5b58\uff0c\u5b9e\u9645\u4f7f\u7528\u7684\u662f\u65e7\u7248\u8def\u7f51\u7684\u7f13\u5b58</li> <li>\u53ef\u80fd\u662f\u6ca1\u6709\u5f00\u542f\u65b9\u5411\u9650\u5236\uff1a\u6ca1\u5f00<code>using_heading_inf</code>, \u6216\u8005<code>heading_para_array</code>\u8bbe\u7f6e\u4e0d\u5408\u7406\uff0c<code>heading_para_array</code>\u7684\u9ed8\u8ba4\u503c\u662f<code>np.array([1.0, 1.0, 1.0, 0.9, 0.8, 0.7, 0.6, 0.6, 0.5])</code></li> <li>\u5f00\u4e86\u65b9\u5411\u9650\u5236\u4f46\u662f\u6ca1\u6709\u9009\u62e9\u5408\u7406\u7684\u505c\u7559\u70b9\u5220\u9664\u53c2\u6570\u4ee5\u53ca\u964d\u9891\u53c2\u6570\uff1a\u5f00\u4e86<code>using_heading_inf</code>, \u4f46\u662f\u5dee\u5206\u822a\u5411\u89d2\u7684\u8ba1\u7b97\u5728\u8def\u53e3\u53d7\u5230\u4e86\u505c\u7559\u70b9\u7684\u5f71\u54cd\u5bfc\u81f4\u5dee\u5206\u822a\u5411\u89d2\u8ba1\u7b97\u5931\u771f</li> </ul> </li> </ul>"},{"location":"UserGuide/%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#_17","title":"\u786e\u5b9a\u5408\u7406\u53c2\u6570","text":"<ul> <li>\u9996\u5148\uff0c\u6211\u4eec\u8981\u5bf9GPS\u6570\u636e\u7684\u8d28\u91cf\u6709\u4e00\u5b9a\u7684\u8ba4\u8bc6\uff0c\u901a\u8fc7\u4f7f\u7528GIS\u8f6f\u4ef6\u5c06GPS\u70b9\u6253\u5728\u5730\u56fe\u4e0a\uff0c\u540c\u65f6\u53e0\u52a0\u8def\u7f51\uff0c\u6b64\u65f6\u53ef\u4ee5\u5229\u7528\u8ddd\u79bb\u6d4b\u91cf\u5de5\u5177\u5927\u6982\u5f97\u5230GPS\u70b9\u5230\u8def\u6bb5\u7684\u8ddd\u79bb\uff0c\u90a3\u4e48\u4f60\u7684<code>gps_buffer</code>\u53c2\u6570\u7684\u9009\u53d6\u5c31\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2a\u8ddd\u79bb\uff0c\u5982\u679c\u7edd\u5927\u591a\u6570GPS\u70b9\u5230\u5339\u914d\u8def\u6bb5\u7684\u8ddd\u79bb\u90fd\u662f<code>x</code>\u7c73\u5de6\u53f3\uff0c\u90a3\u4e48<code>gps_buffer</code>\u4e00\u5b9a\u8981\u5927\u4e8e<code>x</code>\uff0c\u504f\u5411\u4e8e\u4fdd\u5b88\u7684\u4f30\u8ba1\uff0c\u6211\u4eec\u53ef\u4ee5\u53d6 <code>x + 100</code>\u4e3a<code>gps_buffer</code></li> <li><code>top_k</code>\u53c2\u6570\u542b\u4e49\u4e3a\uff1a\u9009\u53d6GPS\u5b9a\u4f4d\u70b9\u5706\u5f62(\u534a\u5f84\u4e3a<code>gps_buffer</code>)\u8303\u56f4\u5185\u6700\u8fd1\u7684<code>top_k</code>\u4e2a\u8def\u6bb5\u4f5c\u4e3a\u5019\u9009\u8def\u6bb5\uff0c\u9ed8\u8ba420\uff0c\u5728<code>gps_buffer</code>\u5f88\u5927\u7684\u60c5\u51b5\u4e0b\uff0c\u7ee7\u7eed\u589e\u52a0<code>gps_buffer</code>\u7684\u503c\u610f\u4e49\u4e0d\u5927\uff0c\u56e0\u4e3a\u4f60\u7684<code>gps_buffer</code>\u518d\u5927\uff0c\u6700\u8fd1\u7684<code>top_k</code>\u4e2a\u8def\u6bb5\u4e5f\u4e0d\u4f1a\u53d1\u751f\u6539\u53d8</li> <li>\u5bf9\u4e8e<code>top_k</code>\uff0c\u7279\u522b\u6ce8\u610f\uff1a \u5bf9\u4e8e<code>dir</code>\u4e3a0\u7684\u8def\u6bb5\uff0c\u5b9e\u9645\u4f1a\u88ab\u62c6\u5206\u4e3a\u4e24\u6761\u62d3\u6251\u76f8\u53cd\u7684\u8def\u6bb5\uff0c\u5982\u679c\u67d0GPS\u7684<code>gps_buffer</code>\u8303\u56f4\u5185\u5173\u8054\u5230\u4e8620\u6761\u53cc\u5411\u8def\u6bb5\uff0c<code>top_k</code>\u81f3\u5c11\u4e3a40\u624d\u80fd\u5c06\u8fd920\u6761\u53cc\u5411\u8def\u6bb5\u9009\u4e3a\u6700\u7ec8\u5019\u9009</li> <li>\u6700\u77ed\u8def\u641c\u7d22\u622a\u65ad\u534a\u5f84<code>cut_off</code>\uff1a\u8fd9\u4e2a\u503c\u7684\u9009\u53d6\u4e5f\u548cGPS\u6570\u636e\u5f62\u6001\u6709\u5173\uff0c\u9ed8\u8ba41200m\uff0c\u5982\u679c\u4f60\u7684GPS\u672c\u8eab\u5c31\u662f\u4f4e\u9891\u7684\u6570\u636e\uff0c\u76f8\u90bbGPS\u70b9\u7684\u76f4\u7ebf\u8ddd\u79bb\u8d85\u8fc7\u4e861200\u7c73\uff0c\u90a3\u4e48\u5efa\u8bae<code>cut_off</code>\u4e5f\u8981\u8c03\u5927\u4e00\u4e9b\u3002\u5c24\u5176\u662f\u5728\u5bf9GPS\u6570\u636e\u505a\u4e86\u964d\u9891\u7684\u60c5\u51b5\u4e0b\uff0c\u76f8\u90bbGPS\u70b9\u7684\u8ddd\u79bb\u53d8\u7684\u66f4\u5927\u4e86</li> <li><code>gps_sigma</code>\u548c<code>beta</code>\u53ef\u4ee5\u4f7f\u7528\u7f51\u683c\u53c2\u6570\u8fdb\u884c\u641c\u7d22\u786e\u5b9a\u4e00\u7ec4\u5408\u9002\u7684\u53c2\u6570\u503c</li> </ul>"},{"location":"UserGuide/%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#_18","title":"\u5173\u4e8e\u5339\u914d\u901f\u5ea6","text":""},{"location":"UserGuide/%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#_19","title":"\u53c2\u6570\u5f71\u54cd","text":"<p>\u5173\u4e8e\u5339\u914d\u901f\u5ea6\uff0c\u5f71\u54cd\u5339\u914d\u901f\u5ea6\u7684\u53c2\u6570\u6709\uff1a</p> <ul> <li>MapMatch\u63a5\u53e3\u53c2\u6570\uff1a<code>gps_buffer</code>\uff0c<code>top_k</code>\uff0c<code>use_sub_net</code>\uff0cgps\u70b9\u7684\u6570\u91cf(GPS\u9884\u5904\u7406\u53c2\u6570\u4e5f\u4f1a\u5f71\u54cd\u70b9\u6570\uff1a\u589e\u5bc6\u3001\u964d\u9891)</li> <li>Net\u521d\u59cb\u5316\u63a5\u53e3\uff1a<code>is_hierarchical</code>\u3001<code>cut_off</code></li> </ul>"},{"location":"UserGuide/%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D/#_20","title":"\u6548\u7387\u5206\u6790","text":"<ul> <li>\u5982\u4f55\u770b\u5339\u914d\u901f\u5ea6\uff1f\u5982\u679c\u542f\u7528\u4e86\u5b50\u7f51\u7edc(<code>use_sub=True</code>)\uff0c\u5339\u914d\u7684\u65f6\u95f4\u5c31\u662f<code>__generate_st</code>  + <code>create_computational_net</code>\u4e24\u4e2a\u51fd\u6570\u6240\u82b1\u7684\u65f6\u95f4\uff0c\u63a7\u5236\u53f0\u4f1a\u8f93\u51fa\uff0c\u5982\u679c\u6ca1\u6709\u542f\u7528\u5b50\u7f51\u7edc\uff0c\u90a3\u5c31\u662f<code>__generate_st</code>\u6240\u82b1\u7684\u65f6\u95f4</li> <li>\u8def\u7f51\u521d\u59cb\u5316\u53ef\u80fd\u82b1\u8d39\u7684\u65f6\u95f4\u4f1a\u957f\u4e00\u70b9\uff0c\u4f46\u662f\u8fd9\u4e2a\u8ba1\u7b97\u662f\u4e00\u6b21\u6027\u7684\uff0c\u521d\u59cb\u5316\u5b8c\u540e\uff0c\u5b83\u53ef\u4ee5\u63d0\u4f9b\u7ed9\u4e4b\u540e\u7684\u6bcf\u4e00\u6b21\u5339\u914d\u53bb\u4f7f\u7528\uff0c\u4e0d\u9700\u8981\u91cd\u590d\u521d\u59cb\u5316\uff0c\u56e0\u4e3a\u4f20\u5165MapMatch\u7684gps_df\u91cc\u9762\u53ef\u4ee5\u5305\u542b\u591a\u4e2aagent\uff0c\u6bcf\u4e2aagent\u5339\u914d\u90fd\u662f\u57fa\u4e8e\u5df2\u7ecf\u521d\u59cb\u5316\u597d\u7684\u8def\u7f51</li> <li>\u53ef\u89c6\u5316\u8f93\u51fa\u7684\u65f6\u95f4\u5982HTML\u8f93\u51fa\u3001geojson\u8f93\u51fa\uff0c\u82b1\u8d39\u7684\u65f6\u95f4\u53ef\u80fd\u6bd4\u5339\u914d\u8fc7\u7a0b\u8fd8\u8981\u957f\uff0c\u63a7\u5236\u53f0\u8f93\u51fa\u7684export_visualization costs \u6307\u7684\u5c31\u662f\u53ef\u89c6\u5316\u6587\u4ef6\u7684\u8ba1\u7b97\u4ee5\u53ca\u5b58\u50a8\u7684\u8017\u65f6\uff0c\u5982\u679c\u7ecf\u8fc7\u4e00\u4e9b\u6d4b\u8bd5\uff0c\u4f60\u5f97\u5230\u4e86\u8f83\u597d\u7684\u53c2\u6570\u7ec4\u5408\uff0c\u5df2\u7ecf\u4e0d\u9700\u8981\u53bb\u8f93\u51fa\u53ef\u89c6\u5316\u6587\u4ef6\u6765\u6392\u9519\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u5173\u6389\u53ef\u89c6\u5316\u7684\u8f93\u51fa</li> <li>use_sub=True\u8fd8\u662fFalse\uff0c\u5982\u4f55\u9009\u62e9\uff1f\u5982\u679c\u662f\u5927\u7f51\u7edc\uff0c\u5efa\u8bae\u5f00\u542f\u4e3aTrue\uff1b\u5927\u89c4\u6a21\u8def\u7f51\u3001\u957f\u8f68\u8ff9\u7684\u60c5\u51b5\u4e0b\u5f00\u542fis_hierarchical\u4e3aTrue\uff0c\u53ef\u4ee5\u51cf\u5c11\u8ba1\u7b97\u5b50\u8def\u7f51\u7684\u65f6\u95f4</li> <li>gps_buffer\u548ctop_k\u76f4\u63a5\u5f71\u54cd\u5230\u5019\u9009\u8def\u6bb5\u7684\u6570\u91cf\uff0c\u5019\u9009\u8def\u6bb5\u6570\u91cf\u8d8a\u591a\uff0c\u8ba1\u7b97\u8d8a\u8017\u65f6\uff0cgps_buffer\u51b3\u5b9a\u7684\u662f\u4f60\u7684\u521d\u59cb\u641c\u7d22\u8303\u56f4\uff0ctop_k\u51b3\u5b9a\u7684\u662f\u641c\u7d22\u8303\u56f4\u5185\u7684\u524dtop_k\u4e2a\u8def\u6bb5\u4f1a\u8fdb\u5165\u6700\u7ec8\u5339\u914d\u8ba1\u7b97\uff0c\u5982\u679c\u5728\u5f53\u524dgps_buffer\u7684\u641c\u7d22\u8303\u56f4\u5185\uff0c\u521d\u59cb\u5019\u9009\u8def\u6bb5\u6570\u91cf\u5df2\u7ecf\u8d85\u8fc7\u4e86top_k\uff0c\u90a3\u4e48\u7ee7\u7eed\u589e\u5927gps_buffer\u610f\u4e49\u4e0d\u5927</li> <li>gps\u70b9\u7684\u6570\u91cf\u548c\u95f4\u8ddd\uff1a\u5982\u679c\u4f60100\u4e2a\u70b9\u82b1\u8d39\u7684\u65f6\u95f4\u5f88\u957f\uff0c\u6709\u53ef\u80fd\u662f\u56e0\u4e3a\u4f60\u7684GPS\u70b9\u662f\u975e\u5e38\u7a00\u758f\u7684\u70b9\uff0c\u6bd4\u5982\u8bf4\u5e73\u5747\u76f8\u90bb\u95f4\u9694\u8d85\u8fc7\u4e863km\uff0c\u7531\u4e8e\u5728\u76f8\u90bb\u95f4\u9694\u5927\u4e8e100\u7c73\u65f6\uff0c\u5339\u914d\u63a5\u53e3\u662f\u4f1a\u9ed8\u8ba4\u589e\u5bc6\u7684\uff0c\u90a3\u4e48\u5b9e\u9645\u7684GPS\u70b9\u6570\u4f1a\u589e\u52a0\uff0c\u6240\u4ee5\u5339\u914d\u901f\u5ea6\u4f1a\u589e\u52a0\uff0c\u5f53\u7136\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u8282\u589e\u5bc6\u4e34\u754c\u503cdense_interval\u6765\u63a7\u5236\u589e\u5bc6\u7684\u7a0b\u5ea6</li> <li>cut_off\uff0c\u662f\u8def\u5f84\u641c\u7d22\u622a\u65ad\u957f\u5ea6\uff0c\u5982\u679c\u4f60\u7684GPS\u70b9\u5f88\u5bc6\uff0c\u8fd9\u4e2a\u503c\u53ef\u4ee5\u964d\u4f4e\u4e00\u4e9b\uff0c\u5339\u914d\u901f\u5ea6\u4f1a\u5feb\u4e00\u4e9b\uff0c\u5982\u679c\u4f60\u7684\u70b9\u5f88\u7a00\u758f\uff0c\u4e14\u6ca1\u6709\u5f00\u542f\u589e\u5bc6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u503c\u5c31\u8981\u8c03\u5927\u4e00\u4e9b\uff0c\u4e0d\u7136\u6709\u4e9b\u8def\u5f84\u641c\u7d22\u4e0d\u51fa\u6765</li> <li>\u67d0\u79cd\u7a0b\u5ea6\u6765\u8bf4\uff1aGPS\u6570\u636e\u7684\u5b9a\u4f4d\u8bef\u5dee\u4e5f\u76f4\u63a5\u5f71\u54cd\u901f\u5ea6\uff0c\u56e0\u4e3a\u7531\u4e8e\u9ad8\u5b9a\u4f4d\u8bef\u5dee\uff0c\u8feb\u4f7f\u4f60\u4e0d\u5f97\u4e0d\u542f\u7528\u5927\u8303\u56f4gps_buffer\u548c\u8f83\u5927\u7684top_k\uff0c\u56e0\u4e3a\u6b63\u786e\u7684\u8def\u6bb5\u79bbGPS\u70b9\u592a\u8fdc\u4e86\uff0c\u90a3\u4e9b\u79bbGPS\u70b9\u8fd1\u7684\u8def\u6bb5\u90fd\u4e0d\u662f\u6b63\u786e\u7684\u5339\u914d\u8def\u6bb5</li> </ul>"},{"location":"UserGuide/%E8%B7%AF%E7%BD%91%E4%BC%98%E5%8C%96/","title":"\u8def\u7f51\u4f18\u5316","text":"<p>gotrackit\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u51e0\u79cd\u65b9\u5f0f\u6765\u5bf9\u6807\u51c6\u8def\u7f51\u505a\u4e00\u4e9b\u4f18\u5316\uff0c\u4f60\u9700\u8981\u4f7f\u7528NetReverse\u7c7b\uff0c\u8be5\u7c7b\u5305\u542b\u4e86\u4ee5\u4e0b\u51e0\u4e2a\u4e0e\u8def\u7f51\u4f18\u5316\u6709\u5173\u7684\u51fd\u6570\uff1a</p> <ul> <li>\u6e05\u6d17\u8def\u7f51\u7ebf\u5c42\u6570\u636e - clean_link_geo</li> <li>\u4fee\u590d\u8054\u901a\u6027 - modify_conn</li> <li>ID\u91cd\u6620\u5c04 - remapping_link_node_id</li> <li>\u8def\u6bb5\u5212\u5206 - divide_links</li> <li>\u73af\u8def\u5904\u7406 - circle_process</li> <li>\u62d3\u6251\u4f18\u5316 - topology_optimization</li> <li>\u8def\u7f51\u91cd\u5851 - redivide_link_node</li> </ul>"},{"location":"UserGuide/%E8%B7%AF%E7%BD%91%E4%BC%98%E5%8C%96/#_2","title":"\u6e05\u6d17\u8def\u7f51\u7ebf\u5c42\u6570\u636e","text":"<p>\u5982\u679c\u4f60\u5df2\u7ecf\u6709\u4e86\u8def\u7f51\u7ebf\u5c42\u6570\u636e(\u4eceOSM\u6216\u8005\u5176\u4ed6\u4efb\u4f55\u9014\u5f84\u83b7\u53d6\u7684)\uff0c \u4f7f\u7528create_node_from_link\u51fd\u6570\u6765\u751f\u4ea7\u62d3\u6251\u5173\u8054\u53ef\u80fd\u4f1a\u62a5\u9519\uff0c\u56e0\u4e3a\u4f60\u7684\u8def\u7f51\u7ebf\u5c42\u6570\u636e\u53ef\u80fd\u5b58\u5728\u4ee5\u4e0b\u95ee\u9898\uff1a</p> <ul> <li>\u5305\u542b\u4e86MultiLineString\u7c7b\u578b</li> <li>\u5e26\u6709Z\u5750\u6807</li> <li>\u6709\u81ea\u76f8\u4ea4\u7684\u7ebf\u5bf9\u8c61</li> </ul> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528clean_link_geo\u51fd\u6570\u5bf9\u7ebf\u5c42\u505a\u4e00\u6b21\u6e05\u6d17\uff0c\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>import geopandas as gpd\nimport gotrackit.netreverse.NetGen as ng\n\nif __name__ == '__main__':\n    # \u8bfb\u53d6\u6570\u636e\n    df = gpd.read_file(r'./data/output/request/0304/\u9053\u8def\u53cc\u7ebf20230131_84.shp')\n\n    # \u5904\u7406geometry\n    # l_threshold\u8868\u793a\u5c06\u7ebf\u578b\u4e2d\u8ddd\u79bb\u5c0f\u4e8el_threshold\u7c73\u7684\u6298\u70b9\u8fdb\u884c\u5408\u5e76\uff0c\u7b80\u5316\u8def\u7f51\uff0c\u540c\u65f6\u6d88\u9664\u91cd\u53e0\u6298\u70b9\n    # l_threshold\u63a8\u8350 1m ~ 5m\uff0c\u8fc7\u5927\u4f1a\u5bfc\u81f4\u7ebf\u578b\u7ec6\u8282\u5931\u771f\n    # plain_crs\u662f\u8981\u4f7f\u7528\u7684\u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb\n    link_gdf = ng.NetReverse.clean_link_geo(gdf=df, plain_crs='EPSG:32649', l_threshold=1.0)\n</code></pre>"},{"location":"UserGuide/%E8%B7%AF%E7%BD%91%E4%BC%98%E5%8C%96/#_3","title":"\u4fee\u590d\u8054\u901a\u6027","text":"<p>\u5982\u679c\u4f60\u5df2\u7ecf\u6709\u4e86\u6807\u51c6\u8def\u7f51\uff0c\u4f46\u662f\u8def\u7f51\u53ef\u80fd\u5b58\u5728\u8054\u901a\u6027\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528modify_conn\u51fd\u6570\u6765\u4fee\u590d\u8def\u7f51\u7684\u8054\u901a\u6027\uff0c\u4fee\u590d\u8054\u901a\u6027\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>import geopandas as gpd\nimport gotrackit.netreverse.NetGen as ng\n\nif __name__ == '__main__':\n    link_gdf = gpd.read_file(r'./data/input/net/test/sz/FinalLink.shp')\n    node_gdf = gpd.read_file(r'./data/input/net/test/sz/FinalNode.shp')\n\n    # net_file_type\u6307\u7684\u662f\u8f93\u51fa\u8def\u7f51\u6587\u4ef6\u7684\u7c7b\u578b\n    nv = ng.NetReverse(net_file_type='shp', conn_buffer=0.8, net_out_fldr=r'./data/input/net/test/sz/')\n    new_link_gdf,  new_node_gdf = nv.modify_conn(link_gdf=link_gdf, node_gdf=node_gdf, book_mark_name='sz_conn_test', generate_mark=True)\n    print(new_link_gdf)\n    print(new_node_gdf)\n</code></pre> <p>\u5728<code>net_out_fldr</code>\u4e0b\u4f1a\u751f\u6210\u8054\u901a\u6027\u4fee\u590d\u5b8c\u6210\u540e\u7684\u8def\u7f51\u6587\u4ef6\u4ee5\u53caxml\u7a7a\u95f4\u4e66\u7b7e\u6587\u4ef6\uff0c\u5c06<code>xml</code>\u6587\u4ef6\u5bfc\u5165\u5230QGIS\u53ef\u4ee5\u67e5\u770b\u4fee\u590d\u7684\u70b9\u4f4d\u60c5\u51b5\uff0c\u4ee5\u4fbf\u6392\u67e5\u662f\u5426\u6240\u6709\u4fee\u590d\u90fd\u662f\u5408\u7406\u7684</p> \u4fee\u590d\u8054\u901a\u6027\u4e4b\u524d\u590d\u8054\u901a\u6027\u4e4b\u540e <p> </p> <p> </p>"},{"location":"UserGuide/%E8%B7%AF%E7%BD%91%E4%BC%98%E5%8C%96/#id","title":"ID\u91cd\u6620\u5c04","text":"<p>\u5982\u679c\u4f60\u7684\u7ebf\u5c42\u6587\u4ef6\u7684<code>link_id</code>\u6216\u8005\u70b9\u5c42\u6587\u4ef6\u7684<code>node_id</code>\u662f\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6574\u6570\uff0c \u4f7f\u7528\u8fd9\u6837\u7684\u8def\u7f51\u5b58\u5728\u98ce\u9669\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u9759\u6001\u65b9\u6cd5remapping_link_node_id\u51fd\u6570\u8fdb\u884cID\u91cd\u6620\u5c04</p> <pre><code>import geopandas as gpd\nimport gotrackit.netreverse.NetGen as ng\n\nif __name__ == '__main__':\n    l = gpd.read_file(r'./data/input/net/xian/modifiedConn_link.shp')\n    n = gpd.read_file(r'./data/input/net/xian/modifiedConn_node.shp')\n    print(l[['link_id', 'from_node', 'to_node']])\n    print(n[['node_id']])\n    nv = ng.NetReverse()\n    nv.remapping_link_node_id(l, n)\n    print(l[['link_id', 'from_node', 'to_node']])\n    print(n[['node_id']])\n</code></pre>"},{"location":"UserGuide/%E8%B7%AF%E7%BD%91%E4%BC%98%E5%8C%96/#_4","title":"\u8def\u6bb5\u5212\u5206","text":"<p>\u4f60\u5df2\u7ecf\u6709\u4e86\u4e00\u5957\u6807\u51c6\u8def\u7f51\uff0c \u4f60\u5e0c\u671b\u5bf9link\u5c42\u8fdb\u884c\u8def\u6bb5\u5212\u5206\uff0c\u5373\u5c06\u957f\u5ea6\u5927\u4e8e<code>L</code>(m)\u7684\u8def\u6bb5\u90fd\u8fdb\u6253\u65ad\uff0c\u5e76\u4e14\u540c\u6b65\u66f4\u65b0\u70b9\u5c42\u6570\u636e\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528divide_links\u51fd\u6570\u8fdb\u884c\u8def\u6bb5\u5212\u5206</p> <pre><code>import geopandas as gpd\nimport gotrackit.netreverse.NetGen as ng\n\nif __name__ == '__main__':\n    link = gpd.read_file(r'./data/input/net/test/0317/link1.geojson')\n    node = gpd.read_file(r'./data/input/net/test/0317/node1.geojson')\n\n    nv = ng.NetReverse()\n    # \u6267\u884c\u5212\u5206\u8def\u7f51\n    # divide_l: \u6240\u6709\u957f\u5ea6\u5927\u4e8edivide_l\u7684\u8def\u6bb5\u90fd\u5c06\u6309\u7167divide_l\u8fdb\u884c\u5212\u5206\n    # min_l: \u5212\u5206\u540e\u5982\u679c\u5269\u4e0b\u7684\u8def\u6bb5\u957f\u5ea6\u5c0f\u4e8emin_l\uff0c \u90a3\u4e48\u6b64\u6b21\u5212\u5206\u5c06\u4e0d\u88ab\u5141\u8bb8\n    new_link, new_node = nv.divide_links(link_gdf=link, node_gdf=node, divide_l=50, min_l=5.0)\n\n    new_link.to_file(r'./data/input/net/test/0317/divide_link.geojson', driver='GeoJSON', encoding='gbk')\n    new_node.to_file(r'./data/input/net/test/0317/divide_node.geojson', driver='GeoJSON', encoding='gbk')\n</code></pre> \u5212\u5206\u524d\u5212\u5206\u540e <p> </p> <p> </p> <ul> <li>\u5212\u5206\u540e\uff0c\u4f1a\u751f\u4ea7\u4e00\u4e2a\u65b0\u7684\u5b57\u6bb5\uff1a<code>_parent_link</code>\uff0c\u7528\u4e8e\u8bb0\u5f55\u6b64\u8def\u6bb5\u5728\u5212\u5206\u524d\u6240\u5c5e\u7684<code>link_id</code>\uff0c\u5982\u679c\u4e3a\u7a7a\u503c\uff0c\u8bf4\u660e\u8be5\u8def\u6bb5\u6ca1\u6709\u53d1\u751f\u5212\u5206</li> <li>\u5173\u4e8e\u8def\u6bb5\u5212\u5206\u51fd\u6570\u7684\u53c2\u6570\u8be6\u89e3\u89c1\uff1adivide_links</li> </ul>"},{"location":"UserGuide/%E8%B7%AF%E7%BD%91%E4%BC%98%E5%8C%96/#_5","title":"\u5904\u7406\u73af\u8def","text":"<p>gotrackit\u4e0d\u5141\u8bb8\u8def\u7f51\u51fa\u73b0\u4ee5\u4e0b\u60c5\u51b5\uff1a</p> <ul> <li>\u73af\u8def(<code>from_node == to_node</code>)</li> <li>\u5177\u6709\u76f8\u540c\u7684\u62d3\u6251\u8d77\u7ec8\u70b9<code>(from_node\uff0cto_node)</code>\u7684link</li> </ul> \u73af\u8def\u76f8\u540c\u62d3\u6251\u8d77\u7ec8\u70b9 <p> </p> <p> </p> <p>\u5728\u6784\u5efaNet\u65f6\u4f1a\u81ea\u52a8\u8bc6\u522b\u8fd9\u4e9blink\u5e76\u4e14\u8fdb\u884c\u5220\u9664\uff0c \u5982\u679c\u4f60\u60f3\u4fdd\u7559\u8fd9\u4e9b\u8def\u6bb5\u8bf7\u4f7f\u7528circle_process\u51fd\u6570\u8fdb\u884c\u5904\u7406</p> <pre><code>import geopandas as gpd\nimport gotrackit.netreverse.NetGen as ng\n\nif __name__ == '__main__':\n    l = gpd.read_file('./data/input/net/test/0506yg/link.shp')\n    n = gpd.read_file('./data/input/net/test/0506yg/node.shp')\n\n    # \u5904\u7406\u73af\u8def\u548c\u76f8\u540cfrom_node - to_node\u7684link\n    new_link, new_node = ng.NetReverse.circle_process(link_gdf=l, node_gdf=n)\n\n    # circle_process\u5904\u7406\u540e\u8f93\u51fa\u7684\u8def\u7f51\u662f\u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb\uff0c \u9700\u8981\u8f6c\u5316\u4e3aEPSG:4326\n    new_link = new_link.to_crs('EPSG:4326')\n    new_node = new_node.to_crs('EPSG:4326')\n\n    new_link.to_file('./data/input/net/test/0506yg/new_link.shp')\n    new_node.to_file('./data/input/net/test/0506yg/new_node.shp')\n</code></pre> <p>circle_process\u5904\u7406\u540e\u5982\u56fe\uff1a</p> \u73af\u8def-\u5904\u7406\u540e\u76f8\u540c\u62d3\u6251\u8d77\u7ec8\u70b9-\u5904\u7406\u540e <p> </p> <p> </p>"},{"location":"UserGuide/%E8%B7%AF%E7%BD%91%E4%BC%98%E5%8C%96/#_6","title":"\u62d3\u6251\u4f18\u5316","text":""},{"location":"UserGuide/%E8%B7%AF%E7%BD%91%E4%BC%98%E5%8C%96/#_7","title":"\u8def\u7f51\u91cd\u5851","text":"<p>\u4f60\u5df2\u7ecf\u6709\u4e86\u7ebf\u5c42\u6587\u4ef6\uff0c\u4f46\u662f\u5176\u5b58\u5728\u6298\u70b9\u8054\u901a\u6027\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528redivide_link_node\u51fd\u6570\u8fdb\u884c\u8def\u7f51\u91cd\u5851\uff1a</p> <pre><code>import geopandas as gpd\nimport gotrackit.netreverse.NetGen as ng\n\nif __name__ == '__main__':\n    # \u8bfb\u53d6\u6570\u636e\n    origin_link = gpd.read_file(r'./data/input/net/test/0402BUG/load/test_link.geojson')\n    print(origin_link)\n\n    # \u4e3a\u9632\u6b62\u7ebf\u5c42\u7ebf\u578b\u6709\u91cd\u590d\u70b9\uff0c\u5148\u505a\u6e05\u6d17\n    origin_link = ng.NetReverse.clean_link_geo(gdf=origin_link, l_threshold=1.0, plain_crs='EPSG:32650')\n\n    # multi_core_merge=True\u8868\u793a\u542f\u7528\u591a\u8fdb\u7a0b\u8fdb\u884c\u62d3\u6251\u4f18\u5316\n    # merge_core_num\u8868\u793a\u542f\u7528\u4e24\u4e2a\u6838\n    nv = ng.NetReverse(net_out_fldr=r'./data/input/net/test/0402BUG/redivide',\n                       plain_crs='EPSG:32650', flag_name='new_divide', multi_core_merge=True,\n                       merge_core_num=2)\n\n    # \u8def\u6bb5\u3001\u8282\u70b9\u91cd\u65b0\u5212\u5206\u3001\u8054\u901a\u6027\u4fee\u590d\uff0c\u65b0\u7684\u7f51\u7edc\u6587\u4ef6\u5728net_out_fldr\u4e0b\u751f\u6210\n    nv.redivide_link_node(link_gdf=origin_link)\n</code></pre> \u91cd\u5851\u524d\u91cd\u5851\u540e <p> </p> <p> </p> <p>\u8def\u7f51\u91cd\u5851\u5b9e\u9645\u4e0a\u8fdb\u884c\u4e86\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a</p> <ul> <li> \u6309\u7167\u6298\u70b9\u62c6\u5206\u7ebf\u5c42</li> <li> \u751f\u4ea7\u70b9\u5c42</li> <li> \u8fdb\u884c\u62d3\u6251\u4f18\u5316</li> <li> \u53bb\u9664\u91cd\u53e0\u8def\u6bb5</li> <li> \u4fee\u590d\u8054\u901a\u6027</li> </ul>"},{"location":"UserGuide/%E8%B7%AF%E7%BD%91%E7%94%9F%E4%BA%A7/","title":"\u8def\u7f51\u751f\u4ea7","text":""},{"location":"UserGuide/%E8%B7%AF%E7%BD%91%E7%94%9F%E4%BA%A7/#_2","title":"\u58f0\u660e","text":"<p>Note</p> <p>1.\u8be5\u8def\u7f51\u83b7\u53d6\u65b9\u5f0f\u5229\u7528\u7684\u662f\u9ad8\u5fb7\u5f00\u653e\u5e73\u53f0\u7684\u5b98\u65b9API - \u8def\u5f84\u89c4\u5212\u63a5\u53e3\uff0c\u4e0d\u6d89\u53ca\u722c\u866b\u6293\u5305\uff01</p> <p>2.\u4efb\u4f55\u975e\u5b98\u65b9\u91c7\u8d2d\u5f62\u5f0f\u7684\u8def\u7f51\u83b7\u53d6\u65b9\u6cd5\u90fd\u4e0d\u53ef\u80fd\u83b7\u5f97\u5b8c\u6574\u7684\u8def\u7f51\u6570\u636e\uff01</p> <p>3.\u4f9d\u636e\u672c\u5f00\u6e90\u5305\u7684\u5f00\u6e90\u534f\u8bae\uff1a\u901a\u8fc7\u8be5\u65b9\u5f0f\u83b7\u53d6\u7684\u8def\u7f51\u6570\u636e\u4e25\u7981\u7528\u4e8e\u5546\u4e1a\u884c\u4e3a\uff0c\u4ec5\u9650\u4e8e\u6559\u80b2\u4ee5\u53ca\u79d1\u5b66\u7814\u7a76\u8bfe\u9898\uff0c\u5982\u6709\u5546\u7528\u9700\u6c42\u8bf7\u8054\u7cfb\u9ad8\u5fb7\u5ba2\u670d\u8fdb\u884c\u8def\u7f51\u91c7\u8d2d\uff0c\u611f\u8c22\u9ad8\u5fb7\u5f00\u653e\u5e73\u53f0\u7684\u514d\u8d39\u63a5\u53e3\uff01</p> <p>\u6ce8\u610f\u5750\u6807\u7cfb!!!</p> <p>\u8bf7\u6ce8\u610f\uff1a\u901a\u8fc7\u8be5\u65b9\u5f0f\u83b7\u53d6\u7684\u8def\u7f51\u7684\u5750\u6807\u7cfb\u662fGCJ-02\uff0c\u4e00\u822c\u7684GPS\u6570\u636e\u5750\u6807\u7cfb\u90fd\u662fWGS-84\u3002</p> <p>Note</p> <p>\u672c\u5f00\u6e90\u5305\u83b7\u53d6\u8def\u7f51\u7684\u539f\u7406\uff0c\u548cosm\u4e4b\u7c7b\u7684\u5e73\u53f0\u83b7\u53d6\u8def\u7f51\u7684\u539f\u7406\uff0c\u662f\u4e0d\u4e00\u6837\u7684\uff1a</p> <p>1.osm\u662f\u5e93\u91cc\u5df2\u6709\u8def\u7f51\uff0c\u7528\u6237\u6846\u9009\u83b7\u53d6\u5c5e\u4e8e\u67e5\u8be2\u83b7\u53d6\uff1b</p> <p>2.gotrackit\u662f\u57fa\u4e8e\u8def\u5f84\u89c4\u5212API\u63a5\u53e3\u8fd4\u56de\u7684\u8def\u5f84\u8fdb\u884c\u5206\u6790\u8ba1\u7b97\uff0c\u4ece\u800c\u83b7\u53d6\u8def\u7f51\u3002\u6240\u4ee5OD\u6784\u9020\u7684\u7cbe\u5ea6\u548c\u6570\u91cf\u76f4\u63a5\u51b3\u5b9a\u4e86\u8def\u7f51\u7684\u5b8c\u6574\u5ea6\uff01\u8bf7\u7559\u610f\u6784\u9020OD\u7684\u65b9\u5f0f\u548cOD\u6570\u91cf\u3002</p>"},{"location":"UserGuide/%E8%B7%AF%E7%BD%91%E7%94%9F%E4%BA%A7/#_3","title":"\u8def\u7f51\u751f\u4ea7\u6982\u8ff0","text":"<p>gotrackit\u751f\u4ea7\u8def\u7f51\u7684\u539f\u7406\u4e3a\uff1a</p> <ol> <li>\u6784\u9020OD\u8d77\u7ec8\u70b9\u5750\u6807\uff1b</li> <li>\u5c06\u6784\u9020\u597d\u7684OD\u4f20\u5165\u8def\u5f84\u89c4\u5212\u5f00\u653e\u5e73\u53f0\uff0c\u83b7\u53d6\u9a7e\u8f66\u8def\u5f84\uff1b</li> <li>\u4ee5\u4e8c\u8fdb\u5236\u8def\u5f84\u6587\u4ef6\u7684\u5f62\u5f0f\u5c06\u9a7e\u8f66\u8def\u5f84\u5b58\u50a8\u5728\u672c\u5730\uff1b</li> <li>\u8bf7\u6c42\u7ed3\u675f\u540e\uff0c\u89e3\u6790\u4e8c\u8fdb\u5236\u8def\u5f84\u6587\u4ef6\uff0c\u8ba1\u7b97\u5f97\u5230\u6807\u51c6\u8def\u7f51\u3002</li> </ol> <p>gotrackit\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u51e0\u79cd\u65b9\u5f0f\u6765\u6784\u9020OD\uff0c\u5e76\u4e14\u5e2e\u52a9\u6211\u4eec\u89e3\u6790\u8def\u5f84\u6587\u4ef6\u83b7\u53d6\u8def\u7f51\uff0c\u4f7f\u7528\u8def\u7f51\u751f\u4ea7\u529f\u80fd\uff0c\u4f60\u9700\u8981\u4f7f\u7528NetReverse\u7c7b\uff0c\u8be5\u7c7b\u5305\u542b\u4e86\u4ee5\u4e0b\u51e0\u4e2a\u4e0e\u8def\u7f51\u751f\u4ea7\u6709\u5173\u7684\u51fd\u6570\uff1a</p> <ul> <li> \u8bf7\u6c42\u8def\u5f84\u8ba1\u7b97\u83b7\u53d6\u6807\u51c6\u8def\u7f51 - generate_net_from_request</li> <li> \u89e3\u6790\u8def\u5f84\u8ba1\u7b97\u83b7\u53d6\u6807\u51c6\u8def\u7f51 - generate_net_from_pickle</li> <li> \u8bfb\u53d6\u7ebf\u5c42\u8ba1\u7b97\u83b7\u53d6\u6807\u51c6\u8def\u7f51 - generate_net_from_path_gdf</li> <li> \u4ece\u7ebf\u5c42\u521b\u5efa\u70b9\u5c42 - create_node_from_link</li> <li> \u8bf7\u6c42\u8def\u5f84 - request_path</li> <li> \u5408\u5e76\u6807\u51c6\u8def\u7f51 - merge_net</li> </ul>"},{"location":"UserGuide/%E8%B7%AF%E7%BD%91%E7%94%9F%E4%BA%A7/#od","title":"\u77e9\u5f62\u533a\u57df\u968f\u673a\u6784\u9020OD\u8bf7\u6c42\u8def\u5f84, \u83b7\u53d6\u8def\u7f51","text":"<p>\u4f7f\u7528generate_net_from_request\u51fd\u6570\uff0c\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>import gotrackit.netreverse.NetGen as ng\n\nif __name__ == '__main__':\n\n    # \u65b0\u5efa\u4e00\u4e2aNetReverse\u7c7b\n    # \u6307\u5b9a\u8def\u7f51\u5b58\u50a8\u76ee\u5f55net_out_fldr, \u6307\u5b9a\u4f7f\u7528\u7684\u5e73\u9762\u6295\u5f71\u5750\u6807\u7cfb\u4e3aEPSG:32650\n    nv = ng.NetReverse(flag_name='test_rectangle', net_out_fldr=r'./data/output/reverse/test_rectangle/',\n                       plain_crs='EPSG:32650', save_tpr_link=True, angle_threshold=40)\n\n    # \u6307\u5b9aWeb\u7aefKey\n    # \u6307\u5b9a\u77e9\u5f62\u533a\u57df\u7684\u76f8\u5173\u53c2\u6570w\u3001h\u3001min_lng\u3001min_lat\n    # \u6307\u5b9a\u6784\u9020OD\u7684\u7c7b\u578b\u4e3arand_o\uff0cOD\u6570od_num=200\n    nv.generate_net_from_request(key_list=['\u4f60\u7684Web\u7aefKey'],\n                                 log_fldr=r'./', save_log_file=True,\n                                 binary_path_fldr=r'./data/output/request/test_rectangle/',\n                                 w=1500, h=1500, min_lng=126.665019, min_lat=45.747539, od_type='rand_od',\n                                 od_num=200, gap_n=1000, min_od_length=800)\n</code></pre> <ul> <li> \u8fd0\u884c\u8be5\u4ee3\u7801\u540e\uff0c\u5148\u5728\u76ee\u5f55<code>./data/output/request/test_rectangle/</code>\u4e0b\u751f\u6210<code>\u8def\u5f84\u6e90\u6587\u4ef6</code></li> <li> \u7136\u540e\u5728\u76ee\u5f55<code>./data/output/reverse/test_rectangle/</code>\u4e0b\u751f\u6210<code>FinalLink.shp</code>\u548c<code>FinalNode.shp</code>\u6587\u4ef6</li> </ul>"},{"location":"UserGuide/%E8%B7%AF%E7%BD%91%E7%94%9F%E4%BA%A7/#od_1","title":"\u81ea\u5b9a\u4e49\u533a\u57df\u968f\u673a\u6784\u9020OD\u8bf7\u6c42\u8def\u5f84, \u83b7\u53d6\u8def\u7f51","text":"<p>\u6211\u4eec\u901a\u8fc7\u8bfb\u53d6<code>diy_region.shp</code>\u6765\u6307\u5b9a\u6211\u4eec\u6784\u9020\u968f\u673aOD\u7684\u533a\u57df\u8303\u56f4\uff1a</p> \u81ea\u5b9a\u4e49\u533a\u57df <p>\u4f7f\u7528generate_net_from_request\u51fd\u6570\uff0c\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>import geopandas as gpd\nimport gotrackit.netreverse.NetGen as ng\n\nif __name__ == '__main__':\n    nv = ng.NetReverse(flag_name='test_diy_region', net_out_fldr=r'./data/output/reverse/test_diy_region/',\n                       plain_crs='EPSG:32650', save_tpr_link=True, angle_threshold=20)\n    target_region_gdf = gpd.read_file(r'./data/input/region/diy_region.shp')\n    print(target_region_gdf)\n\n    # \u53c2\u6570od_num\uff1a\u4f9d\u636e\u81ea\u5df1\u9700\u6c42\u786e\u5b9a\uff0cod_num\u8d8a\u5927\uff0c\u8bf7\u6c42\u7684\u8def\u5f84\u8d8a\u591a\uff0c\u8def\u7f51\u8986\u76d6\u7387\u8d8a\u9ad8\n    nv.generate_net_from_request(key_list=['\u4f60\u7684Web\u7aefKey'],\n                                 log_fldr=r'./', save_log_file=True,\n                                 binary_path_fldr=r'./data/output/request/test_diy_region/',\n                                 region_gdf=target_region_gdf, od_type='rand_od', gap_n=1000,\n                                 min_od_length=1200, od_num=200)\n</code></pre>"},{"location":"UserGuide/%E8%B7%AF%E7%BD%91%E7%94%9F%E4%BA%A7/#-od","title":"\u533a\u57df-\u533a\u57dfOD\u8bf7\u6c42\u8def\u5f84, \u83b7\u53d6\u8def\u7f51","text":"<p>\u8bfb\u53d6\u4ea4\u901a\u5c0f\u533a\u6587\u4ef6\uff0c\u6307\u5b9aod_type\u4e3aregion_od\uff0c\u4f1a\u81ea\u52a8\u6784\u9020\u4e24\u4e24\u5730\u5757\u5f62\u5fc3\u4e4b\u95f4\u7684OD\u3002\u4f7f\u7528\u8be5\u65b9\u6cd5\u6784\u9020OD\uff0c\u9700\u8981\u786e\u4fdd\u9762\u57df\u6587\u4ef6\u4e2d\u5305\u542bregion_id\u5b57\u6bb5\u3002</p> \u591a\u533a\u57df\u6784\u9020OD <p>\u4f7f\u7528generate_net_from_request\u51fd\u6570\uff0c\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>import geopandas as gpd\nimport gotrackit.netreverse.NetGen as ng\n\nif __name__ == '__main__':\n    nv = ng.NetReverse(flag_name='test_taz', net_out_fldr=r'./data/output/reverse/test_taz/',\n                       plain_crs='EPSG:32650', save_tpr_link=True, angle_threshold=20)\n    target_region_gdf = gpd.read_file(r'./data/input/region/simple_taz.shp')\n\n    # \u53c2\u6570od_num\u5728\u533a\u57df-\u533a\u57dfOD\u4e0b\u4e0d\u751f\u6548\uff0cOD\u6570 = N * N - N, N\u4e3a\u533a\u57df\u6570\u91cf\n    nv.generate_net_from_request(key_list=['\u4f60\u7684Web\u7aefKey'],\n                                 log_fldr=r'./', save_log_file=True,\n                                 binary_path_fldr=r'./data/output/request/test_taz/',\n                                 region_gdf=target_region_gdf, od_type='region_od')\n</code></pre>"},{"location":"UserGuide/%E8%B7%AF%E7%BD%91%E7%94%9F%E4%BA%A7/#od_2","title":"\u57fa\u4e8e\u81ea\u5b9a\u4e49OD\u8bf7\u6c42\u8def\u5f84\uff0c\u83b7\u53d6\u8def\u7f51","text":"<p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u81ea\u5df1\u7684\u76f8\u5173\u7b97\u6cd5\u53bb\u6784\u9020OD\uff0c\u786e\u4fddOD\u8868\u7b26\u5408\u5e26\u9014\u5f84\u70b9\u7684OD\u6570\u636e\u8981\u6c42 \uff0c\u7136\u540e\u53ef\u4ee5\u4f7f\u7528\u81ea\u5b9a\u4e49OD\u53bb\u8bf7\u6c42\u8def\u5f84\u3001\u6784\u9020\u8def\u7f51\uff0c\u4f7f\u7528generate_net_from_request\u51fd\u6570\uff0c\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>import gotrackit.netreverse.NetGen as ng\n\nif __name__ == '__main__':\n    nv = ng.NetReverse(flag_name='test_diy_od', net_out_fldr=r'./data/output/reverse/test_diy_od/',\n                       plain_crs='EPSG:32651', save_tpr_link=True, angle_threshold=20)\n    nv.generate_net_from_request(binary_path_fldr=r'./data/output/request/test_diy_od/',\n                                 key_list=['\u4f60\u7684Web\u7aefKey'],\n                                 od_file_path=r'./data/output/od/\u82cf\u5dde\u5e02.csv', od_type='diy_od')\n\n    # \u6216\u8005\n    # diy_od_df = pd.read_csv(r'./data/output/od/\u82cf\u5dde\u5e02.csv')\n    # nv.generate_net_from_request(binary_path_fldr=r'./data/output/request/test_diy_od/',\n    #                              key_list=['\u4f60\u7684Key'],\n    #                              od_df=diy_od_df,\n    #                              od_type='diy_od')\n</code></pre> <p>\u672c\u7b97\u6cd5\u5305\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f9d\u636eGPS\u6570\u636e\u6765\u751f\u4ea7\u81ea\u5b9a\u4e49OD\u7684\u63a5\u53e3\uff0c\u53c2\u89c1\u5e26\u9014\u5f84\u70b9OD\u8ba1\u7b97</p>"},{"location":"UserGuide/%E8%B7%AF%E7%BD%91%E7%94%9F%E4%BA%A7/#_4","title":"\u89e3\u6790\u8def\u5f84\u6e90\u6587\u4ef6, \u83b7\u53d6\u8def\u7f51","text":"<p>\u4ee5\u4e0a\u4ecb\u7ecd\u7684generate_net_from_request\u51fd\u6570\u662f\u4e00\u6b21\u6027\u5c06\u8def\u5f84\u8bf7\u6c42\u548c\u8def\u7f51\u9006\u5411\u505a\u5b8c\uff0c\u7528\u6237\u4e5f\u53ef\u4ee5\u5c06\u5176\u62c6\u5206\u4e3a\u4e24\u4e2a\u5355\u72ec\u7684\u6b65\u9aa4\u8fdb\u884c\uff1a</p> <ol> <li>request_path\uff1a\u53ea\u8bf7\u6c42\u8def\u5f84\u5e76\u4e14\u7f13\u5b58</li> <li>generate_net_from_pickle: \u89e3\u6790\u672c\u5730\u7684\u8def\u5f84\u6e90\u6587\u4ef6, \u83b7\u53d6\u8def\u7f51</li> </ol> <p>\u5982\u679c\u5df2\u7ecf\u6709\u4e86\u8bf7\u6c42\u597d\u7684\u8def\u5f84\u6e90\u6587\u4ef6\uff0c\u53ef\u4ee5\u76f4\u63a5\u4ece\u8def\u5f84\u6e90\u6587\u4ef6\u4e2d\u521b\u5efa\u8def\u7f51\uff0c\u53ea\u9700\u8981\u6307\u5b9a\u8def\u5f84\u6e90\u6587\u4ef6\u76ee\u5f55\u548c\u8def\u5f84\u6e90\u6587\u4ef6\u540d\u79f0\u5217\u8868\uff0c\u4f7f\u7528generate_net_from_pickle\u51fd\u6570\uff0c\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>import gotrackit.netreverse.NetGen as ng\n\nif __name__ == '__main__':\n    nv = ng.NetReverse(flag_name='test_pickle', net_out_fldr=r'./data/output/reverse/test_pickle/',\n                       plain_crs='EPSG:32650', save_tpr_link=True, angle_threshold=20)\n    nv.generate_net_from_pickle(binary_path_fldr=r'./data/output/request/test_taz/',\n                                pickle_file_name_list=['14_test_taz_gd_path_1'])\n</code></pre>"},{"location":"UserGuide/%E8%B7%AF%E7%BD%91%E7%94%9F%E4%BA%A7/#_5","title":"\u57fa\u4e8e\u5df2\u6709\u8def\u7f51\u7ebf\u5c42, \u751f\u4ea7\u70b9\u5c42","text":"<p>\u5982\u679c\u4f60\u5df2\u7ecf\u6709\u4e86\u8def\u7f51\u7ebf\u5c42\uff0c\u7f3a\u5c11\u62d3\u6251\u5173\u8054\u5173\u7cfb\u4ee5\u53ca\u70b9\u5c42\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528create_node_from_link\u51fd\u6570\u6784\u5efa\u70b9\u5c42\u4ee5\u53ca\u6dfb\u52a0\u70b9\u5c42\u3001\u7ebf\u5c42\u7684\u5173\u8054\u5173\u7cfb\uff0c\u8be5\u63a5\u53e3\u4e3aNetReverse\u7c7b\u7684\u9759\u6001\u65b9\u6cd5</p> <p>\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a <pre><code>import geopandas as gpd\nimport gotrackit.netreverse.NetGen as ng\n\nif __name__ == '__main__':\n    # \u5bf9link.shp\u7684\u8981\u6c42: \u53ea\u9700\u8981\u6709geometry\u5b57\u6bb5\u5373\u53ef, \u4f46\u662fgeometry\u5b57\u6bb5\u7684\u51e0\u4f55\u5bf9\u8c61\u5fc5\u987b\u4e3aLineString\u7c7b\u578b(\u4e0d\u5141\u8bb8Z\u5750\u6807)\n    link_gdf = gpd.read_file(r'./data/output/create_node/link.shp')\n    print(link_gdf)\n    # update_link_field_list\u662f\u9700\u8981\u66f4\u65b0\u7684\u8def\u7f51\u57fa\u672c\u5c5e\u6027\u5b57\u6bb5\uff1alink_id\uff0cfrom_node\uff0cto_node\uff0clength\uff0cdir\n    # \u793a\u4f8b\u4e2d\uff1alink_gdf\u672c\u8eab\u5df2\u6709dir\u5b57\u6bb5\uff0c\u6240\u4ee5\u6ca1\u6709\u6307\u5b9a\u66f4\u65b0dir\n    new_link_gdf, new_node_gdf, node_group_status_gdf \\ \n        = ng.NetReverse.create_node_from_link(link_gdf=link_gdf, using_from_to=False,\n                                              update_link_field_list=['link_id',\n                                                                      'from_node',\n                                                                      'to_node',\n                                                                      'length'],\n                                              plain_crs='EPSG:32651',\n                                              modify_minimum_buffer=0.7,\n                                              execute_modify=True,\n                                              ignore_merge_rule=True,\n                                              out_fldr=r'./data/output/create_node/')\n</code></pre></p>"},{"location":"UserGuide/%E8%B7%AF%E7%BD%91%E7%94%9F%E4%BA%A7/#_6","title":"\u542f\u7528\u591a\u6838\u5e76\u884c\u9006\u5411\u8def\u7f51","text":"<p>\u82e5\u9700\u8981\u83b7\u53d6\u5927\u8303\u56f4\u7684\u8def\u7f51\uff0c\u6211\u4eec\u63a8\u8350\u4f7f\u7528\u591a\u6838\u5e76\u884c\u9006\u5411\uff0c\u5373\u5728\u521d\u59cb\u5316NetReverse\u7c7b\u65f6\uff0c\u6307\u5b9a<code>multi_core_reverse=True</code>\uff0c<code>reverse_core_num=x</code>\uff0c\u7a0b\u5e8f\u4f1a\u81ea\u52a8\u5c06\u8def\u7f51\u5212\u5206\u4e3ax\u4e2a\u5b50\u533a\u57df\uff0c\u5728\u6bcf\u4e2a\u5b50\u533a\u57df\u5185\u8fdb\u884c\u5e76\u884c\u8ba1\u7b97\uff0c\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>import gotrackit.netreverse.NetGen as ng\n\nif __name__ == '__main__':\n    # \u521d\u59cb\u5316ng.NetReverse\u7c7b\u6307\u5b9amulti_core_reverse=True, reverse_core_num=x\n    nv = ng.NetReverse(flag_name='sh',\n                       net_out_fldr=r'./data/output/shanghai/net/',\n                       plain_crs='EPSG:32651', save_tpr_link=True, angle_threshold=30, multi_core_reverse=True,\n                       reverse_core_num=2)\n\n    # \u7136\u540e\u53ef\u4ee5\u4f7f\u7528nv.generate_net_from_pickle\u6216\u8005nv.generate_net_from_request\u6216\u8005nv.redivide_link_node\u8fdb\u884c\u8def\u7f51\u751f\u4ea7\u6216\u4f18\u5316\n</code></pre> \u591a\u6838\u5e76\u884c\u540e\u751f\u6210\u591a\u4e2a\u5b50\u8def\u7f51 <p>\u8ba1\u7b97\u7ed3\u675f\u540e\uff0c\u5728<code>net_out_fldr</code>\u4e0b\u4f1a\u751f\u6210<code>reverse_core_num</code>\u4e2a\u5b50\u6587\u4ef6\u5939\uff0c\u5206\u522b\u5b58\u653e\u6700\u7ec8\u7684\u5b50\u533a\u57df\u8def\u7f51\uff0c\u5982\u679c\u4f60\u60f3\u5c06\u8fd9\u4e9b\u8def\u7f51\u8fdb\u884c\u5408\u5e76\uff0c\u8bf7\u4f7f\u7528\u8def\u7f51\u5408\u5e76\u63a5\u53e3merge_net</p>"},{"location":"UserGuide/%E8%B7%AF%E7%BD%91%E7%94%9F%E4%BA%A7/#gotrackit","title":"\u5408\u5e76gotrackit\u6807\u51c6\u8def\u7f51","text":"<p>\u5408\u5e76\u591a\u4e2a\u5730\u533a\u7684\u6807\u51c6\u8def\u7f51\uff0c\u4f7f\u7528merge_net\u51fd\u6570\uff0c\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>import os\nimport geopandas as gpd\nimport gotrackit.netreverse.NetGen as ng\n\nif __name__ == '__main__':\n    fldr = r'F:\\PyPrj\\TrackIt\\data\\input\\net\\test\\all_sichuan_path\\net'\n    net_list = []\n    for i in range(0,6):\n        net_list.append([gpd.read_file(os.path.join(fldr, f'region-{i}', 'FinalLink.shp')),\n                         gpd.read_file(os.path.join(fldr, f'region-{i}', 'FinalNode.shp'))])\n\n    l, n = ng.NetReverse.merge_net(net_list=net_list, conn_buffer=0.2,\n                                   out_fldr=r'F:\\PyPrj\\TrackIt\\data\\input\\net\\test\\all_sichuan_path\\net\\merge')\n</code></pre>"},{"location":"UserGuide/%E8%B7%AF%E7%BD%91%E7%94%9F%E4%BA%A7/#_7","title":"\u89e3\u6790\u9ad8\u7cbe\u5730\u56fe","text":"<ul> <li>\u7ed9\u51faSUMO\u8def\u7f51(.net.xml)\u6587\u4ef6\u8def\u5f84\uff0c\u8be5\u6a21\u5757\u53ef\u4ee5\u5e2e\u52a9\u4f60\u89e3\u6790\u51fa\u76f8\u5e94\u7684\u8f66\u9053\u7ea7\u62d3\u6251\u9aa8\u67b6</li> <li>\u5982\u679c\u4f60\u6709.odr\u6216\u8005.xodr\u7b49\u9ad8\u7cbe\u5730\u56fe\u6570\u636e\uff0c\u53ef\u4ee5\u5148\u4f7f\u7528sumo\u7684netconvert\u8f6c\u5316\u4e3a.net.xml\u540e</li> <li>\u4f7f\u7528gotrackit\u7684get_net_shp\u51fd\u6570\u53ef\u4ee5\u5bf9.net.xml\u683c\u5f0f\u7684\u9ad8\u7cbe\u5730\u56fe\u683c\u5f0f\u8fdb\u884c\u89e3\u6790</li> </ul> <pre><code>from gotrackit.netxfer.SumoConvert import SumoConvert\n\nif __name__ == '__main__':\n    sc = SumoConvert()\n    lane_gdf, junction_gdf, lane_polygon_gdf, avg_edge_gdf, conn_gdf = sc.get_net_shp(net_path=r'./way.net.xml')\n\n    # lane_gdf = lane_gdf.to_crs('EPSG:4326')\n    # ......\n</code></pre> <p>\u6ce8\u610f\u5750\u6807\u7cfb</p> <p>\u89e3\u6790\u51fa\u6765\u7684GeoDataFrame\uff0c\u5176\u5750\u6807\u7cfb\u4e0enet.xml\u4fdd\u6301\u4e00\u81f4\uff0c\u4e0d\u4e00\u5b9a\u662fEPSG:4326\uff0c\u9700\u8981\u4f7f\u7528to_crs\u8fdb\u884c\u8f6c\u6362</p> \u89e3\u6790\u9ad8\u7cbe\u5730\u56fe\u540e\u8fd4\u56de\u7684\u7ed3\u679c"},{"location":"UserGuide/%E8%BD%A8%E8%BF%B9%E5%A4%84%E7%90%86/","title":"\u8f68\u8ff9\u5904\u7406","text":"<p>\u8f68\u8ff9\u5904\u7406\u6a21\u5757\u63d0\u4f9b\u4e86\u8f68\u8ff9\u6570\u636e\u884c\u7a0b\u5207\u5206\u548c\u8f68\u8ff9\u6e05\u6d17\u7684\u7684\u529f\u80fd</p>"},{"location":"UserGuide/%E8%BD%A8%E8%BF%B9%E5%A4%84%E7%90%86/#_2","title":"\u884c\u7a0b\u5207\u5206","text":"<p>\u539f\u59cb\u7684GPS\u6570\u636e\u5305\u542b\u4e86\u4e00\u8f86\u8f66\u7684\u591a\u6b21\u51fa\u884c\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u8f66\u8f86\u7684\u51fa\u884c\u8fdb\u884c\u5212\u5206\u3002\u90a3\u4e48\u5982\u4f55\u7406\u89e3\u4e3b\u884c\u7a0b\u548c\u5b50\u884c\u7a0b\uff1f</p> \u884c\u7a0b\u5207\u5206 <ul> <li> \u4e3b\u884c\u7a0b\u4e3e\u4f8b\uff1a\u4e00\u8f86\u8f66\u4ece\u5bb6\u51fa\u53d1\u5230\u8fbe\u516c\u53f8\uff0c\u5c06\u8f66\u8f86\u505c\u5728\u8f66\u5e93\uff0c\u7184\u706b\u540e\uff0c\u8f66\u8f86\u4e0d\u518d\u4ea7\u751fGPS\u6570\u636e\uff0c\u4e0b\u73ed\u540e\u518d\u6b21\u542f\u52a8\uff0cGPS\u6570\u636e\u91cd\u65b0\u4ea7\u751f\uff0c\u65e9\u4e0a\u5230\u8fbe\u516c\u53f8\u7684\u6700\u540e\u4e00\u4e2a\u5b9a\u4f4d\u70b9\u548c\u4e0b\u73ed\u540e\u542f\u52a8\u8f66\u8f86\u7684\u7b2c\u4e00\u4e2a\u5b9a\u4f4d\u70b9\uff0c\u5176\u65f6\u95f4\u5dee\u8d85\u8fc7group_gap_threshold\uff0c\u5219\u5728\u6b64\u5904\u5207\u5206\u4e3b\u884c\u7a0b</li> <li> \u5b50\u884c\u7a0b\u4e3e\u4f8b\uff1a\u4e00\u8f86\u8f66\u4ece\u5bb6\u51fa\u53d1\u5230\u8fbe\u516c\u53f8\uff0c\u5728\u5230\u8fbe\u516c\u53f8\u4e4b\u524d\uff0c\u5728\u52a0\u6cb9\u7ad9\u52a0\u6cb9\uff0cGPS\u70b9\u6301\u7eed\u4ea7\u751f\uff0c\u4f46\u662f\u5b9a\u4f4d\u70b9\u96c6\u4e2d\u5728\u52a0\u6cb9\u7ad9\u9644\u8fd1\uff0c\u4ea7\u751f\u4e86\u505c\u7559\uff0c\u90a3\u4e48\u4ece\u5bb6-\u52a0\u6cb9\u7ad9\u5c31\u662f\u4e00\u6bb5\u5b50\u884c\u7a0b</li> <li> \u6bcf\u4e00\u4e2a\u6bb5\u4e3b\u884c\u7a0b\u3001\u5b50\u884c\u7a0b\uff0c\u5747\u62e5\u6709\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684agent_id</li> </ul> <p>gotrackit\u63d0\u4f9b\u4e86GpsPreProcess\u7c7b\uff0c\u5176\u5305\u542b\u7684trip_segmentations\u51fd\u6570\u53ef\u4ee5\u5bf9GPS\u6570\u636e\u8fdb\u884c\u884c\u7a0b\u5207\u5206\uff0c\u8f93\u5165\u7684\u8f68\u8ff9\u6570\u636e\u9700\u8981\u6ee1\u8db3GPS\u5b9a\u4f4d\u6570\u636e\u7684\u8981\u6c42\uff0c\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b</p> <pre><code>import pandas as pd\nfrom gotrackit.gps.GpsTrip import GpsPreProcess\n\nif __name__ == '__main__':\n    # \u8bfb\u53d6GPS\u6570\u636e\n    gps_gdf = pd.read_csv(r'data/output/gps/example/origin_gps.cssv')\n\n    # \u65b0\u5efa\u4e00\u4e2aGpsPreProcess\u793a\u4f8b\n    grp = GpsPreProcess(gps_df=gps_gdf, use_multi_core=False)\n\n    # \u8c03\u7528trip_segmentations\u65b9\u6cd5\u8fdb\u884c\u884c\u7a0b\u5207\u5206\n    # \u5207\u5206\u540e\u7684\u6570\u636e\u4f1a\u66f4\u65b0agent_id\u5b57\u6bb5\u7528\u4ee5\u533a\u5206\u4e0d\u540c\u7684\u51fa\u884c\u65c5\u7a0b\uff0c\u539fGPS\u8868\u7684agent_id\u4f1a\u5b58\u50a8\u5728origin_agent_id\u5b57\u6bb5\u4e2d\n    gps_trip = grp.trip_segmentations(group_gap_threshold=1800, plain_crs='EPSG:32650', min_distance_threshold=10.0)\n    gps_trip.to_csv(r'./data/output/gps/example/gps_trip.csv', encoding='utf_8_sig', index=False)\n</code></pre>"},{"location":"UserGuide/%E8%BD%A8%E8%BF%B9%E5%A4%84%E7%90%86/#od","title":"\u63d0\u53d6\u5e26\u9014\u5f84\u70b9\u7684OD\u6570\u636e","text":"<p>\u5982\u679c\u4f60\u7684GPS\u6570\u636e\u5df2\u7ecf\u5b8c\u6210\u4e86\u884c\u7a0b\u5207\u5206\uff0c\u4e14\u5df2\u7ecf\u6309\u7167agent_id\u3001time\u4e24\u4e2a\u5b57\u6bb5\u5347\u5e8f\u6392\u5217\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528GpsPreProcess\u7c7b\u63d0\u4f9b\u7684sampling_waypoints_od\u51fd\u6570\uff0c\u6765\u63d0\u53d6\u5e26\u9014\u5f84\u70b9\u7684OD\u6570\u636e\uff0c\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>import pandas as pd\nfrom gotrackit.gps.GpsTrip import GpsPreProcess\n\nif __name__ == '__main__':\n    # \u8bfb\u53d6GPS\u6570\u636e\n    gps_gdf = pd.read_csv(r'data/output/gps/example/gps_trip.cssv')\n\n    # \u65b0\u5efa\u4e00\u4e2aGpsPreProcess\u793a\u4f8b\n    grp = GpsPreProcess(gps_df=gps_gdf, use_multi_core=False)\n\n    # \u8fd4\u56de\u7684\u7b2c\u4e00\u4e2a\u6570\u636e\u662fOD\u8868(pd.DataFrame)\uff0c\u7b2c\u4e8c\u4e2a\u6570\u636e\u662fOD\u7ebf(gpd.GeoDataFrame)\n    gps_od, od_line = grp.sampling_waypoints_od(way_points_num=2)\n    gps_od.to_csv(r'./data/output/gps_od.csv', encoding='utf_8_sig', index=False)\n    od_line.to_file(r'./data/output/gps_od.shp')\n</code></pre>"},{"location":"UserGuide/%E8%BD%A8%E8%BF%B9%E5%A4%84%E7%90%86/#_3","title":"\u8f68\u8ff9\u6570\u636e\u6e05\u6d17","text":"<p> \u786e\u4fdd\u8f93\u5165\u7684GPS\u6570\u636e\u6ee1\u8db3GPS\u5b9a\u4f4d\u6570\u636e\u7684\u8981\u6c42\uff0cgotrackit\u7684TrajectoryPoints\u7c7b\u63d0\u4f9b\u4e86\u5bf9\u8f68\u8ff9\u6570\u636e\u8fdb\u884c\u5404\u79cd\u6e05\u6d17\u7684\u51fd\u6570\uff1a</p> <ul> <li> \u505c\u7559\u70b9\u5220\u9664 - del_dwell_points</li> <li> \u8f68\u8ff9\u70b9\u589e\u5bc6 - dense</li> <li> \u8f68\u8ff9\u70b9\u964d\u9891 - lower_frequency</li> <li> \u6ed1\u52a8\u7a97\u53e3\u5e73\u5747 - rolling_average</li> <li> \u5361\u5c14\u66fc\u6ee4\u6ce2\u5e73\u6ed1 - kf_smooth</li> <li> \u8f68\u8ff9\u70b9\u7b80\u5316 - simplify_trajectory</li> </ul> \u505c\u7559\u70b9\u5220\u9664\u8f68\u8ff9\u70b9\u589e\u5bc6\u8f68\u8ff9\u70b9\u964d\u9891\u6ed1\u52a8\u7a97\u53e3\u5e73\u6ed1\u5361\u5c14\u66fc\u6ee4\u6ce2\u5e73\u6ed1\u8f68\u8ff9\u70b9\u7b80\u5316 <p> </p> <p> </p> <p> </p> <p> </p> <p> </p> <p> </p> <p>\u5bf9\u4e8e\u4ee5\u4e0a\u6e05\u6d17\u51fd\u6570\uff0cgotrackit\u5141\u8bb8\u7528\u6237\u4f7f\u7528\u94fe\u5f0f\u64cd\u4f5c\u7684\u65b9\u5f0f\uff0c\u5bf9\u8f68\u8ff9\u6570\u636e\u6267\u884c\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u6e05\u6d17\u64cd\u4f5c\uff0c\u5728\u6e05\u6d17\u7ed3\u675f\u540e\uff0c\u652f\u6301\u4f7f\u7528export_html\u8fdb\u884c\u53ef\u89c6\u5316\u6587\u4ef6\u7684\u8f93\u51fa\u3001\u4f7f\u7528trajectory_data\u51fd\u6570\u83b7\u53d6\u6e05\u6d17\u540e\u7684\u5b9a\u4f4d\u6570\u636e\u8868\uff0c\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a</p> \u94fe\u5f0f\u64cd\u4f5c <pre><code>import os\nimport pandas as pd\nfrom gotrackit.gps.Trajectory import TrajectoryPoints\n\nif __name__ == '__main__':\n    gps_df = pd.read_csv(r'gps.csv')\n\n    # \u53bb\u9664\u540c\u4e00\u51fa\u884c\u4e2d\u7684\u76f8\u540c\u5b9a\u4f4d\u65f6\u95f4\u70b9\u6570\u636e\n    gps_df.drop_duplicates(subset=['agent_id', 'time'], keep='first', inplace=True)\n    gps_df.reset_index(inplace=True, drop=True)\n\n    # \u6784\u5efaTrajectoryPoints\u7c7b, \u5e76\u4e14\u6307\u5b9a\u4e00\u4e2aplain_crs\n    tp = TrajectoryPoints(gps_points_df=gps_df, time_unit='ms', plain_crs='EPSG:32649')\n\n    # \u95f4\u96943\u4e2a\u70b9\u91c7\u6837\u4e00\u4e2a\u70b9\n    # tp.lower_frequency(lower_n=3)\n\n    # \u5361\u5c14\u66fc\u6ee4\u6ce2\u5e73\u6ed1\n    tp.kf_smooth()\n\n    # \u4f7f\u7528\u94fe\u5f0f\u64cd\u4f5c\u81ea\u5b9a\u4e49\u9884\u5904\u7406\u7684\u5148\u540e\u987a\u5e8f, \u53ea\u8981\u4fdd\u8bc1kf_smooth()\u64cd\u4f5c\u540e\u6ca1\u6709\u6267\u884c - \u6ed1\u52a8\u7a97\u53e3\u5e73\u6ed1\u3001\u589e\u5bc6\uff0c\u5904\u7406\u540e\u7684\u8f68\u8ff9\u6570\u636e\u5373\u53ef\u5f97\u5230\u5206\u9879\u901f\u5ea6\u6570\u636e\n    # tp.simplify_trajectory().del_dwell_points()\n    # tp.dense().kf_smooth()\n    # tp.lower_frequency().dense().kf_smooth()\n\n    # \u83b7\u53d6\u6e05\u6d17\u540e\u7684\u7ed3\u679c\n    # _type\u53c2\u6570\u53ef\u4ee5\u53d6\u503c\u4e3a df \u6216\u8005 gdf\n    process_df = tp.trajectory_data(_type='df')\n\n    out_fldr = r'./data/output/'\n\n    # \u5b58\u50a8\u7ed3\u679c\n    process_df.to_csv(os.path.join(out_fldr, r'after_reprocess_gps.csv'), encoding='utf_8_sig', index=False)\n\n    # \u8f93\u51fa\u4e3ahtml\u8fdb\u884c\u52a8\u6001\u53ef\u89c6\u5316\n    tp.export_html(out_fldr=out_fldr, file_name='sample', radius=9.0)\n</code></pre> <p>Note</p> <p>\u4f7f\u7528\u94fe\u5f0f\u64cd\u4f5c\u81ea\u5b9a\u4e49\u9884\u5904\u7406\u7684\u5148\u540e\u987a\u5e8f, \u53ea\u8981\u4fdd\u8bc1kf_smooth()\u64cd\u4f5c\u540e\u6ca1\u6709\u6267\u884c: \u6ed1\u52a8\u7a97\u53e3\u5e73\u6ed1\uff0c\u5904\u7406\u540e\u7684\u8f68\u8ff9\u6570\u636e\u5373\u53ef\u5f97\u5230\u5206\u9879\u901f\u5ea6\u6570\u636e</p> <p>\u8f93\u51fa\u7684html\u6587\u4ef6\uff0c\u652f\u6301\u5bf9\u6e05\u6d17\u524d\u540e\u7684\u8f68\u8ff9\u70b9\u8fdb\u884c\u52a8\u6001\u53ef\u89c6\u5316\uff1a</p> \u94fe\u5f0f\u64cd\u4f5c"},{"location":"UserGuide/%E8%BD%A8%E8%BF%B9%E7%94%9F%E4%BA%A7/","title":"\u8f68\u8ff9\u751f\u4ea7","text":"<p>\u672c\u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2aTripGeneration\u7c7b\uff0c\u4f60\u53ea\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u8def\u7f51Net\uff0c\u8be5\u6a21\u5757\u53ef\u4ee5\u5e2e\u52a9\u4f60\u6a21\u62df\u884c\u8f66\u5e76\u4e14\u751f\u6210GPS\u5b9a\u4f4d\u6570\u636e\uff0cTripGeneration\u5305\u542b\u4ee5\u4e0b\u4e09\u79cd\u751f\u4ea7GPS\u6570\u636e\u7684\u65b9\u6cd5\uff1a</p> <ul> <li> \u751f\u4ea7\u968f\u673a\u8def\u5f84trip - generate_rand_trips</li> <li> \u751f\u4ea7\u6307\u5b9aOD\u8def\u5f84\u7684trip - generate_od_trips</li> <li> \u751f\u4ea7\u6307\u5b9a\u8def\u5f84\u7684trip - generate_destined_trips</li> </ul>"},{"location":"UserGuide/%E8%BD%A8%E8%BF%B9%E7%94%9F%E4%BA%A7/#trip","title":"\u751f\u4ea7\u968f\u673a\u8def\u5f84trip","text":"<p>\u4f7f\u7528TripGeneration\u7c7b\u63d0\u4f9b\u968fgenerate_rand_trips\u51fd\u6570\uff0c\u53ef\u4ee5\u751f\u4ea7\u968f\u673a\u8def\u5f84OD\uff0c\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a <pre><code>import geopandas as gpd\nfrom gotrackit.map.Net import Net\nfrom gotrackit.generation.SampleTrip import TripGeneration\n\nif __name__ == '__main__':\n    # 1.\u6784\u8bfb\u53d6link\u548cnode\n    link = gpd.read_file(r'./data/input/link.shp')\n    node = gpd.read_file(r'./data/input/node.shp')\n\n    # 1.\u6784\u5efa\u4e00\u4e2anet, \u8981\u6c42\u8def\u7f51\u7ebf\u5c42\u548c\u8def\u7f51\u70b9\u5c42\u5fc5\u987b\u662fWGS-84, EPSG:4326 \u5730\u7406\u5750\u6807\u7cfb\n    my_net = Net(link_gdf=link, node_gdf=node)\n    my_net.init_net()  # \u8def\u7f51\u5bf9\u8c61\u521d\u59cb\u5316\n\n    # \u65b0\u5efa\u4e00\u4e2a\u884c\u7a0b\u751f\u6210\u7c7b\n    ts = TripGeneration(net=my_net, loc_error_sigma=50.0, loc_frequency=30, time_step=0.1)\n\n    # \u968f\u673a\u751f\u6210\u884c\u7a0b\u5e76\u4e14\u8f93\u51faGPS\u6570\u636e\n    ts.generate_rand_trips(trip_num=5, out_fldr=r'./data/output/sample_gps',\n                           agent_flag='0527-agent', instant_output=True)\n</code></pre></p>"},{"location":"UserGuide/%E8%BD%A8%E8%BF%B9%E7%94%9F%E4%BA%A7/#odtrip","title":"\u751f\u4ea7\u6307\u5b9aOD\u8def\u5f84\u7684trip","text":"<p>\u4f7f\u7528TripGeneration\u7c7b\u63d0\u4f9b\u968fgenerate_od_trips\u51fd\u6570\uff0c\u53ef\u4ee5\u751f\u4ea7\u6307\u5b9aOD\u8def\u5f84\u7684trip\uff0c\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>import geopandas as gpd\nfrom gotrackit.map.Net import Net\nfrom gotrackit.generation.SampleTrip import TripGeneration\n\nif __name__ == '__main__':\n    # 1.\u6784\u8bfb\u53d6link\u548cnode\n    link = gpd.read_file(r'./data/input/link.shp')\n    node = gpd.read_file(r'./data/input/node.shp')\n\n    # 1.\u6784\u5efa\u4e00\u4e2anet, \u8981\u6c42\u8def\u7f51\u7ebf\u5c42\u548c\u8def\u7f51\u70b9\u5c42\u5fc5\u987b\u662fWGS-84, EPSG:4326 \u5730\u7406\u5750\u6807\u7cfb\n    my_net = Net(link_gdf=link, node_gdf=node)\n    my_net.init_net()  # \u8def\u7f51\u5bf9\u8c61\u521d\u59cb\u5316\n\n    # \u65b0\u5efa\u4e00\u4e2a\u884c\u7a0b\u751f\u6210\u7c7b\n    ts = TripGeneration(net=my_net, loc_error_sigma=50.0, loc_frequency=30, time_step=0.1)\n\n    node_gdf = my_net.get_node_data().to_crs('EPSG:4326').reset_index(drop=True)\n    o_set = node_gdf.sample(n=5)['node_id'].to_list()\n    od_set = [(o, d) for o in o_set for d in o_set]\n\n    # \u4f9d\u636e\u6307\u5b9a\u7684OD\u8d77\u7ec8\u70b9\u751f\u6210trip\n    ts.generate_od_trips(od_set=od_set, out_fldr=r'./data/output/sample_gps', time_format=\"%Y-%m-%d %H:%M:%S.%f\",\n                         agent_flag='0916-agent', instant_output=False, file_type='shp',\n                         start_year=2023)\n</code></pre>"},{"location":"UserGuide/%E8%BD%A8%E8%BF%B9%E7%94%9F%E4%BA%A7/#trip_1","title":"\u751f\u4ea7\u6307\u5b9a\u8def\u5f84\u7684trip","text":"<p>\u4f7f\u7528TripGeneration\u7c7b\u63d0\u4f9b\u968fgenerate_destined_trips\u51fd\u6570\uff0c\u53ef\u4ee5\u751f\u4ea7\u6307\u5b9a\u8def\u5f84\u7684trip\uff0c\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>import geopandas as gpd\nfrom gotrackit.map.Net import Net\nfrom gotrackit.generation.SampleTrip import TripGeneration\n\nif __name__ == '__main__':\n    # 1.\u6784\u8bfb\u53d6link\u548cnode\n    link = gpd.read_file(r'./data/input/link.shp')\n    node = gpd.read_file(r'./data/input/node.shp')\n\n    # 1.\u6784\u5efa\u4e00\u4e2anet, \u8981\u6c42\u8def\u7f51\u7ebf\u5c42\u548c\u8def\u7f51\u70b9\u5c42\u5fc5\u987b\u662fWGS-84, EPSG:4326 \u5730\u7406\u5750\u6807\u7cfb\n    my_net = Net(link_gdf=link, node_gdf=node)\n    my_net.init_net()  # \u8def\u7f51\u5bf9\u8c61\u521d\u59cb\u5316\n\n    # \u65b0\u5efa\u4e00\u4e2a\u884c\u7a0b\u751f\u6210\u7c7b\n    ts = TripGeneration(net=my_net, loc_error_sigma=50.0, loc_frequency=30, time_step=0.1)\n\n    # \u5229\u7528net\u5bf9\u8c61\u7684k\u8282\u70b9\u95f4\u7684K\u6700\u77ed\u8def\u63a5\u53e3\u83b7\u53d6\u8282\u70b9\u8def\u5f84\u5e8f\u5217\n    node_path = list()\n\n    # \u4ece\u8282\u70b9110943\u5230\u8fbe\u8282\u70b9225405\u7684\u6700\u77ed6\u6761\u8def\u5f84\n    for path in my_net.shortest_k_paths(110943, 225405, 6):\n        node_path.append(path)\n\n    # \u4f9d\u636e\u6307\u5b9a\u7684OD\u8d77\u7ec8\u70b9\u751f\u6210trip\n    ts.generate_destined_trips(node_paths=node_path, out_fldr=r'./data/output/sample_gps', time_format=\"%Y-%m-%d %H:%M:%S.%f\",\n                               agent_flag='0916-agent', instant_output=False, file_type='shp',\n                               start_year=2023)\n</code></pre>"}]}